/**
 * Determine whether a value is an object.
 *
 * Uses `typeof` to guarantee this works cross-realm, which is where `instanceof Object` might fail.
 *
 * Some environments where these issues are known to arise:
 * - same-origin iframes (accessing the other realm via `window.top`)
 * - `jest`.
 *
 * The exact test is:
 * ```ts
 * typeof value === 'object' && value !== null || typeof value === 'function'
 * ```
 *
 * @param value - The value to test.
 * @returns `true` if the value is an object, otherwise `false`.
 * Also performs a type assertion that defaults to `value is Object | Function` which, if the input type is a union with an object type, will infer the correct type.
 * This can be overridden with the generic type argument.
 *
 * @example
 *
 * ```ts
 * class Foo {
 *   bar = 42;
 * }
 *
 * function doStuff(input?: Foo | null) {
 *   input.bar; // Object is possibly 'null' or 'undefined'
 *
 *   // input has an object type in its union (Foo) so that type will be extracted for the 'true' condition
 *   if (isObject(input)) {
 *     input.bar; // OK (input is now typed as Foo)
 *   }
 * }
 *
 * function doOtherStuff(input: unknown) {
 *   input.bar; // Object is of type 'unknown'
 *
 *   // input is 'unknown' so there is no union type to match and it will default to 'Object | Function'
 *   if (isObject(input)) {
 *     input.bar; // Property 'bar' does not exist on type 'Object | Function'
 *   }
 *
 *   // if we know for sure that, if input is an object, it must be a specific type, we can explicitly tell the function to assert that for us
 *   if (isObject<Foo>(input)) {
 *    input.bar; // OK (input is now typed as Foo)
 *   }
 * }
 * ```
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(value) {
    return typeof value === 'object' && value !== null || typeof value === 'function';
}
/**
 * Determine whether a value is `null` or `undefined`.
 *
 * @param value - The value to test.
 * @returns `true` if the value is `null` or `undefined`, otherwise `false`.
 * Also performs a type assertion that ensures TypeScript treats the value appropriately in the `if` and `else` branches after this check.
 */
function isNullOrUndefined(value) {
    return value === null || value === void 0;
}
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/ban-types */
const metadataInternalSlot = new WeakMap();
function $typeError(operation, args, paramName, actualValue, expectedType) {
    return new TypeError(`${operation}(${args.map(String).join(',')}) - Expected '${paramName}' to be of type ${expectedType}, but got: ${Object.prototype.toString.call(actualValue)} (${String(actualValue)})`);
}
function toPropertyKeyOrUndefined(propertyKey) {
    switch (typeof propertyKey) {
        case 'undefined':
        case 'string':
        case 'symbol':
            return propertyKey;
        default:
            return `${propertyKey}`;
    }
}
function toPropertyKey(propertyKey) {
    switch (typeof propertyKey) {
        case 'string':
        case 'symbol':
            return propertyKey;
        default:
            return `${propertyKey}`;
    }
}
function ensurePropertyKeyOrUndefined(propertyKey) {
    switch (typeof propertyKey) {
        case 'undefined':
        case 'string':
        case 'symbol':
            return propertyKey;
        default:
            throw new TypeError(`Invalid metadata propertyKey: ${propertyKey}.`);
    }
}
function GetOrCreateMetadataMap(O, P, Create) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let targetMetadata be the value of O's [[Metadata]] internal slot.
    let targetMetadata = metadataInternalSlot.get(O);
    // 3. If targetMetadata is undefined, then
    if (targetMetadata === void 0) {
        // 3. a. If Create is false, return undefined.
        if (!Create) {
            return void 0;
        }
        // 3. b. Set targetMetadata to be a newly created Map object.
        targetMetadata = new Map();
        // 3. c. Set the [[Metadata]] internal slot of O to targetMetadata.
        metadataInternalSlot.set(O, targetMetadata);
    }
    // 4. Let metadataMap be ? Invoke(targetMetadata, "get", P).
    let metadataMap = targetMetadata.get(P);
    // 5. If metadataMap is undefined, then
    if (metadataMap === void 0) {
        // 5. a. If Create is false, return undefined.
        if (!Create) {
            return void 0;
        }
        // 5. b. Set metadataMap to be a newly created Map object.
        metadataMap = new Map();
        // 5. c. Perform ? Invoke(targetMetadata, "set", P, metadataMap).
        targetMetadata.set(P, metadataMap);
    }
    // 6. Return metadataMap.
    return metadataMap;
}
// 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ false);
    // 3. If metadataMap is undefined, return false.
    if (metadataMap === void 0) {
        return false;
    }
    // 4. Return ? ToBoolean(? Invoke(metadataMap, "has", MetadataKey)).
    return metadataMap.has(MetadataKey);
}
// 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
function OrdinaryHasMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let hasOwn be ? OrdinaryHasOwnMetadata(MetadataKey, O, P).
    // 3. If hasOwn is true, return true.
    if (OrdinaryHasOwnMetadata(MetadataKey, O, P)) {
        return true;
    }
    // 4. Let parent be ? O.[[GetPrototypeOf]]().
    const parent = Object.getPrototypeOf(O);
    // 5. If parent is not null, Return ? parent.[[HasMetadata]](MetadataKey, P).
    if (parent !== null) {
        return OrdinaryHasMetadata(MetadataKey, parent, P);
    }
    // 6. Return false.
    return false;
}
// 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ false);
    // 3. If metadataMap is undefined, return undefined.
    if (metadataMap === void 0) {
        return void 0;
    }
    // 4. Return ? Invoke(metadataMap, "get", MetadataKey).
    return metadataMap.get(MetadataKey);
}
// 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
function OrdinaryGetMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let hasOwn be ? OrdinaryHasOwnMetadata(MetadataKey, O, P).
    // 3. If hasOwn is true, return ? OrdinaryGetOwnMetadata(MetadataKey, O, P).
    if (OrdinaryHasOwnMetadata(MetadataKey, O, P)) {
        return OrdinaryGetOwnMetadata(MetadataKey, O, P);
    }
    // 4. Let parent be ? O.[[GetPrototypeOf]]().
    const parent = Object.getPrototypeOf(O);
    // 5. If parent is not null, return ? parent.[[GetMetadata]](MetadataKey, P).
    if (parent !== null) {
        return OrdinaryGetMetadata(MetadataKey, parent, P);
    }
    // 6. Return undefined.
    return void 0;
}
// 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, true).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ true);
    // 3. Return ? Invoke(metadataMap, "set", MetadataKey, MetadataValue).
    metadataMap.set(MetadataKey, MetadataValue);
}
// 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
function OrdinaryOwnMetadataKeys(O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let keys be ? ArrayCreate(0).
    const keys = [];
    // 3. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ false);
    // 4. If metadataMap is undefined, return keys.
    if (metadataMap === void 0) {
        return keys;
    }
    // 5. Let keysObj be ? Invoke(metadataMap, "keys").
    const keysObj = metadataMap.keys();
    // 6. Let iterator be ? GetIterator(keysObj).
    // 7. Let k be 0.
    let k = 0;
    // 8. Repeat
    for (const key of keysObj) {
        // 8. a. Let Pk be ! ToString(k).
        // 8. b. Let next be ? IteratorStep(iterator).
        // 8. c. If next is false, then
        // 8. c. i. Let setStatus be ? Set(keys, "length", k, true).
        // 8. c. ii. Assert: setStatus is true.
        // 8. c. iii. Return keys.
        // 8. d. Let nextValue be ? IteratorValue(next).
        // 8. e. Let defineStatus be CreateDataPropertyOrThrow(keys, Pk, nextValue).
        keys[k] = key;
        // 8. f. If defineStatus is an abrupt completion, return ? IteratorClose(iterator, defineStatus).
        // 8. g. Increase k by 1.
        ++k;
    }
    return keys;
}
// 3.1.6.1 OrdinaryMetadataKeys(O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
function OrdinaryMetadataKeys(O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let ownKeys be ? OrdinaryOwnMetadataKeys(O, P).
    const ownKeys = OrdinaryOwnMetadataKeys(O, P);
    // 3. Let parent be ? O.[[GetPrototypeOf]]().
    const parent = Object.getPrototypeOf(O);
    // 4. If parent is null, then return ownKeys.
    if (parent === null) {
        return ownKeys;
    }
    // 5. Let parentKeys be ? O.[[OrdinaryMetadataKeys]](P).
    const parentKeys = OrdinaryMetadataKeys(parent, P);
    // 6. Let ownKeysLen = ? Get(ownKeys, "length").
    const ownKeysLen = ownKeys.length;
    // 7. If ownKeysLen is 0, return parentKeys.
    if (ownKeysLen === 0) {
        return parentKeys;
    }
    // 8. Let parentKeysLen = ? Get(parentKeys, "length").
    const parentKeysLen = parentKeys.length;
    // 9. If parentKeysLen is 0, return ownKeys.
    if (parentKeysLen === 0) {
        return ownKeys;
    }
    // 10. Let set be a newly created Set object.
    const set = new Set();
    // 11. Let keys be ? ArrayCreate(0).
    const keys = [];
    // 12. Let k be 0.
    let k = 0;
    // 13. For each element key of ownKeys
    let key;
    for (let i = 0; i < ownKeysLen; ++i) {
        key = ownKeys[i];
        // 13. a. Let hasKey be ? Invoke(set, "has", key).
        // 13. b. If hasKey is false, then
        if (!set.has(key)) {
            // 13. b. i. Let Pk be ! ToString(k).
            // 13. b. ii. Perform ? Invoke(set, "add", key).
            set.add(key);
            // 13. b. iii. Let defineStatus be CreateDataProperty(keys, Pk, key).
            // 13. b. iv. Assert: defineStatus is true.
            keys[k] = key;
            // 13. b. v. Increase k by 1.
            ++k;
        }
    }
    // 14. For each element key of parentKeys
    for (let i = 0; i < parentKeysLen; ++i) {
        key = parentKeys[i];
        // 14. a. Let hasKey be ? Invoke(set, "has", key).
        // 14. b. If hasKey is false, then
        if (!set.has(key)) {
            // 14. b. i. Let Pk be ! ToString(k).
            // 14. b. ii. Perform ? Invoke(set, "add", key).
            set.add(key);
            // 14. b. iii. Let defineStatus be CreateDataProperty(keys, Pk, key).
            // 14. b. iv. Assert: defineStatus is true.
            keys[k] = key;
            // 14. b. v. Increase k by 1.
            ++k;
        }
    }
    // 15. Perform ? Set(keys, "length", k).
    // 16. return keys.
    return keys;
}
// 3.1.8 DeleteMetadata(MetadataKey, P)
// https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots-deletemetadata
function OrdinaryDeleteMetadata(O, MetadataKey, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, false);
    // 3. If metadataMap is undefined, return false.
    if (metadataMap === void 0) {
        return false;
    }
    // 4. Return ? Invoke(metadataMap, "delete", MetadataKey).
    return metadataMap.delete(MetadataKey);
}
// 4.1.2 Reflect.metadata(metadataKey, metadataValue)
// https://rbuckton.github.io/reflect-metadata/#reflect.metadata
/**
 * A default metadata decorator factory that can be used on a class, class member, or parameter.
 *
 * @param metadataKey - The key for the metadata entry.
 * If `metadataKey` is already defined for the target and target key, the
 * metadataValue for that key will be overwritten.
 * @param metadataValue - The value for the metadata entry.
 * @returns A decorator function.
 */
function metadata(metadataKey, metadataValue) {
    function decorator(target, propertyKey) {
        // 1. Assert: F has a [[MetadataKey]] internal slot whose value is an ECMAScript language value, or undefined.
        // 2. Assert: F has a [[MetadataValue]] internal slot whose value is an ECMAScript language value, or undefined.
        // 3. If Type(target) is not Object, throw a TypeError exception.
        if (!isObject(target)) {
            throw $typeError('@metadata', [metadataKey, metadataValue, target, propertyKey], 'target', target, 'Object or Function');
        }
        // 4. If key is not undefined and IsPropertyKey(key) is false, throw a TypeError exception.
        // 5. Let metadataKey be the value of F's [[MetadataKey]] internal slot.
        // 6. Let metadataValue be the value of F's [[MetadataValue]] internal slot.
        // 7. Perform ? target.[[DefineMetadata]](metadataKey, metadataValue, target, key).
        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, ensurePropertyKeyOrUndefined(propertyKey));
        // 8. Return undefined.
    }
    return decorator;
}
function decorate(decorators, target, propertyKey, attributes) {
    if (propertyKey !== void 0) {
        if (!Array.isArray(decorators)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'decorators', decorators, 'Array');
        }
        if (!isObject(target)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'target', target, 'Object or Function');
        }
        if (!isObject(attributes) && !isNullOrUndefined(attributes)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'attributes', attributes, 'Object, Function, null, or undefined');
        }
        if (attributes === null) {
            attributes = void 0;
        }
        propertyKey = toPropertyKey(propertyKey);
        return DecorateProperty(decorators, target, propertyKey, attributes);
    }
    else {
        if (!Array.isArray(decorators)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'decorators', decorators, 'Array');
        }
        if (typeof target !== 'function') {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'target', target, 'Function');
        }
        return DecorateConstructor(decorators, target);
    }
}
function DecorateConstructor(decorators, target) {
    for (let i = decorators.length - 1; i >= 0; --i) {
        const decorator = decorators[i];
        const decorated = decorator(target);
        if (!isNullOrUndefined(decorated)) {
            if (typeof decorated !== 'function') {
                throw $typeError('DecorateConstructor', [decorators, target], 'decorated', decorated, 'Function, null, or undefined');
            }
            target = decorated;
        }
    }
    return target;
}
function DecorateProperty(decorators, target, propertyKey, descriptor) {
    for (let i = decorators.length - 1; i >= 0; --i) {
        const decorator = decorators[i];
        const decorated = decorator(target, propertyKey, descriptor);
        if (!isNullOrUndefined(decorated)) {
            if (!isObject(decorated)) {
                throw $typeError('DecorateProperty', [decorators, target, propertyKey, descriptor], 'decorated', decorated, 'Object, Function, null, or undefined');
            }
            descriptor = decorated;
        }
    }
    return descriptor;
}
function $define(metadataKey, metadataValue, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.define', [metadataKey, metadataValue, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[DefineMetadata]](metadataKey, metadataValue, propertyKey).
    return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, toPropertyKeyOrUndefined(propertyKey));
}
function $has(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.has', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[HasMetadata]](metadataKey, propertyKey).
    return OrdinaryHasMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $hasOwn(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.hasOwn', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[HasOwn]](metadataKey, propertyKey).
    return OrdinaryHasOwnMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $get(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.get', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetMetadata]](metadataKey, propertyKey).
    return OrdinaryGetMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $getOwn(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.getOwn', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetOwnMetadata]](metadataKey, propertyKey).
    return OrdinaryGetOwnMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $getKeys(target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.getKeys', [target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetMetadataKeys]](propertyKey).
    return OrdinaryMetadataKeys(target, toPropertyKeyOrUndefined(propertyKey));
}
function $getOwnKeys(target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.getOwnKeys', [target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetOwnMetadataKeys]](propertyKey).
    return OrdinaryOwnMetadataKeys(target, toPropertyKeyOrUndefined(propertyKey));
}
function $delete(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.delete', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[DeleteMetadata]](metadataKey, propertyKey).
    return OrdinaryDeleteMetadata(target, metadataKey, toPropertyKeyOrUndefined(propertyKey));
}
const Metadata = {
    define: $define,
    has: $has,
    hasOwn: $hasOwn,
    get: $get,
    getOwn: $getOwn,
    getKeys: $getKeys,
    getOwnKeys: $getOwnKeys,
    delete: $delete,
};
function def(obj, key, value) {
    Reflect.defineProperty(obj, key, {
        writable: true,
        enumerable: false,
        configurable: true,
        value,
    });
}
const internalSlotName = '[[$au]]';
function hasInternalSlot(reflect) {
    return internalSlotName in reflect;
}
function applyMetadataPolyfill(reflect) {
    if (hasInternalSlot(reflect)) {
        if (reflect[internalSlotName] === metadataInternalSlot) {
            return;
        }
        throw new Error(`Conflicting @aurelia/metadata module import detected. Please make sure you have the same version of all Aurelia packages in your dependency tree.`);
    }
    if ('metadata' in reflect ||
        'decorate' in reflect ||
        'defineMetadata' in reflect ||
        'hasMetadata' in reflect ||
        'hasOwnMetadata' in reflect ||
        'getMetadata' in reflect ||
        'getOwnMetadata' in reflect ||
        'getMetadataKeys' in reflect ||
        'getOwnMetadataKeys' in reflect ||
        'deleteMetadata' in reflect) {
        throw new Error(`Conflicting reflect.metadata polyfill found. If you have 'reflect-metadata' or any other reflect polyfill imported, please remove it, if not (or if you must use a specific polyfill) please file an issue at https://github.com/aurelia/aurelia/issues so that we can look into compatibility options for this scenario.`);
    }
    def(Metadata, '$Internal', metadataInternalSlot);
    def(reflect, 'metadata', metadata);
    def(reflect, 'decorate', decorate);
    def(reflect, 'defineMetadata', $define);
    def(reflect, 'hasMetadata', $has);
    def(reflect, 'hasOwnMetadata', $hasOwn);
    def(reflect, 'getMetadata', $get);
    def(reflect, 'getOwnMetadata', $getOwn);
    def(reflect, 'getMetadataKeys', $getKeys);
    def(reflect, 'getOwnMetadataKeys', $getOwnKeys);
    def(reflect, 'deleteMetadata', $delete);
}

function $noop() { return; }
const $global = (function () {
    if (typeof global !== 'undefined') {
        return global;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    try {
        // Not all environments allow eval and Function. Use only as a last resort:
        // eslint-disable-next-line no-new-func
        return new Function('return this')();
    }
    catch (_a) {
        // If all fails, give up and create an object.
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        return {};
    }
})();
const isBrowserLike = (typeof window !== 'undefined'
    && typeof window.document !== 'undefined');
const isWebWorkerLike = (typeof self === 'object'
    && self.constructor != null
    && self.constructor.name === 'DedicatedWorkerGlobalScope');
const isNodeLike = (typeof process !== 'undefined'
    && process.versions != null
    && process.versions.node != null);
// performance.now polyfill for non-browser envs based on https://github.com/myrne/performance-now
const $now = (function () {
    var _a, _b;
    let getNanoSeconds;
    let hrtime;
    let moduleLoadTime;
    let nodeLoadTime;
    let upTime;
    if (((_a = $global.performance) === null || _a === void 0 ? void 0 : _a.now) != null) {
        const $performance = $global.performance;
        return function () {
            return $performance.now();
        };
    }
    else if (((_b = $global.process) === null || _b === void 0 ? void 0 : _b.hrtime) != null) {
        const now = function () {
            return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = $global.process.hrtime;
        getNanoSeconds = function () {
            const hr = hrtime();
            return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = $global.process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
        return now;
    }
    else {
        const now = function () {
            return Date.now() - nodeLoadTime;
        };
        nodeLoadTime = Date.now();
        return now;
    }
})();
const hasOwnProperty = Object.prototype.hasOwnProperty;
const emptyArray = Object.freeze([]);
const emptyObject = Object.freeze({});
const $PLATFORM = {
    /**
     * `true` if there is a `window` variable in the global scope with a `document` property.
     *
     * NOTE: this does not guarantee that the code is actually running in a browser, as some libraries tamper with globals.
     * The only conclusion that can be drawn is that the `window` global is available and likely behaves similar to how it would in a browser.
     */
    isBrowserLike,
    /**
     * `true` if there is a `self` variable (of type `object`) in the global scope with constructor name `'DedicatedWorkerGlobalScope'`.
     *
     * NOTE: this does not guarantee that the code is actually running in a web worker, as some libraries tamper with globals.
     * The only conclusion that can be drawn is that the `self` global is available and likely behaves similar to how it would in a web worker.
     */
    isWebWorkerLike,
    /**
     * `true` if there is a `process` variable in the global scope with a `versions` property which has a `node` property.
     *
     * NOTE: this is not a guarantee that the code is actually running in nodejs, as some libraries tamper with globals.
     * The only conclusion that can be drawn is that the `process` global is available and likely behaves similar to how it would in nodejs.
     */
    isNodeLike,
    global: $global,
    emptyArray,
    emptyObject,
    noop: $noop,
    now: $now,
    hasOwnProperty,
    restore() {
        Object.assign(PLATFORM, $PLATFORM);
    },
};
const PLATFORM = { ...$PLATFORM };

const isNumericLookup = {};
/**
 * Efficiently determine whether the provided property key is numeric
 * (and thus could be an array indexer) or not.
 *
 * Always returns true for values of type `'number'`.
 *
 * Otherwise, only returns true for strings that consist only of positive integers.
 *
 * Results are cached.
 */
function isArrayIndex(value) {
    switch (typeof value) {
        case 'number':
            return value >= 0 && (value | 0) === value;
        case 'string': {
            const result = isNumericLookup[value];
            if (result !== void 0) {
                return result;
            }
            const length = value.length;
            if (length === 0) {
                return isNumericLookup[value] = false;
            }
            let ch = 0;
            for (let i = 0; i < length; ++i) {
                ch = value.charCodeAt(i);
                if (i === 0 && ch === 0x30 && length > 1 /* must not start with 0 */ || ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {
                    return isNumericLookup[value] = false;
                }
            }
            return isNumericLookup[value] = true;
        }
        default:
            return false;
    }
}
/**
 * Determines if the value passed is a number or bigint for parsing purposes
 *
 * @param value - Value to evaluate
 */
function isNumberOrBigInt(value) {
    switch (typeof value) {
        case 'number':
        case 'bigint':
            return true;
        default:
            return false;
    }
}
/**
 * Determines if the value passed is a number or bigint for parsing purposes
 *
 * @param value - Value to evaluate
 */
function isStringOrDate(value) {
    switch (typeof value) {
        case 'string':
            return true;
        case 'object':
            return value instanceof Date;
        default:
            return false;
    }
}
/**
 * Base implementation of camel and kebab cases
 */
const baseCase = (function () {
    let CharKind;
    (function (CharKind) {
        CharKind[CharKind["none"] = 0] = "none";
        CharKind[CharKind["digit"] = 1] = "digit";
        CharKind[CharKind["upper"] = 2] = "upper";
        CharKind[CharKind["lower"] = 3] = "lower";
    })(CharKind || (CharKind = {}));
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    const isDigit = Object.assign(Object.create(null), {
        '0': true,
        '1': true,
        '2': true,
        '3': true,
        '4': true,
        '5': true,
        '6': true,
        '7': true,
        '8': true,
        '9': true,
    });
    function charToKind(char) {
        if (char === '') {
            // We get this if we do charAt() with an index out of range
            return 0 /* none */;
        }
        if (char !== char.toUpperCase()) {
            return 3 /* lower */;
        }
        if (char !== char.toLowerCase()) {
            return 2 /* upper */;
        }
        if (isDigit[char] === true) {
            return 1 /* digit */;
        }
        return 0 /* none */;
    }
    return function (input, cb) {
        const len = input.length;
        if (len === 0) {
            return input;
        }
        let sep = false;
        let output = '';
        let prevKind;
        let curChar = '';
        let curKind = 0 /* none */;
        let nextChar = input.charAt(0);
        let nextKind = charToKind(nextChar);
        for (let i = 0; i < len; ++i) {
            prevKind = curKind;
            curChar = nextChar;
            curKind = nextKind;
            nextChar = input.charAt(i + 1);
            nextKind = charToKind(nextChar);
            if (curKind === 0 /* none */) {
                if (output.length > 0) {
                    // Only set sep to true if it's not at the beginning of output.
                    sep = true;
                }
            }
            else {
                if (!sep && output.length > 0 && curKind === 2 /* upper */) {
                    // Separate UAFoo into UA Foo.
                    // Separate uaFOO into ua FOO.
                    sep = prevKind === 3 /* lower */ || nextKind === 3 /* lower */;
                }
                output += cb(curChar, sep);
                sep = false;
            }
        }
        return output;
    };
})();
/**
 * Efficiently convert a string to camelCase.
 *
 * Non-alphanumeric characters are treated as separators.
 *
 * Primarily used by Aurelia to convert DOM attribute names to ViewModel property names.
 *
 * Results are cached.
 */
const camelCase = (function () {
    const cache = Object.create(null);
    function callback(char, sep) {
        return sep ? char.toUpperCase() : char.toLowerCase();
    }
    return function (input) {
        let output = cache[input];
        if (output === void 0) {
            output = cache[input] = baseCase(input, callback);
        }
        return output;
    };
})();
/**
 * Efficiently convert a string to PascalCase.
 *
 * Non-alphanumeric characters are treated as separators.
 *
 * Primarily used by Aurelia to convert element names to class names for synthetic types.
 *
 * Results are cached.
 */
const pascalCase = (function () {
    const cache = Object.create(null);
    return function (input) {
        let output = cache[input];
        if (output === void 0) {
            output = camelCase(input);
            if (output.length > 0) {
                output = output[0].toUpperCase() + output.slice(1);
            }
            cache[input] = output;
        }
        return output;
    };
})();
/**
 * Efficiently convert a string to kebab-case.
 *
 * Non-alphanumeric characters are treated as separators.
 *
 * Primarily used by Aurelia to convert ViewModel property names to DOM attribute names.
 *
 * Results are cached.
 */
const kebabCase = (function () {
    const cache = Object.create(null);
    function callback(char, sep) {
        return sep ? `-${char.toLowerCase()}` : char.toLowerCase();
    }
    return function (input) {
        let output = cache[input];
        if (output === void 0) {
            output = cache[input] = baseCase(input, callback);
        }
        return output;
    };
})();
/**
 * Efficiently (up to 10x faster than `Array.from`) convert an `ArrayLike` to a real array.
 *
 * Primarily used by Aurelia to convert DOM node lists to arrays.
 */
function toArray(input) {
    // benchmark: http://jsben.ch/xjsyF
    const { length } = input;
    const arr = Array(length);
    for (let i = 0; i < length; ++i) {
        arr[i] = input[i];
    }
    return arr;
}
const ids = {};
/**
 * Retrieve the next ID in a sequence for a given string, starting with `1`.
 *
 * Used by Aurelia to assign unique ID's to controllers and resources.
 *
 * Aurelia will always prepend the context name with `au$`, so as long as you avoid
 * using that convention you should be safe from collisions.
 */
function nextId(context) {
    if (ids[context] === void 0) {
        ids[context] = 0;
    }
    return ++ids[context];
}
/**
 * A compare function to pass to `Array.prototype.sort` for sorting numbers.
 * This is needed for numeric sort, since the default sorts them as strings.
 */
function compareNumber(a, b) {
    return a - b;
}
const emptyArray$1 = PLATFORM.emptyArray;
/**
 * Efficiently merge and deduplicate the (primitive) values in two arrays.
 *
 * Does not deduplicate existing values in the first array.
 *
 * Guards against null or undefined arrays.
 *
 * Returns `PLATFORM.emptyArray` if both arrays are either `null`, `undefined` or `PLATFORM.emptyArray`
 *
 * @param slice - If `true`, always returns a new array copy (unless neither array is/has a value)
 */
function mergeDistinct(arr1, arr2, slice) {
    if (arr1 === void 0 || arr1 === null || arr1 === emptyArray$1) {
        if (arr2 === void 0 || arr2 === null || arr2 === emptyArray$1) {
            return emptyArray$1;
        }
        else {
            return slice ? arr2.slice(0) : arr2;
        }
    }
    else if (arr2 === void 0 || arr2 === null || arr2 === emptyArray$1) {
        return slice ? arr1.slice(0) : arr1;
    }
    const lookup = {};
    const arr3 = slice ? arr1.slice(0) : arr1;
    let len1 = arr1.length;
    let len2 = arr2.length;
    while (len1-- > 0) {
        lookup[arr1[len1]] = true;
    }
    let item;
    while (len2-- > 0) {
        item = arr2[len2];
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (lookup[item] === void 0) {
            arr3.push(item);
            lookup[item] = true;
        }
    }
    return arr3;
}
/**
 * Decorator. (lazily) bind the method to the class instance on first call.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function bound(target, key, descriptor) {
    return {
        configurable: true,
        enumerable: descriptor.enumerable,
        get() {
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            const boundFn = descriptor.value.bind(this);
            Reflect.defineProperty(this, key, {
                value: boundFn,
                writable: true,
                configurable: true,
                enumerable: descriptor.enumerable,
            });
            return boundFn;
        },
    };
}
function mergeArrays(...arrays) {
    const result = [];
    let k = 0;
    const arraysLen = arrays.length;
    let arrayLen = 0;
    let array;
    for (let i = 0; i < arraysLen; ++i) {
        array = arrays[i];
        if (array !== void 0) {
            arrayLen = array.length;
            for (let j = 0; j < arrayLen; ++j) {
                result[k++] = array[j];
            }
        }
    }
    return result;
}
function firstDefined(...values) {
    const len = values.length;
    let value;
    for (let i = 0; i < len; ++i) {
        value = values[i];
        if (value !== void 0) {
            return value;
        }
    }
    throw new Error(`No default value found`);
}
const getPrototypeChain = (function () {
    const functionPrototype = Function.prototype;
    // eslint-disable-next-line @typescript-eslint/unbound-method
    const getPrototypeOf = Object.getPrototypeOf;
    const cache = new WeakMap();
    let proto = functionPrototype;
    let i = 0;
    let chain = void 0;
    return function (Type) {
        chain = cache.get(Type);
        if (chain === void 0) {
            cache.set(Type, chain = [proto = Type]);
            i = 0;
            while ((proto = getPrototypeOf(proto)) !== functionPrototype) {
                chain[++i] = proto;
            }
        }
        return chain;
    };
})();
function toLookup(...objs) {
    return Object.assign(Object.create(null), ...objs);
}
/**
 * Determine whether the value is a native function.
 *
 * @param fn - The function to check.
 * @returns `true` is the function is a native function, otherwise `false`
 */
const isNativeFunction = (function () {
    // eslint-disable-next-line @typescript-eslint/ban-types
    const lookup = new WeakMap();
    let isNative = false;
    let sourceText = '';
    let i = 0;
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (fn) {
        isNative = lookup.get(fn);
        if (isNative === void 0) {
            sourceText = fn.toString();
            i = sourceText.length;
            // http://www.ecma-international.org/ecma-262/#prod-NativeFunction
            isNative = (
            // 29 is the length of 'function () { [native code] }' which is the smallest length of a native function string
            i >= 29 &&
                // 100 seems to be a safe upper bound of the max length of a native function. In Chrome and FF it's 56, in Edge it's 61.
                i <= 100 &&
                // This whole heuristic *could* be tricked by a comment. Do we need to care about that?
                sourceText.charCodeAt(i - 1) === 0x7D && // }
                // TODO: the spec is a little vague about the precise constraints, so we do need to test this across various browsers to make sure just one whitespace is a safe assumption.
                sourceText.charCodeAt(i - 2) <= 0x20 && // whitespace
                sourceText.charCodeAt(i - 3) === 0x5D && // ]
                sourceText.charCodeAt(i - 4) === 0x65 && // e
                sourceText.charCodeAt(i - 5) === 0x64 && // d
                sourceText.charCodeAt(i - 6) === 0x6F && // o
                sourceText.charCodeAt(i - 7) === 0x63 && // c
                sourceText.charCodeAt(i - 8) === 0x20 && //
                sourceText.charCodeAt(i - 9) === 0x65 && // e
                sourceText.charCodeAt(i - 10) === 0x76 && // v
                sourceText.charCodeAt(i - 11) === 0x69 && // i
                sourceText.charCodeAt(i - 12) === 0x74 && // t
                sourceText.charCodeAt(i - 13) === 0x61 && // a
                sourceText.charCodeAt(i - 14) === 0x6E && // n
                sourceText.charCodeAt(i - 15) === 0x58 // [
            );
            lookup.set(fn, isNative);
        }
        return isNative;
    };
})();

var LogLevel;
(function (LogLevel) {
    /**
     * The most detailed information about internal app state.
     *
     * Disabled by default and should never be enabled in a production environment.
     */
    LogLevel[LogLevel["trace"] = 0] = "trace";
    /**
     * Information that is useful for debugging during development and has no long-term value.
     */
    LogLevel[LogLevel["debug"] = 1] = "debug";
    /**
     * Information about the general flow of the application that has long-term value.
     */
    LogLevel[LogLevel["info"] = 2] = "info";
    /**
     * Unexpected circumstances that require attention but do not otherwise cause the current flow of execution to stop.
     */
    LogLevel[LogLevel["warn"] = 3] = "warn";
    /**
     * Unexpected circumstances that cause the flow of execution in the current activity to stop but do not cause an app-wide failure.
     */
    LogLevel[LogLevel["error"] = 4] = "error";
    /**
     * Unexpected circumstances that cause an app-wide failure or otherwise require immediate attention.
     */
    LogLevel[LogLevel["fatal"] = 5] = "fatal";
    /**
     * No messages should be written.
     */
    LogLevel[LogLevel["none"] = 6] = "none";
})(LogLevel || (LogLevel = {}));
const Reporter = {
    level: 3 /* warn */,
    write(code, ...params) { return; },
    error(code, ...params) { return new Error(`Code ${code}`); }
};
const Tracer = {
    /**
     * A convenience property for the user to conditionally call the tracer.
     * This saves unnecessary `noop` and `slice` calls in non-AOT scenarios even if debugging is disabled.
     * In AOT these calls will simply be removed entirely.
     *
     * This property **only** turns on tracing if `@aurelia/debug` is included and configured as well.
     */
    enabled: false,
    liveLoggingEnabled: false,
    liveWriter: null,
    /**
     * Call this at the start of a method/function.
     * Each call to `enter` **must** have an accompanying call to `leave` for the tracer to work properly.
     *
     * @param objName - Any human-friendly name to identify the traced object with.
     * @param methodName - Any human-friendly name to identify the traced method with.
     * @param args - Pass in `Array.prototype.slice.call(arguments)` to also trace the parameters, or `null` if this is not needed (to save memory/cpu)
     */
    enter(objName, methodName, args) { return; },
    /**
     * Call this at the end of a method/function. Pops one trace item off the stack.
     */
    leave() { return; },
    /**
     * Writes only the trace info leading up to the current method call.
     *
     * @param writer - An object to write the output to.
     */
    writeStack(writer) { return; },
    /**
     * Writes all trace info captured since the previous flushAll operation.
     *
     * @param writer - An object to write the output to. Can be null to simply reset the tracer state.
     */
    flushAll(writer) { return; },
    enableLiveLogging,
    /**
     * Stops writing out each trace info item as they are traced.
     */
    disableLiveLogging() { return; }
};
function enableLiveLogging(optionsOrWriter) { return; }

const annotation = {
    name: 'au:annotation',
    appendTo(target, key) {
        const keys = Metadata.getOwn(annotation.name, target);
        if (keys === void 0) {
            Metadata.define(annotation.name, [key], target);
        }
        else {
            keys.push(key);
        }
    },
    set(target, prop, value) {
        Metadata.define(annotation.keyFor(prop), value, target);
    },
    get(target, prop) {
        return Metadata.getOwn(annotation.keyFor(prop), target);
    },
    getKeys(target) {
        let keys = Metadata.getOwn(annotation.name, target);
        if (keys === void 0) {
            Metadata.define(annotation.name, keys = [], target);
        }
        return keys;
    },
    isKey(key) {
        return key.startsWith(annotation.name);
    },
    keyFor(name, context) {
        if (context === void 0) {
            return `${annotation.name}:${name}`;
        }
        return `${annotation.name}:${name}:${context}`;
    },
};
const resource = {
    name: 'au:resource',
    appendTo(target, key) {
        const keys = Metadata.getOwn(resource.name, target);
        if (keys === void 0) {
            Metadata.define(resource.name, [key], target);
        }
        else {
            keys.push(key);
        }
    },
    has(target) {
        return Metadata.hasOwn(resource.name, target);
    },
    getAll(target) {
        const keys = Metadata.getOwn(resource.name, target);
        if (keys === void 0) {
            return PLATFORM.emptyArray;
        }
        else {
            return keys.map(k => Metadata.getOwn(k, target));
        }
    },
    getKeys(target) {
        let keys = Metadata.getOwn(resource.name, target);
        if (keys === void 0) {
            Metadata.define(resource.name, keys = [], target);
        }
        return keys;
    },
    isKey(key) {
        return key.startsWith(resource.name);
    },
    keyFor(name, context) {
        if (context === void 0) {
            return `${resource.name}:${name}`;
        }
        return `${resource.name}:${name}:${context}`;
    },
};
const Protocol = {
    annotation,
    resource,
};
// eslint-disable-next-line @typescript-eslint/unbound-method
const hasOwn = Object.prototype.hasOwnProperty;
/**
 * The order in which the values are checked:
 * 1. Annotations (usually set by decorators) have the highest priority; they override the definition as well as static properties on the type.
 * 2. Definition properties (usually set by the customElement decorator object literal) come next. They override static properties on the type.
 * 3. Static properties on the type come last. Note that this does not look up the prototype chain (bindables are an exception here, but we do that differently anyway)
 * 4. The default property that is provided last. The function is only called if the default property is needed
 */
function fromAnnotationOrDefinitionOrTypeOrDefault(name, def, Type, getDefault) {
    let value = Metadata.getOwn(Protocol.annotation.keyFor(name), Type);
    if (value === void 0) {
        value = def[name];
        if (value === void 0) {
            value = Type[name];
            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
            if (value === void 0 || !hasOwn.call(Type, name)) { // First just check the value (common case is faster), but do make sure it doesn't come from the proto chain
                return getDefault();
            }
            return value;
        }
        return value;
    }
    return value;
}
/**
 * The order in which the values are checked:
 * 1. Annotations (usually set by decorators) have the highest priority; they override static properties on the type.
 * 2. Static properties on the typ. Note that this does not look up the prototype chain (bindables are an exception here, but we do that differently anyway)
 * 3. The default property that is provided last. The function is only called if the default property is needed
 */
function fromAnnotationOrTypeOrDefault(name, Type, getDefault) {
    let value = Metadata.getOwn(Protocol.annotation.keyFor(name), Type);
    if (value === void 0) {
        value = Type[name];
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (value === void 0 || !hasOwn.call(Type, name)) { // First just check the value (common case is faster), but do make sure it doesn't come from the proto chain
            return getDefault();
        }
        return value;
    }
    return value;
}
/**
 * The order in which the values are checked:
 * 1. Definition properties.
 * 2. The default property that is provided last. The function is only called if the default property is needed
 */
function fromDefinitionOrDefault(name, def, getDefault) {
    const value = def[name];
    if (value === void 0) {
        return getDefault();
    }
    return value;
}

applyMetadataPolyfill(Reflect);
class ResolverBuilder {
    constructor(container, key) {
        this.container = container;
        this.key = key;
    }
    instance(value) {
        return this.registerResolver(0 /* instance */, value);
    }
    singleton(value) {
        return this.registerResolver(1 /* singleton */, value);
    }
    transient(value) {
        return this.registerResolver(2 /* transient */, value);
    }
    callback(value) {
        return this.registerResolver(3 /* callback */, value);
    }
    cachedCallback(value) {
        return this.registerResolver(3 /* callback */, cacheCallbackResult(value));
    }
    aliasTo(destinationKey) {
        return this.registerResolver(5 /* alias */, destinationKey);
    }
    registerResolver(strategy, state) {
        const { container, key } = this;
        this.container = this.key = (void 0);
        return container.registerResolver(key, new Resolver(key, strategy, state));
    }
}
function cloneArrayWithPossibleProps(source) {
    const clone = source.slice();
    const keys = Object.keys(source);
    const len = keys.length;
    let key;
    for (let i = 0; i < len; ++i) {
        key = keys[i];
        if (!isArrayIndex(key)) {
            clone[key] = source[key];
        }
    }
    return clone;
}
const DefaultResolver = {
    none(key) { throw Error(`${key.toString()} not registered, did you forget to add @singleton()?`); },
    singleton(key) { return new Resolver(key, 1 /* singleton */, key); },
    transient(key) { return new Resolver(key, 2 /* transient */, key); },
};
const DefaultContainerConfiguration = {
    jitRegisterInRoot: true,
    defaultResolver: DefaultResolver.singleton,
};
const DI = {
    createContainer(config = DefaultContainerConfiguration) {
        return new Container(null, config);
    },
    getDesignParamtypes(Type) {
        return Metadata.getOwn('design:paramtypes', Type);
    },
    getAnnotationParamtypes(Type) {
        const key = Protocol.annotation.keyFor('di:paramtypes');
        return Metadata.getOwn(key, Type);
    },
    getOrCreateAnnotationParamTypes(Type) {
        const key = Protocol.annotation.keyFor('di:paramtypes');
        let annotationParamtypes = Metadata.getOwn(key, Type);
        if (annotationParamtypes === void 0) {
            Metadata.define(key, annotationParamtypes = [], Type);
            Protocol.annotation.appendTo(Type, key);
        }
        return annotationParamtypes;
    },
    getDependencies(Type) {
        // Note: Every detail of this getDependencies method is pretty deliberate at the moment, and probably not yet 100% tested from every possible angle,
        // so be careful with making changes here as it can have a huge impact on complex end user apps.
        // Preferably, only make changes to the dependency resolution process via a RFC.
        const key = Protocol.annotation.keyFor('di:dependencies');
        let dependencies = Metadata.getOwn(key, Type);
        if (dependencies === void 0) {
            // Type.length is the number of constructor parameters. If this is 0, it could mean the class has an empty constructor
            // but it could also mean the class has no constructor at all (in which case it inherits the constructor from the prototype).
            // Non-zero constructor length + no paramtypes means emitDecoratorMetadata is off, or the class has no decorator.
            // We're not doing anything with the above right now, but it's good to keep in mind for any future issues.
            const inject = Type.inject;
            if (inject === void 0) {
                // design:paramtypes is set by tsc when emitDecoratorMetadata is enabled.
                const designParamtypes = DI.getDesignParamtypes(Type);
                // au:annotation:di:paramtypes is set by the parameter decorator from DI.createInterface or by @inject
                const annotationParamtypes = DI.getAnnotationParamtypes(Type);
                if (designParamtypes === void 0) {
                    if (annotationParamtypes === void 0) {
                        // Only go up the prototype if neither static inject nor any of the paramtypes is defined, as
                        // there is no sound way to merge a type's deps with its prototype's deps
                        const Proto = Object.getPrototypeOf(Type);
                        if (typeof Proto === 'function' && Proto !== Function.prototype) {
                            dependencies = cloneArrayWithPossibleProps(DI.getDependencies(Proto));
                        }
                        else {
                            dependencies = [];
                        }
                    }
                    else {
                        // No design:paramtypes so just use the au:annotation:di:paramtypes
                        dependencies = cloneArrayWithPossibleProps(annotationParamtypes);
                    }
                }
                else if (annotationParamtypes === void 0) {
                    // No au:annotation:di:paramtypes so just use the design:paramtypes
                    dependencies = cloneArrayWithPossibleProps(designParamtypes);
                }
                else {
                    // We've got both, so merge them (in case of conflict on same index, au:annotation:di:paramtypes take precedence)
                    dependencies = cloneArrayWithPossibleProps(designParamtypes);
                    let len = annotationParamtypes.length;
                    let auAnnotationParamtype;
                    for (let i = 0; i < len; ++i) {
                        auAnnotationParamtype = annotationParamtypes[i];
                        if (auAnnotationParamtype !== void 0) {
                            dependencies[i] = auAnnotationParamtype;
                        }
                    }
                    const keys = Object.keys(annotationParamtypes);
                    len = keys.length;
                    let key;
                    for (let i = 0; i < len; ++i) {
                        key = keys[i];
                        if (!isArrayIndex(key)) {
                            dependencies[key] = annotationParamtypes[key];
                        }
                    }
                }
            }
            else {
                // Ignore paramtypes if we have static inject
                dependencies = cloneArrayWithPossibleProps(inject);
            }
            Metadata.define(key, dependencies, Type);
            Protocol.annotation.appendTo(Type, key);
        }
        return dependencies;
    },
    /**
     * creates a decorator that also matches an interface and can be used as a {@linkcode Key}.
     * ```ts
     * const ILogger = DI.createInterface<Logger>('Logger').noDefault();
     * container.register(Registration.singleton(ILogger, getSomeLogger()));
     * const log = container.get(ILogger);
     * log.info('hello world');
     * class Foo {
     *   constructor( @ILogger log: ILogger ) {
     *     log.info('hello world');
     *   }
     * }
     * ```
     * you can also build default registrations into your interface.
     * ```ts
     * export const ILogger = DI.createInterface<Logger>('Logger')
     *        .withDefault( builder => builder.cachedCallback(LoggerDefault));
     * const log = container.get(ILogger);
     * log.info('hello world');
     * class Foo {
     *   constructor( @ILogger log: ILogger ) {
     *     log.info('hello world');
     *   }
     * }
     * ```
     * but these default registrations won't work the same with other decorators that take keys, for example
     * ```ts
     * export const MyStr = DI.createInterface<string>('MyStr')
     *        .withDefault( builder => builder.instance('somestring'));
     * class Foo {
     *   constructor( @optional(MyStr) public readonly str: string ) {
     *   }
     * }
     * container.get(Foo).str; // returns undefined
     * ```
     * to fix this add this line somewhere before you do a `get`
     * ```ts
     * container.register(MyStr);
     * container.get(Foo).str; // returns 'somestring'
     * ```
     *
     * - @param friendlyName used to improve error messaging
     */
    createInterface(friendlyName) {
        const Interface = function (target, property, index) {
            if (target == null || new.target !== undefined) {
                throw new Error(`No registration for interface: '${Interface.friendlyName}'`); // TODO: add error (trying to resolve an InterfaceSymbol that has no registrations)
            }
            const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
            annotationParamtypes[index] = Interface;
            return target;
        };
        Interface.$isInterface = true;
        Interface.friendlyName = friendlyName == null ? 'Interface' : friendlyName;
        Interface.noDefault = function () {
            return Interface;
        };
        Interface.withDefault = function (configure) {
            Interface.withDefault = function () {
                throw Reporter.error(17, Interface);
            };
            Interface.register = function (container, key) {
                return configure(new ResolverBuilder(container, key !== null && key !== void 0 ? key : Interface));
            };
            return Interface;
        };
        return Interface;
    },
    inject(...dependencies) {
        return function (target, key, descriptor) {
            if (typeof descriptor === 'number') { // It's a parameter decorator.
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
                const dep = dependencies[0];
                if (dep !== void 0) {
                    annotationParamtypes[descriptor] = dep;
                }
            }
            else if (key) { // It's a property decorator. Not supported by the container without plugins.
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target.constructor);
                const dep = dependencies[0];
                if (dep !== void 0) {
                    annotationParamtypes[key] = dep;
                }
            }
            else if (descriptor) { // It's a function decorator (not a Class constructor)
                const fn = descriptor.value;
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(fn);
                let dep;
                for (let i = 0; i < dependencies.length; ++i) {
                    dep = dependencies[i];
                    if (dep !== void 0) {
                        annotationParamtypes[i] = dep;
                    }
                }
            }
            else { // It's a class decorator.
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
                let dep;
                for (let i = 0; i < dependencies.length; ++i) {
                    dep = dependencies[i];
                    if (dep !== void 0) {
                        annotationParamtypes[i] = dep;
                    }
                }
            }
        };
    },
    /**
     * Registers the `target` class as a transient dependency; each time the dependency is resolved
     * a new instance will be created.
     *
     * @param target - The class / constructor function to register as transient.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     *
     * @example ```ts
     * // On an existing class
     * class Foo { }
     * DI.transient(Foo);
     *
     * // Inline declaration
     * const Foo = DI.transient(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    transient(target) {
        target.register = function register(container) {
            const registration = Registration.transient(target, target);
            return registration.register(container, target);
        };
        return target;
    },
    /**
     * Registers the `target` class as a singleton dependency; the class will only be created once. Each
     * consecutive time the dependency is resolved, the same instance will be returned.
     *
     * @param target - The class / constructor function to register as a singleton.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     * @example ```ts
     * // On an existing class
     * class Foo { }
     * DI.singleton(Foo);
     *
     * // Inline declaration
     * const Foo = DI.singleton(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    singleton(target) {
        target.register = function register(container) {
            const registration = Registration.singleton(target, target);
            return registration.register(container, target);
        };
        return target;
    },
};
const IContainer = DI.createInterface('IContainer').noDefault();
const IServiceLocator = IContainer;
function createResolver(getter) {
    return function (key) {
        const resolver = function (target, property, descriptor) {
            DI.inject(resolver)(target, property, descriptor);
        };
        resolver.$isResolver = true;
        resolver.resolve = function (handler, requestor) {
            return getter(key, handler, requestor);
        };
        return resolver;
    };
}
const inject = DI.inject;
function transientDecorator(target) {
    return DI.transient(target);
}
function transient(target) {
    return target == null ? transientDecorator : transientDecorator(target);
}
function singletonDecorator(target) {
    return DI.singleton(target);
}
function singleton(target) {
    return target == null ? singletonDecorator : singletonDecorator(target);
}
const all = createResolver((key, handler, requestor) => requestor.getAll(key));
/**
 * Lazily inject a dependency depending on whether the [[`Key`]] is present at the time of function call.
 *
 * You need to make your argument a function that returns the type, for example
 * ```ts
 * class Foo {
 *   constructor( @lazy('random') public random: () => number )
 * }
 * const foo = container.get(Foo); // instanceof Foo
 * foo.random(); // throws
 * ```
 * would throw an exception because you haven't registered `'random'` before calling the method. This, would give you a
 * new [['Math.random()']] number each time.
 * ```ts
 * class Foo {
 *   constructor( @lazy('random') public random: () => random )
 * }
 * container.register(Registration.callback('random', Math.random ));
 * container.get(Foo).random(); // some random number
 * container.get(Foo).random(); // another random number
 * ```
 * `@lazy` does not manage the lifecycle of the underlying key. If you want a singleton, you have to register as a
 * `singleton`, `transient` would also behave as you would expect, providing you a new instance each time.
 *
 * - @param key [[`Key`]]
 * see { @link DI.createInterface } on interactions with interfaces
 */
const lazy = createResolver((key, handler, requestor) => {
    return () => requestor.get(key);
});
/**
 * Allows you to optionally inject a dependency depending on whether the [[`Key`]] is present, for example
 * ```ts
 * class Foo {
 *   constructor( @inject('mystring') public str: string = 'somestring' )
 * }
 * container.get(Foo); // throws
 * ```
 * would fail
 * ```ts
 * class Foo {
 *   constructor( @optional('mystring') public str: string = 'somestring' )
 * }
 * container.get(Foo).str // somestring
 * ```
 * if you use it without a default it will inject `undefined`, so rember to mark your input type as
 * possibly `undefined`!
 *
 * - @param key: [[`Key`]]
 *
 * see { @link DI.createInterface } on interactions with interfaces
 */
const optional = createResolver((key, handler, requestor) => {
    if (requestor.has(key, true)) {
        return requestor.get(key);
    }
    else {
        return undefined;
    }
});
/**
 * ignore tells the container not to try to inject a dependency
 */
function ignore(target, property, descriptor) {
    DI.inject(ignore)(target, property, descriptor);
}
ignore.$isResolver = true;
ignore.resolve = () => undefined;
/** @internal */
var ResolverStrategy;
(function (ResolverStrategy) {
    ResolverStrategy[ResolverStrategy["instance"] = 0] = "instance";
    ResolverStrategy[ResolverStrategy["singleton"] = 1] = "singleton";
    ResolverStrategy[ResolverStrategy["transient"] = 2] = "transient";
    ResolverStrategy[ResolverStrategy["callback"] = 3] = "callback";
    ResolverStrategy[ResolverStrategy["array"] = 4] = "array";
    ResolverStrategy[ResolverStrategy["alias"] = 5] = "alias";
})(ResolverStrategy || (ResolverStrategy = {}));
/** @internal */
class Resolver {
    constructor(key, strategy, state) {
        this.key = key;
        this.strategy = strategy;
        this.state = state;
        this.resolving = false;
    }
    get $isResolver() { return true; }
    register(container, key) {
        return container.registerResolver(key || this.key, this);
    }
    resolve(handler, requestor) {
        switch (this.strategy) {
            case 0 /* instance */:
                return this.state;
            case 1 /* singleton */: {
                if (this.resolving) {
                    throw new Error(`Cyclic dependency found: ${this.state.name}`);
                }
                this.resolving = true;
                const factory = handler.getFactory(this.state);
                if (factory === null) {
                    throw new Error(`Resolver for ${String(this.key)} returned a null factory`);
                }
                this.state = factory.construct(requestor);
                this.strategy = 0 /* instance */;
                this.resolving = false;
                return this.state;
            }
            case 2 /* transient */: {
                // Always create transients from the requesting container
                const factory = handler.getFactory(this.state);
                if (factory === null) {
                    throw new Error(`Resolver for ${String(this.key)} returned a null factory`);
                }
                return factory.construct(requestor);
            }
            case 3 /* callback */:
                return this.state(handler, requestor, this);
            case 4 /* array */:
                return this.state[0].resolve(handler, requestor);
            case 5 /* alias */:
                return handler.get(this.state);
            default:
                throw Reporter.error(6, this.strategy);
        }
    }
    getFactory(container) {
        let resolver;
        switch (this.strategy) {
            case 1 /* singleton */:
            case 2 /* transient */:
                return container.getFactory(this.state);
            case 5 /* alias */:
                resolver = container.getResolver(this.state);
                if (resolver == null || resolver.getFactory === void 0) {
                    return null;
                }
                return resolver.getFactory(container);
            default:
                return null;
        }
    }
}
/** @internal */
class Factory {
    constructor(Type, invoker, dependencies) {
        this.Type = Type;
        this.invoker = invoker;
        this.dependencies = dependencies;
        this.transformers = null;
    }
    construct(container, dynamicDependencies) {
        const transformers = this.transformers;
        let instance = dynamicDependencies !== void 0
            ? this.invoker.invokeWithDynamicDependencies(container, this.Type, this.dependencies, dynamicDependencies)
            : this.invoker.invoke(container, this.Type, this.dependencies);
        if (transformers == null) {
            return instance;
        }
        for (let i = 0, ii = transformers.length; i < ii; ++i) {
            instance = transformers[i](instance);
        }
        return instance;
    }
    registerTransformer(transformer) {
        if (this.transformers == null) {
            this.transformers = [];
        }
        this.transformers.push(transformer);
        return true;
    }
}
const createFactory = (function () {
    function invokeWithDynamicDependencies(container, Type, staticDependencies, dynamicDependencies) {
        let i = staticDependencies.length;
        let args = new Array(i);
        let lookup;
        while (i-- > 0) {
            lookup = staticDependencies[i];
            if (lookup == null) {
                throw Reporter.error(7, `Index ${i}.`);
            }
            else {
                args[i] = container.get(lookup);
            }
        }
        if (dynamicDependencies !== void 0) {
            args = args.concat(dynamicDependencies);
        }
        return Reflect.construct(Type, args);
    }
    const classInvokers = [
        {
            invoke(container, Type) {
                return new Type();
            },
            invokeWithDynamicDependencies
        },
        {
            invoke(container, Type, deps) {
                return new Type(container.get(deps[0]));
            },
            invokeWithDynamicDependencies
        },
        {
            invoke(container, Type, deps) {
                return new Type(container.get(deps[0]), container.get(deps[1]));
            },
            invokeWithDynamicDependencies
        },
        {
            invoke(container, Type, deps) {
                return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]));
            },
            invokeWithDynamicDependencies
        },
        {
            invoke(container, Type, deps) {
                return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]));
            },
            invokeWithDynamicDependencies
        },
        {
            invoke(container, Type, deps) {
                return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]), container.get(deps[4]));
            },
            invokeWithDynamicDependencies
        }
    ];
    const fallbackInvoker = {
        invoke: invokeWithDynamicDependencies,
        invokeWithDynamicDependencies
    };
    return function (Type) {
        if (isNativeFunction(Type)) {
            Reporter.write(5, Type.name);
        }
        const dependencies = DI.getDependencies(Type);
        const invoker = classInvokers.length > dependencies.length ? classInvokers[dependencies.length] : fallbackInvoker;
        return new Factory(Type, invoker, dependencies);
    };
})();
const containerResolver = {
    $isResolver: true,
    resolve(handler, requestor) {
        return requestor;
    }
};
function isRegistry(obj) {
    return typeof obj.register === 'function';
}
function isClass(obj) {
    return obj.prototype !== void 0;
}
function isResourceKey(key) {
    return typeof key === 'string' && key.indexOf(':') > 0;
}
const InstrinsicTypeNames = new Set([
    'Array',
    'ArrayBuffer',
    'Boolean',
    'DataView',
    'Date',
    'Error',
    'EvalError',
    'Float32Array',
    'Float64Array',
    'Function',
    'Int8Array',
    'Int16Array',
    'Int32Array',
    'Map',
    'Number',
    'Object',
    'Promise',
    'RangeError',
    'ReferenceError',
    'RegExp',
    'Set',
    'SharedArrayBuffer',
    'String',
    'SyntaxError',
    'TypeError',
    'Uint8Array',
    'Uint8ClampedArray',
    'Uint16Array',
    'Uint32Array',
    'URIError',
    'WeakMap',
    'WeakSet',
]);
/** @internal */
class Container {
    constructor(parent, config = DefaultContainerConfiguration) {
        this.parent = parent;
        this.config = config;
        this.registerDepth = 0;
        this.disposableResolvers = new Set();
        if (parent === null) {
            this.root = this;
            this.resolvers = new Map();
            this.resourceResolvers = Object.create(null);
        }
        else {
            this.root = parent.root;
            this.resolvers = new Map();
            this.resourceResolvers = Object.assign(Object.create(null), this.root.resourceResolvers);
        }
        this.resolvers.set(IContainer, containerResolver);
    }
    register(...params) {
        if (++this.registerDepth === 100) {
            throw new Error('Unable to autoregister dependency');
            // TODO: change to reporter.error and add various possible causes in description.
            // Most likely cause is trying to register a plain object that does not have a
            // register method and is not a class constructor
        }
        let current;
        let keys;
        let value;
        let j;
        let jj;
        for (let i = 0, ii = params.length; i < ii; ++i) {
            current = params[i];
            if (!isObject(current)) {
                continue;
            }
            if (isRegistry(current)) {
                current.register(this);
            }
            else if (Protocol.resource.has(current)) {
                const defs = Protocol.resource.getAll(current);
                if (defs.length === 1) {
                    // Fast path for the very common case
                    defs[0].register(this);
                }
                else {
                    const len = defs.length;
                    for (let d = 0; d < len; ++d) {
                        defs[d].register(this);
                    }
                }
            }
            else if (isClass(current)) {
                Registration.singleton(current, current).register(this);
            }
            else {
                keys = Object.keys(current);
                j = 0;
                jj = keys.length;
                for (; j < jj; ++j) {
                    value = current[keys[j]];
                    if (!isObject(value)) {
                        continue;
                    }
                    // note: we could remove this if-branch and call this.register directly
                    // - the extra check is just a perf tweak to create fewer unnecessary arrays by the spread operator
                    if (isRegistry(value)) {
                        value.register(this);
                    }
                    else {
                        this.register(value);
                    }
                }
            }
        }
        --this.registerDepth;
        return this;
    }
    registerResolver(key, resolver, isDisposable = false) {
        validateKey(key);
        const resolvers = this.resolvers;
        const result = resolvers.get(key);
        if (result == null) {
            resolvers.set(key, resolver);
            if (isResourceKey(key)) {
                this.resourceResolvers[key] = resolver;
            }
        }
        else if (result instanceof Resolver && result.strategy === 4 /* array */) {
            result.state.push(resolver);
        }
        else {
            resolvers.set(key, new Resolver(key, 4 /* array */, [result, resolver]));
        }
        if (isDisposable) {
            this.disposableResolvers.add(resolver);
        }
        return resolver;
    }
    registerTransformer(key, transformer) {
        const resolver = this.getResolver(key);
        if (resolver == null) {
            return false;
        }
        if (resolver.getFactory) {
            const factory = resolver.getFactory(this);
            if (factory == null) {
                return false;
            }
            // This type cast is a bit of a hacky one, necessary due to the duplicity of IResolverLike.
            // Problem is that that interface's type arg can be of type Key, but the getFactory method only works on
            // type Constructable. So the return type of that optional method has this additional constraint, which
            // seems to confuse the type checker.
            return factory.registerTransformer(transformer);
        }
        return false;
    }
    getResolver(key, autoRegister = true) {
        validateKey(key);
        if (key.resolve !== void 0) {
            return key;
        }
        let current = this;
        let resolver;
        while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver == null) {
                if (current.parent == null) {
                    const handler = this.config.jitRegisterInRoot ? current : this;
                    return autoRegister ? this.jitRegister(key, handler) : null;
                }
                current = current.parent;
            }
            else {
                return resolver;
            }
        }
        return null;
    }
    has(key, searchAncestors = false) {
        return this.resolvers.has(key)
            ? true
            : searchAncestors && this.parent != null
                ? this.parent.has(key, true)
                : false;
    }
    get(key) {
        validateKey(key);
        if (key.$isResolver) {
            return key.resolve(this, this);
        }
        let current = this;
        let resolver;
        while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver == null) {
                if (current.parent == null) {
                    const handler = this.config.jitRegisterInRoot ? current : this;
                    resolver = this.jitRegister(key, handler);
                    return resolver.resolve(current, this);
                }
                current = current.parent;
            }
            else {
                return resolver.resolve(current, this);
            }
        }
        throw new Error(`Unable to resolve key: ${key}`);
    }
    getAll(key) {
        validateKey(key);
        let current = this;
        let resolver;
        while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver == null) {
                if (this.parent == null) {
                    return PLATFORM.emptyArray;
                }
                current = current.parent;
            }
            else {
                return buildAllResponse(resolver, current, this);
            }
        }
        return PLATFORM.emptyArray;
    }
    getFactory(Type) {
        const key = Protocol.annotation.keyFor('di:factory');
        let factory = Metadata.getOwn(key, Type);
        if (factory === void 0) {
            Metadata.define(key, factory = createFactory(Type), Type);
            Protocol.annotation.appendTo(Type, key);
        }
        return factory;
    }
    createChild(config) {
        return new Container(this, config !== null && config !== void 0 ? config : this.config);
    }
    disposeResolvers() {
        var _a;
        const disposables = Array.from(this.disposableResolvers);
        while (disposables.length > 0) {
            (_a = disposables.pop()) === null || _a === void 0 ? void 0 : _a.dispose();
        }
    }
    jitRegister(keyAsValue, handler) {
        if (typeof keyAsValue !== 'function') {
            throw new Error(`Attempted to jitRegister something that is not a constructor: '${keyAsValue}'. Did you forget to register this resource?`);
        }
        if (InstrinsicTypeNames.has(keyAsValue.name)) {
            throw new Error(`Attempted to jitRegister an intrinsic type: ${keyAsValue.name}. Did you forget to add @inject(Key)`);
        }
        if (isRegistry(keyAsValue)) {
            const registrationResolver = keyAsValue.register(handler, keyAsValue);
            if (!(registrationResolver instanceof Object) || registrationResolver.resolve == null) {
                const newResolver = handler.resolvers.get(keyAsValue);
                if (newResolver != void 0) {
                    return newResolver;
                }
                throw Reporter.error(40); // did not return a valid resolver from the static register method
            }
            return registrationResolver;
        }
        else if (Protocol.resource.has(keyAsValue)) {
            const defs = Protocol.resource.getAll(keyAsValue);
            if (defs.length === 1) {
                // Fast path for the very common case
                defs[0].register(handler);
            }
            else {
                const len = defs.length;
                for (let d = 0; d < len; ++d) {
                    defs[d].register(handler);
                }
            }
            const newResolver = handler.resolvers.get(keyAsValue);
            if (newResolver != void 0) {
                return newResolver;
            }
            throw Reporter.error(40); // did not return a valid resolver from the static register method
        }
        else if (keyAsValue.$isInterface) {
            throw new Error(`Attempted to jitRegister an interface: ${keyAsValue.friendlyName}`);
        }
        else {
            const resolver = this.config.defaultResolver(keyAsValue, handler);
            handler.resolvers.set(keyAsValue, resolver);
            return resolver;
        }
    }
}
/**
 * An implementation of IRegistry that delegates registration to a
 * separately registered class. The ParameterizedRegistry facilitates the
 * passing of parameters to the final registry.
 */
class ParameterizedRegistry {
    constructor(key, params) {
        this.key = key;
        this.params = params;
    }
    register(container) {
        if (container.has(this.key, true)) {
            const registry = container.get(this.key);
            registry.register(container, ...this.params);
        }
        else {
            container.register(...this.params.filter(x => typeof x === 'object'));
        }
    }
}
const cache = new WeakMap();
function cacheCallbackResult(fun) {
    return function (handler, requestor, resolver) {
        if (cache.has(resolver)) {
            return cache.get(resolver);
        }
        const t = fun(handler, requestor, resolver);
        cache.set(resolver, t);
        return t;
    };
}
/**
 * you can use the resulting {@linkcode IRegistration} of any of the factory methods
 * to register with the container, e.g.
 * ```
 * class Foo {}
 * const container = DI.createContainer();
 * container.register(Registration.instance(Foo, new Foo()));
 * container.get(Foo);
 * ```
 */
const Registration = {
    /**
     * allows you to pass an instance.
     * Every time you request this {@linkcode Key} you will get this instance back.
     * ```
     * Registration.instance(Foo, new Foo()));
     * ```
     *
     * @param key
     * @param value
     */
    instance(key, value) {
        return new Resolver(key, 0 /* instance */, value);
    },
    /**
     * Creates an instance from the class.
     * Every time you request this {@linkcode Key} you will get the same one back.
     * ```
     * Registration.singleton(Foo, Foo);
     * ```
     *
     * @param key
     * @param value
     */
    singleton(key, value) {
        return new Resolver(key, 1 /* singleton */, value);
    },
    /**
     * Creates an instance from a class.
     * Every time you request this {@linkcode Key} you will get a new instance.
     * ```
     * Registration.instance(Foo, Foo);
     * ```
     *
     * @param key
     * @param value
     */
    transient(key, value) {
        return new Resolver(key, 2 /* transient */, value);
    },
    /**
     * Creates an instance from the method passed.
     * Every time you request this {@linkcode Key} you will get a new instance.
     * ```
     * Registration.callback(Foo, () => new Foo());
     * Registration.callback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key
     * @param callback
     */
    callback(key, callback) {
        return new Resolver(key, 3 /* callback */, callback);
    },
    /**
     * Creates an instance from the method passed.
     * On the first request for the {@linkcode Key} your callback is called and returns an instance.
     * subsequent requests for the {@linkcode Key}, the initial instance returned will be returned.
     * If you pass the same {@linkcode Registration} to another container the same cached value will be used.
     * Should all references to the resolver returned be removed, the cache will expire.
     * ```
     * Registration.cachedCallback(Foo, () => new Foo());
     * Registration.cachedCallback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key
     * @param callback
     */
    cachedCallback(key, callback) {
        return new Resolver(key, 3 /* callback */, cacheCallbackResult(callback));
    },
    /**
     * creates an alternate {@linkcode Key} to retrieve an instance by.
     * Returns the same scope as the original {@linkcode Key}.
     * ```
     * Register.singleton(Foo, Foo)
     * Register.aliasTo(Foo, MyFoos);
     *
     * container.getAll(MyFoos) // contains an instance of Foo
     * ```
     *
     * @param originalKey
     * @param aliasKey
     */
    aliasTo(originalKey, aliasKey) {
        return new Resolver(aliasKey, 5 /* alias */, originalKey);
    },
    /**
     * @internal
     * @param key
     * @param params
     */
    defer(key, ...params) {
        return new ParameterizedRegistry(key, params);
    }
};
class InstanceProvider {
    constructor() {
        this.instance = null;
    }
    prepare(instance) {
        this.instance = instance;
    }
    get $isResolver() { return true; }
    resolve() {
        if (this.instance === undefined) { // unmet precondition: call prepare
            throw Reporter.error(50); // TODO: organize error codes
        }
        return this.instance;
    }
    dispose() {
        this.instance = null;
    }
}
/** @internal */
function validateKey(key) {
    if (key === null || key === void 0) {
        throw Reporter.error(5);
    }
}
function buildAllResponse(resolver, handler, requestor) {
    if (resolver instanceof Resolver && resolver.strategy === 4 /* array */) {
        const state = resolver.state;
        let i = state.length;
        const results = new Array(i);
        while (i--) {
            results[i] = state[i].resolve(handler, requestor);
        }
        return results;
    }
    return [resolver.resolve(handler, requestor)];
}

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/**
 * Flags to enable/disable color usage in the logging output.
 */
var ColorOptions;
(function (ColorOptions) {
    /**
     * Do not use ASCII color codes in logging output.
     */
    ColorOptions[ColorOptions["noColors"] = 0] = "noColors";
    /**
     * Use ASCII color codes in logging output. By default, timestamps and the TRC and DBG prefix are colored grey. INF white, WRN yellow, and ERR and FTL red.
     */
    ColorOptions[ColorOptions["colors"] = 1] = "colors";
})(ColorOptions || (ColorOptions = {}));
const ILogConfig = DI.createInterface('ILogConfig').withDefault(x => x.instance(new LogConfig(0 /* noColors */, 3 /* warn */)));
const ISink = DI.createInterface('ISink').noDefault();
const ILogEventFactory = DI.createInterface('ILogEventFactory').withDefault(x => x.singleton(DefaultLogEventFactory));
const ILogger = DI.createInterface('ILogger').withDefault(x => x.singleton(DefaultLogger));
const ILogScopes = DI.createInterface('ILogScope').noDefault();
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
const format = toLookup({
    red(str) {
        return `\u001b[31m${str}\u001b[39m`;
    },
    green(str) {
        return `\u001b[32m${str}\u001b[39m`;
    },
    yellow(str) {
        return `\u001b[33m${str}\u001b[39m`;
    },
    blue(str) {
        return `\u001b[34m${str}\u001b[39m`;
    },
    magenta(str) {
        return `\u001b[35m${str}\u001b[39m`;
    },
    cyan(str) {
        return `\u001b[36m${str}\u001b[39m`;
    },
    white(str) {
        return `\u001b[37m${str}\u001b[39m`;
    },
    grey(str) {
        return `\u001b[90m${str}\u001b[39m`;
    },
});
class LogConfig {
    constructor(colorOptions, level) {
        this.colorOptions = colorOptions;
        this.level = level;
    }
}
const getLogLevelString = (function () {
    const logLevelString = [
        toLookup({
            TRC: 'TRC',
            DBG: 'DBG',
            INF: 'INF',
            WRN: 'WRN',
            ERR: 'ERR',
            FTL: 'FTL',
            QQQ: '???',
        }),
        toLookup({
            TRC: format.grey('TRC'),
            DBG: format.grey('DBG'),
            INF: format.white('INF'),
            WRN: format.yellow('WRN'),
            ERR: format.red('ERR'),
            FTL: format.red('FTL'),
            QQQ: format.grey('???'),
        }),
    ];
    return function (level, colorOptions) {
        if (level <= 0 /* trace */) {
            return logLevelString[colorOptions].TRC;
        }
        if (level <= 1 /* debug */) {
            return logLevelString[colorOptions].DBG;
        }
        if (level <= 2 /* info */) {
            return logLevelString[colorOptions].INF;
        }
        if (level <= 3 /* warn */) {
            return logLevelString[colorOptions].WRN;
        }
        if (level <= 4 /* error */) {
            return logLevelString[colorOptions].ERR;
        }
        if (level <= 5 /* fatal */) {
            return logLevelString[colorOptions].FTL;
        }
        return logLevelString[colorOptions].QQQ;
    };
})();
function getScopeString(scope, colorOptions) {
    if (colorOptions === 0 /* noColors */) {
        return scope.join('.');
    }
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return scope.map(format.cyan).join('.');
}
function getIsoString(timestamp, colorOptions) {
    if (colorOptions === 0 /* noColors */) {
        return new Date(timestamp).toISOString();
    }
    return format.grey(new Date(timestamp).toISOString());
}
class DefaultLogEvent {
    constructor(severity, message, optionalParams, scope, colorOptions, timestamp) {
        this.severity = severity;
        this.message = message;
        this.optionalParams = optionalParams;
        this.scope = scope;
        this.colorOptions = colorOptions;
        this.timestamp = timestamp;
    }
    toString() {
        const { severity, message, scope, colorOptions, timestamp } = this;
        if (scope.length === 0) {
            return `${getIsoString(timestamp, colorOptions)} [${getLogLevelString(severity, colorOptions)}] ${message}`;
        }
        return `${getIsoString(timestamp, colorOptions)} [${getLogLevelString(severity, colorOptions)} ${getScopeString(scope, colorOptions)}] ${message}`;
    }
}
let DefaultLogEventFactory = class DefaultLogEventFactory {
    constructor(config) {
        this.config = config;
    }
    createLogEvent(logger, level, message, optionalParams) {
        return new DefaultLogEvent(level, message, optionalParams, logger.scope, this.config.colorOptions, Date.now());
    }
};
DefaultLogEventFactory = __decorate([
    __param(0, ILogConfig),
    __metadata("design:paramtypes", [Object])
], DefaultLogEventFactory);
class ConsoleSink {
    constructor($console) {
        this.emit = function emit(event) {
            const optionalParams = event.optionalParams;
            if (optionalParams === void 0 || optionalParams.length === 0) {
                switch (event.severity) {
                    case 0 /* trace */:
                    case 1 /* debug */:
                        return $console.debug(event.toString());
                    case 2 /* info */:
                        return $console.info(event.toString());
                    case 3 /* warn */:
                        return $console.warn(event.toString());
                    case 4 /* error */:
                    case 5 /* fatal */:
                        return $console.error(event.toString());
                }
            }
            else {
                switch (event.severity) {
                    case 0 /* trace */:
                    case 1 /* debug */:
                        return $console.debug(event.toString(), ...optionalParams);
                    case 2 /* info */:
                        return $console.info(event.toString(), ...optionalParams);
                    case 3 /* warn */:
                        return $console.warn(event.toString(), ...optionalParams);
                    case 4 /* error */:
                    case 5 /* fatal */:
                        return $console.error(event.toString(), ...optionalParams);
                }
            }
        };
    }
}
let DefaultLogger = class DefaultLogger {
    constructor(config, factory, sinks, scope = [], parent = null) {
        this.config = config;
        this.factory = factory;
        this.sinks = sinks;
        this.scope = scope;
        this.scopedLoggers = Object.create(null);
        if (parent === null) {
            this.root = this;
            this.parent = this;
        }
        else {
            this.root = parent.root;
            this.parent = parent;
        }
        const sinksLen = sinks.length;
        let i = 0;
        const emit = (level, msgOrGetMsg, optionalParams) => {
            const message = typeof msgOrGetMsg === 'function' ? msgOrGetMsg() : msgOrGetMsg;
            const event = factory.createLogEvent(this, level, message, optionalParams);
            for (i = 0; i < sinksLen; ++i) {
                sinks[i].emit(event);
            }
        };
        this.trace = function trace(messageOrGetMessage, ...optionalParams) {
            if (config.level <= 0 /* trace */) {
                emit(0 /* trace */, messageOrGetMessage, optionalParams);
            }
        };
        this.debug = function debug(messageOrGetMessage, ...optionalParams) {
            if (config.level <= 1 /* debug */) {
                emit(1 /* debug */, messageOrGetMessage, optionalParams);
            }
        };
        this.info = function info(messageOrGetMessage, ...optionalParams) {
            if (config.level <= 2 /* info */) {
                emit(2 /* info */, messageOrGetMessage, optionalParams);
            }
        };
        this.warn = function warn(messageOrGetMessage, ...optionalParams) {
            if (config.level <= 3 /* warn */) {
                emit(3 /* warn */, messageOrGetMessage, optionalParams);
            }
        };
        this.error = function error(messageOrGetMessage, ...optionalParams) {
            if (config.level <= 4 /* error */) {
                emit(4 /* error */, messageOrGetMessage, optionalParams);
            }
        };
        this.fatal = function fatal(messageOrGetMessage, ...optionalParams) {
            if (config.level <= 5 /* fatal */) {
                emit(5 /* fatal */, messageOrGetMessage, optionalParams);
            }
        };
    }
    scopeTo(name) {
        const scopedLoggers = this.scopedLoggers;
        let scopedLogger = scopedLoggers[name];
        if (scopedLogger === void 0) {
            scopedLogger = scopedLoggers[name] = new DefaultLogger(this.config, this.factory, this.sinks, this.scope.concat(name), this);
        }
        return scopedLogger;
    }
};
DefaultLogger = __decorate([
    __param(0, ILogConfig),
    __param(1, ILogEventFactory),
    __param(2, all(ISink)),
    __param(3, optional(ILogScopes)),
    __param(4, ignore),
    __metadata("design:paramtypes", [Object, Object, Array, Array, Object])
], DefaultLogger);
/**
 * A basic `ILogger` configuration that configures a single `console` sink based on provided options.
 *
 * NOTE: You *must* register the return value of `.create` with the container / au instance, not this `LoggerConfiguration` object itself.
 *
 * ```ts
 * // GOOD
 * container.register(LoggerConfiguration.create(console))
 * // GOOD
 * container.register(LoggerConfiguration.create(console, LogLevel.debug))
 * // GOOD
 * container.register(LoggerConfiguration.create({
 *   debug: PLATFORM.noop,
 *   info: PLATFORM.noop,
 *   warn: PLATFORM.noop,
 *   error: msg => {
 *     throw new Error(msg);
 *   }
 * }, LogLevel.debug))
 *
 * // BAD
 * container.register(LoggerConfiguration)
 * ```
 */
const LoggerConfiguration = toLookup({
    /**
     * @param $console - The `console` object to use. Can be the native `window.console` / `global.console`, but can also be a wrapper or mock that implements the same interface.
     * @param level - The global `LogLevel` to configure. Defaults to `warn` or higher.
     * @param colorOptions - Whether to use colors or not. Defaults to `noColors`. Colors are especially nice in nodejs environments but don't necessarily work (well) in all environments, such as browsers.
     */
    create($console, level = 3 /* warn */, colorOptions = 0 /* noColors */) {
        return toLookup({
            register(container) {
                return container.register(Registration.instance(ILogConfig, new LogConfig(colorOptions, level)), Registration.instance(ISink, new ConsoleSink($console)));
            },
        });
    },
});

const Profiler = (function () {
    const now = PLATFORM.now;
    const timers = [];
    let profileMap;
    const profiler = {
        createTimer,
        enable,
        disable,
        report,
        enabled: false
    };
    return profiler;
    function createTimer(name) {
        timers.push(name);
        let depth = 0;
        let mark = 0;
        return {
            enter,
            leave
        };
        function enter() {
            if (++depth === 1) {
                mark = now();
                ++profileMap[name].topLevelCount;
            }
            ++profileMap[name].totalCount;
        }
        function leave() {
            if (--depth === 0) {
                profileMap[name].duration += (now() - mark);
            }
        }
    }
    function enable() {
        profileMap = {};
        for (const timer of timers) {
            profileMap[timer] = {
                name: timer,
                duration: 0,
                topLevelCount: 0,
                totalCount: 0
            };
        }
        profiler.enabled = true;
    }
    function disable() {
        profiler.enabled = false;
    }
    function report(cb) {
        Object.keys(profileMap).map(key => profileMap[key]).sort((a, b) => b.duration - a.duration).forEach(p => {
            cb(p.name, p.duration, p.topLevelCount, p.totalCount);
        });
    }
})();

/**
 * Represents a handler for an EventAggregator event.
 */
class Handler {
    constructor(
    /** @internal */
    messageType, 
    /** @internal */
    callback) {
        this.messageType = messageType;
        this.callback = callback;
    }
    handle(message) {
        if (message instanceof this.messageType) {
            this.callback.call(null, message);
        }
    }
}
function invokeCallback(callback, data, event) {
    try {
        callback(data, event);
    }
    catch (e) {
        Reporter.error(0, e); // TODO: create error code
    }
}
function invokeHandler(handler, data) {
    try {
        handler.handle(data);
    }
    catch (e) {
        Reporter.error(0, e); // TODO: create error code
    }
}
const IEventAggregator = DI.createInterface('IEventAggregator').withDefault(x => x.singleton(EventAggregator));
/**
 * Enables loosely coupled publish/subscribe messaging.
 */
class EventAggregator {
    constructor() {
        /** @internal */
        this.eventLookup = {};
        /** @internal */
        this.messageHandlers = [];
    }
    publish(channelOrInstance, data) {
        let subscribers;
        let i;
        if (!channelOrInstance) {
            throw Reporter.error(0); // TODO: create error code for 'Event was invalid.'
        }
        if (typeof channelOrInstance === 'string') {
            const channel = channelOrInstance;
            subscribers = this.eventLookup[channel];
            if (subscribers != null) {
                subscribers = subscribers.slice();
                i = subscribers.length;
                while (i--) {
                    invokeCallback(subscribers[i], data, channel);
                }
            }
        }
        else {
            const instance = channelOrInstance;
            subscribers = this.messageHandlers.slice();
            i = subscribers.length;
            while (i--) {
                invokeHandler(subscribers[i], instance);
            }
        }
    }
    subscribe(channelOrType, callback) {
        let handler;
        let subscribers;
        if (!channelOrType) {
            throw Reporter.error(0); // TODO: create error code for 'Event channel/type was invalid.'
        }
        if (typeof channelOrType === 'string') {
            const channel = channelOrType;
            handler = callback;
            if (this.eventLookup[channel] === void 0) {
                this.eventLookup[channel] = [];
            }
            subscribers = this.eventLookup[channel];
        }
        else {
            handler = new Handler(channelOrType, callback);
            subscribers = this.messageHandlers;
        }
        subscribers.push(handler);
        return {
            dispose() {
                const idx = subscribers.indexOf(handler);
                if (idx !== -1) {
                    subscribers.splice(idx, 1);
                }
            }
        };
    }
    subscribeOnce(channelOrType, callback) {
        const sub = this.subscribe(channelOrType, (data, event) => {
            sub.dispose();
            return callback(data, event);
        });
        return sub;
    }
}

// TODO: see if we can de-duplicate these 3 decorators and their functions without killing performance or readability
function subscriberCollection() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        const proto = target.prototype;
        proto._subscriberFlags = 0 /* None */;
        proto.addSubscriber = addSubscriber;
        proto.removeSubscriber = removeSubscriber;
        proto.hasSubscriber = hasSubscriber;
        proto.hasSubscribers = hasSubscribers;
        proto.callSubscribers = callSubscribers;
        if (proto.subscribe === void 0)
            proto.subscribe = addSubscriber;
        if (proto.unsubscribe === void 0)
            proto.unsubscribe = removeSubscriber;
    };
}
function proxySubscriberCollection() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        const proto = target.prototype;
        proto._proxySubscriberFlags = 0 /* None */;
        proto.addProxySubscriber = addProxySubscriber;
        proto.removeProxySubscriber = removeProxySubscriber;
        proto.hasProxySubscriber = hasProxySubscriber;
        proto.hasProxySubscribers = hasProxySubscribers;
        proto.callProxySubscribers = callProxySubscribers;
        if (proto.subscribeToProxy === void 0)
            proto.subscribeToProxy = addProxySubscriber;
        if (proto.unsubscribeFromProxy === void 0)
            proto.unsubscribeFromProxy = removeProxySubscriber;
    };
}
function collectionSubscriberCollection() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        const proto = target.prototype;
        proto._collectionSubscriberFlags = 0 /* None */;
        proto.addCollectionSubscriber = addCollectionSubscriber;
        proto.removeCollectionSubscriber = removeCollectionSubscriber;
        proto.hasCollectionSubscriber = hasCollectionSubscriber;
        proto.hasCollectionSubscribers = hasCollectionSubscribers;
        proto.callCollectionSubscribers = callCollectionSubscribers;
        if (proto.subscribeToCollection === void 0)
            proto.subscribeToCollection = addCollectionSubscriber;
        if (proto.unsubscribeFromCollection === void 0)
            proto.unsubscribeFromCollection = removeCollectionSubscriber;
    };
}
function addSubscriber(subscriber) {
    if (this.hasSubscriber(subscriber)) {
        return false;
    }
    const subscriberFlags = this._subscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) === 0) {
        this._subscriber0 = subscriber;
        this._subscriberFlags |= 1 /* Subscriber0 */;
    }
    else if ((subscriberFlags & 2 /* Subscriber1 */) === 0) {
        this._subscriber1 = subscriber;
        this._subscriberFlags |= 2 /* Subscriber1 */;
    }
    else if ((subscriberFlags & 4 /* Subscriber2 */) === 0) {
        this._subscriber2 = subscriber;
        this._subscriberFlags |= 4 /* Subscriber2 */;
    }
    else if ((subscriberFlags & 8 /* SubscribersRest */) === 0) {
        this._subscribersRest = [subscriber];
        this._subscriberFlags |= 8 /* SubscribersRest */;
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this._subscribersRest.push(subscriber); // Non-null is implied by else branch of (subscriberFlags & SF.SubscribersRest) === 0
    }
    return true;
}
function addProxySubscriber(subscriber) {
    if (this.hasProxySubscriber(subscriber)) {
        return false;
    }
    const subscriberFlags = this._proxySubscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) === 0) {
        this._proxySubscriber0 = subscriber;
        this._proxySubscriberFlags |= 1 /* Subscriber0 */;
    }
    else if ((subscriberFlags & 2 /* Subscriber1 */) === 0) {
        this._proxySubscriber1 = subscriber;
        this._proxySubscriberFlags |= 2 /* Subscriber1 */;
    }
    else if ((subscriberFlags & 4 /* Subscriber2 */) === 0) {
        this._proxySubscriber2 = subscriber;
        this._proxySubscriberFlags |= 4 /* Subscriber2 */;
    }
    else if ((subscriberFlags & 8 /* SubscribersRest */) === 0) {
        this._proxySubscribersRest = [subscriber];
        this._proxySubscriberFlags |= 8 /* SubscribersRest */;
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this._proxySubscribersRest.push(subscriber); // Non-null is implied by else branch of (subscriberFlags & SF.SubscribersRest) === 0
    }
    return true;
}
function addCollectionSubscriber(subscriber) {
    if (this.hasCollectionSubscriber(subscriber)) {
        return false;
    }
    const subscriberFlags = this._collectionSubscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) === 0) {
        this._collectionSubscriber0 = subscriber;
        this._collectionSubscriberFlags |= 1 /* Subscriber0 */;
    }
    else if ((subscriberFlags & 2 /* Subscriber1 */) === 0) {
        this._collectionSubscriber1 = subscriber;
        this._collectionSubscriberFlags |= 2 /* Subscriber1 */;
    }
    else if ((subscriberFlags & 4 /* Subscriber2 */) === 0) {
        this._collectionSubscriber2 = subscriber;
        this._collectionSubscriberFlags |= 4 /* Subscriber2 */;
    }
    else if ((subscriberFlags & 8 /* SubscribersRest */) === 0) {
        this._collectionSubscribersRest = [subscriber];
        this._collectionSubscriberFlags |= 8 /* SubscribersRest */;
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this._collectionSubscribersRest.push(subscriber); // Non-null is implied by else branch of (subscriberFlags & SF.SubscribersRest) === 0
    }
    return true;
}
function removeSubscriber(subscriber) {
    const subscriberFlags = this._subscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._subscriber0 === subscriber) {
        this._subscriber0 = void 0;
        this._subscriberFlags = (this._subscriberFlags | 1 /* Subscriber0 */) ^ 1 /* Subscriber0 */;
        return true;
    }
    else if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._subscriber1 === subscriber) {
        this._subscriber1 = void 0;
        this._subscriberFlags = (this._subscriberFlags | 2 /* Subscriber1 */) ^ 2 /* Subscriber1 */;
        return true;
    }
    else if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._subscriber2 === subscriber) {
        this._subscriber2 = void 0;
        this._subscriberFlags = (this._subscriberFlags | 4 /* Subscriber2 */) ^ 4 /* Subscriber2 */;
        return true;
    }
    else if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const subscribers = this._subscribersRest; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
        for (let i = 0, ii = subscribers.length; i < ii; ++i) {
            if (subscribers[i] === subscriber) {
                subscribers.splice(i, 1);
                if (ii === 1) {
                    this._subscriberFlags = (this._subscriberFlags | 8 /* SubscribersRest */) ^ 8 /* SubscribersRest */;
                }
                return true;
            }
        }
    }
    return false;
}
function removeProxySubscriber(subscriber) {
    const subscriberFlags = this._proxySubscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._proxySubscriber0 === subscriber) {
        this._proxySubscriber0 = void 0;
        this._proxySubscriberFlags = (this._proxySubscriberFlags | 1 /* Subscriber0 */) ^ 1 /* Subscriber0 */;
        return true;
    }
    else if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._proxySubscriber1 === subscriber) {
        this._proxySubscriber1 = void 0;
        this._proxySubscriberFlags = (this._proxySubscriberFlags | 2 /* Subscriber1 */) ^ 2 /* Subscriber1 */;
        return true;
    }
    else if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._proxySubscriber2 === subscriber) {
        this._proxySubscriber2 = void 0;
        this._proxySubscriberFlags = (this._proxySubscriberFlags | 4 /* Subscriber2 */) ^ 4 /* Subscriber2 */;
        return true;
    }
    else if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const subscribers = this._proxySubscribersRest; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
        for (let i = 0, ii = subscribers.length; i < ii; ++i) {
            if (subscribers[i] === subscriber) {
                subscribers.splice(i, 1);
                if (ii === 1) {
                    this._proxySubscriberFlags = (this._proxySubscriberFlags | 8 /* SubscribersRest */) ^ 8 /* SubscribersRest */;
                }
                return true;
            }
        }
    }
    return false;
}
function removeCollectionSubscriber(subscriber) {
    const subscriberFlags = this._collectionSubscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._collectionSubscriber0 === subscriber) {
        this._collectionSubscriber0 = void 0;
        this._collectionSubscriberFlags = (this._collectionSubscriberFlags | 1 /* Subscriber0 */) ^ 1 /* Subscriber0 */;
        return true;
    }
    else if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._collectionSubscriber1 === subscriber) {
        this._collectionSubscriber1 = void 0;
        this._collectionSubscriberFlags = (this._collectionSubscriberFlags | 2 /* Subscriber1 */) ^ 2 /* Subscriber1 */;
        return true;
    }
    else if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._collectionSubscriber2 === subscriber) {
        this._collectionSubscriber2 = void 0;
        this._collectionSubscriberFlags = (this._collectionSubscriberFlags | 4 /* Subscriber2 */) ^ 4 /* Subscriber2 */;
        return true;
    }
    else if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const subscribers = this._collectionSubscribersRest; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
        for (let i = 0, ii = subscribers.length; i < ii; ++i) {
            if (subscribers[i] === subscriber) {
                subscribers.splice(i, 1);
                if (ii === 1) {
                    this._collectionSubscriberFlags = (this._collectionSubscriberFlags | 8 /* SubscribersRest */) ^ 8 /* SubscribersRest */;
                }
                return true;
            }
        }
    }
    return false;
}
function hasSubscribers() {
    return this._subscriberFlags !== 0 /* None */;
}
function hasProxySubscribers() {
    return this._proxySubscriberFlags !== 0 /* None */;
}
function hasCollectionSubscribers() {
    return this._collectionSubscriberFlags !== 0 /* None */;
}
function hasSubscriber(subscriber) {
    // Flags here is just a perf tweak
    // Compared to not using flags, it's a moderate speed-up when this collection does not have the subscriber;
    // and minor slow-down when it does, and the former is more common than the latter.
    const subscriberFlags = this._subscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._subscriber0 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._subscriber1 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._subscriber2 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const subscribers = this._subscribersRest; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
        for (let i = 0, ii = subscribers.length; i < ii; ++i) {
            if (subscribers[i] === subscriber) {
                return true;
            }
        }
    }
    return false;
}
function hasProxySubscriber(subscriber) {
    const subscriberFlags = this._proxySubscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._proxySubscriber0 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._proxySubscriber1 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._proxySubscriber2 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const subscribers = this._proxySubscribersRest; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
        for (let i = 0, ii = subscribers.length; i < ii; ++i) {
            if (subscribers[i] === subscriber) {
                return true;
            }
        }
    }
    return false;
}
function hasCollectionSubscriber(subscriber) {
    const subscriberFlags = this._collectionSubscriberFlags;
    if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._collectionSubscriber0 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._collectionSubscriber1 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._collectionSubscriber2 === subscriber) {
        return true;
    }
    if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const subscribers = this._collectionSubscribersRest; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
        for (let i = 0, ii = subscribers.length; i < ii; ++i) {
            if (subscribers[i] === subscriber) {
                return true;
            }
        }
    }
    return false;
}
function callSubscribers(newValue, previousValue, flags) {
    /**
     * Note: change handlers may have the side-effect of adding/removing subscribers to this collection during this
     * callSubscribers invocation, so we're caching them all before invoking any.
     * Subscribers added during this invocation are not invoked (and they shouldn't be).
     * Subscribers removed during this invocation will still be invoked (and they also shouldn't be,
     * however this is accounted for via $isBound and similar flags on the subscriber objects)
     */
    const subscriber0 = this._subscriber0;
    const subscriber1 = this._subscriber1;
    const subscriber2 = this._subscriber2;
    let subscribers = this._subscribersRest;
    if (subscribers !== void 0) {
        subscribers = subscribers.slice();
    }
    if (subscriber0 !== void 0) {
        callSubscriber(subscriber0, newValue, previousValue, flags, subscriber0.id === void 0 ? 0 : this[subscriber0.id]);
    }
    if (subscriber1 !== void 0) {
        callSubscriber(subscriber1, newValue, previousValue, flags, subscriber1.id === void 0 ? 0 : this[subscriber1.id]);
    }
    if (subscriber2 !== void 0) {
        callSubscriber(subscriber2, newValue, previousValue, flags, subscriber2.id === void 0 ? 0 : this[subscriber2.id]);
    }
    if (subscribers !== void 0) {
        const { length } = subscribers;
        let subscriber;
        for (let i = 0; i < length; ++i) {
            subscriber = subscribers[i];
            if (subscriber !== void 0) {
                callSubscriber(subscriber, newValue, previousValue, flags, subscriber.id === void 0 ? 0 : this[subscriber.id]);
            }
        }
    }
}
function callSubscriber(subscriber, newValue, previousValue, flags, ownFlags) {
    subscriber.handleChange(newValue, previousValue, ((flags | 48 /* update */) ^ 48 /* update */) | ownFlags);
}
function callProxySubscribers(key, newValue, previousValue, flags) {
    const subscriber0 = this._proxySubscriber0;
    const subscriber1 = this._proxySubscriber1;
    const subscriber2 = this._proxySubscriber2;
    let subscribers = this._proxySubscribersRest;
    if (subscribers !== void 0) {
        subscribers = subscribers.slice();
    }
    if (subscriber0 !== void 0) {
        subscriber0.handleProxyChange(key, newValue, previousValue, flags);
    }
    if (subscriber1 !== void 0) {
        subscriber1.handleProxyChange(key, newValue, previousValue, flags);
    }
    if (subscriber2 !== void 0) {
        subscriber2.handleProxyChange(key, newValue, previousValue, flags);
    }
    if (subscribers !== void 0) {
        const { length } = subscribers;
        let subscriber;
        for (let i = 0; i < length; ++i) {
            subscriber = subscribers[i];
            if (subscriber !== void 0) {
                subscriber.handleProxyChange(key, newValue, previousValue, flags);
            }
        }
    }
}
function callCollectionSubscribers(indexMap, flags) {
    const subscriber0 = this._collectionSubscriber0;
    const subscriber1 = this._collectionSubscriber1;
    const subscriber2 = this._collectionSubscriber2;
    let subscribers = this._collectionSubscribersRest;
    if (subscribers !== void 0) {
        subscribers = subscribers.slice();
    }
    if (subscriber0 !== void 0) {
        subscriber0.handleCollectionChange(indexMap, flags);
    }
    if (subscriber1 !== void 0) {
        subscriber1.handleCollectionChange(indexMap, flags);
    }
    if (subscriber2 !== void 0) {
        subscriber2.handleCollectionChange(indexMap, flags);
    }
    if (subscribers !== void 0) {
        const { length } = subscribers;
        let subscriber;
        for (let i = 0; i < length; ++i) {
            subscriber = subscribers[i];
            if (subscriber !== void 0) {
                subscriber.handleCollectionChange(indexMap, flags);
            }
        }
    }
}

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ProxyObserver_1;
const lookup = new WeakMap();
let ProxySubscriberCollection = class ProxySubscriberCollection {
    constructor(proxy, raw, key) {
        this.proxy = proxy;
        this.raw = raw;
        this.key = key;
        this.inBatch = false;
        this.subscribe = this.addSubscriber;
        this.unsubscribe = this.removeSubscriber;
        if (raw[key] instanceof Object) { // Ensure we observe array indices and newly created object properties
            raw[key] = ProxyObserver.getOrCreate(raw[key]).proxy;
        }
    }
    setValue(value, flags) {
        const oldValue = this.raw[this.key];
        if (oldValue !== value) {
            this.raw[this.key] = value;
            this.callSubscribers(value, oldValue, flags | 2 /* proxyStrategy */ | 16 /* updateTargetInstance */);
        }
    }
    getValue() {
        return this.raw[this.key];
    }
    flushBatch(flags) {
        return;
    }
};
ProxySubscriberCollection = __decorate$1([
    subscriberCollection(),
    __metadata$1("design:paramtypes", [Object, Object, Object])
], ProxySubscriberCollection);
let ProxyObserver = ProxyObserver_1 = class ProxyObserver {
    constructor(obj) {
        this.raw = obj;
        this.proxy = new Proxy(obj, this);
        lookup.set(obj, this.proxy);
        this.subscribers = {};
    }
    static getProxyOrSelf(obj) {
        if (obj.$raw === void 0) {
            const proxy = lookup.get(obj);
            if (proxy === void 0) {
                return obj;
            }
            return proxy;
        }
        return obj;
    }
    static getRawIfProxy(obj) {
        const raw = obj.$raw;
        if (raw === void 0) {
            return obj;
        }
        return raw;
    }
    static getOrCreate(obj, key) {
        let proxyObserver;
        if (obj.$raw === void 0) {
            const proxy = lookup.get(obj);
            if (proxy === void 0) {
                proxyObserver = new ProxyObserver_1(obj);
            }
            else {
                proxyObserver = proxy.$observer;
            }
        }
        else {
            proxyObserver = obj.$observer;
        }
        if (key === void 0) {
            return proxyObserver;
        }
        let subscribers = proxyObserver.subscribers[key];
        if (subscribers === void 0) {
            const raw = this.getRawIfProxy(obj);
            const proxy = proxyObserver.proxy;
            subscribers = proxyObserver.subscribers[key] = new ProxySubscriberCollection(proxy, raw, key);
        }
        return subscribers;
    }
    static isProxy(obj) {
        return obj.$raw !== void 0;
    }
    get(target, p, receiver) {
        if (p === '$observer') {
            return this;
        }
        if (p === '$raw') {
            return target;
        }
        return target[p];
    }
    set(target, p, value, receiver) {
        const oldValue = target[p];
        if (oldValue !== value) {
            target[p] = value;
            this.callPropertySubscribers(value, oldValue, p);
            this.callProxySubscribers(p, value, oldValue, 2 /* proxyStrategy */ | 16 /* updateTargetInstance */);
        }
        return true;
    }
    deleteProperty(target, p) {
        const oldValue = target[p];
        if (Reflect.deleteProperty(target, p)) {
            if (oldValue !== void 0) {
                this.callPropertySubscribers(undefined, oldValue, p);
                this.callProxySubscribers(p, undefined, oldValue, 2 /* proxyStrategy */ | 16 /* updateTargetInstance */);
            }
            return true;
        }
        return false;
    }
    defineProperty(target, p, attributes) {
        const oldValue = target[p];
        if (Reflect.defineProperty(target, p, attributes)) {
            if (attributes.value !== oldValue) {
                this.callPropertySubscribers(attributes.value, oldValue, p);
                this.callProxySubscribers(p, attributes.value, oldValue, 2 /* proxyStrategy */ | 16 /* updateTargetInstance */);
            }
            return true;
        }
        return false;
    }
    apply(target, thisArg, argArray = PLATFORM.emptyArray) {
        // eslint-disable-next-line @typescript-eslint/ban-types
        return Reflect.apply(target, target, argArray); // Reflect API dictates this
    }
    subscribe(subscriber, key) {
        if (key === void 0) {
            this.addProxySubscriber(subscriber);
        }
        else {
            let subscribers = this.subscribers[key];
            if (subscribers === void 0) {
                subscribers = this.subscribers[key] = new ProxySubscriberCollection(this.proxy, this.raw, key);
            }
            subscribers.addSubscriber(subscriber);
        }
    }
    unsubscribe(subscriber, key) {
        if (key === void 0) {
            this.removeProxySubscriber(subscriber);
        }
        else {
            const subscribers = this.subscribers[key];
            if (subscribers !== undefined) {
                subscribers.removeSubscriber(subscriber);
            }
        }
    }
    callPropertySubscribers(newValue, oldValue, key) {
        const subscribers = this.subscribers[key];
        if (subscribers !== void 0) {
            subscribers.callSubscribers(newValue, oldValue, 2 /* proxyStrategy */ | 16 /* updateTargetInstance */);
        }
    }
};
ProxyObserver = ProxyObserver_1 = __decorate$1([
    proxySubscriberCollection(),
    __metadata$1("design:paramtypes", [Object])
], ProxyObserver);

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$1 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ViewModelKind;
(function (ViewModelKind) {
    ViewModelKind[ViewModelKind["customElement"] = 0] = "customElement";
    ViewModelKind[ViewModelKind["customAttribute"] = 1] = "customAttribute";
    ViewModelKind[ViewModelKind["synthetic"] = 2] = "synthetic";
})(ViewModelKind || (ViewModelKind = {}));
const IController = DI.createInterface('IController').noDefault();
/**
 * Describing characteristics of a mounting operation a controller will perform
 */
var MountStrategy;
(function (MountStrategy) {
    MountStrategy[MountStrategy["insertBefore"] = 1] = "insertBefore";
    MountStrategy[MountStrategy["append"] = 2] = "append";
})(MountStrategy || (MountStrategy = {}));
const IViewFactory = DI.createInterface('IViewFactory').noDefault();
const ILifecycle = DI.createInterface('ILifecycle').withDefault(x => x.singleton(Lifecycle));
let BoundQueue = class BoundQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.depth = 0;
        this.head = void 0;
        this.tail = void 0;
    }
    begin() {
        ++this.depth;
    }
    end(flags) {
        if (flags === void 0) {
            flags = 0 /* none */;
        }
        if (--this.depth === 0) {
            this.process(flags);
        }
    }
    inline(fn, flags) {
        this.begin();
        fn();
        this.end(flags);
    }
    add(controller) {
        if (this.head === void 0) {
            this.head = controller;
        }
        else {
            controller.prevBound = this.tail;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.tail.nextBound = controller; // implied by boundHead not being undefined
        }
        this.tail = controller;
    }
    remove(controller) {
        if (controller.prevBound !== void 0) {
            controller.prevBound.nextBound = controller.nextBound;
        }
        if (controller.nextBound !== void 0) {
            controller.nextBound.prevBound = controller.prevBound;
        }
        controller.prevBound = void 0;
        controller.nextBound = void 0;
        if (this.tail === controller) {
            this.tail = controller.prevBound;
        }
        if (this.head === controller) {
            this.head = controller.nextBound;
        }
    }
    process(flags) {
        while (this.head !== void 0) {
            let cur = this.head;
            this.head = this.tail = void 0;
            let next;
            do {
                cur.afterBind(flags);
                next = cur.nextBound;
                cur.nextBound = void 0;
                cur.prevBound = void 0;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                cur = next; // we're checking it for undefined the next line
            } while (cur !== void 0);
        }
    }
};
BoundQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], BoundQueue);
let UnboundQueue = class UnboundQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.depth = 0;
        this.head = void 0;
        this.tail = void 0;
    }
    begin() {
        ++this.depth;
    }
    end(flags) {
        if (flags === void 0) {
            flags = 0 /* none */;
        }
        if (--this.depth === 0) {
            this.process(flags);
        }
    }
    inline(fn, flags) {
        this.begin();
        fn();
        this.end(flags);
    }
    add(controller) {
        if (this.head === void 0) {
            this.head = controller;
        }
        else {
            controller.prevUnbound = this.tail;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.tail.nextUnbound = controller; // implied by unboundHead not being undefined
        }
        this.tail = controller;
    }
    remove(controller) {
        if (controller.prevUnbound !== void 0) {
            controller.prevUnbound.nextUnbound = controller.nextUnbound;
        }
        if (controller.nextUnbound !== void 0) {
            controller.nextUnbound.prevUnbound = controller.prevUnbound;
        }
        controller.prevUnbound = void 0;
        controller.nextUnbound = void 0;
        if (this.tail === controller) {
            this.tail = controller.prevUnbound;
        }
        if (this.head === controller) {
            this.head = controller.nextUnbound;
        }
    }
    process(flags) {
        while (this.head !== void 0) {
            let cur = this.head;
            this.head = this.tail = void 0;
            let next;
            do {
                cur.afterUnbind(flags);
                next = cur.nextUnbound;
                cur.nextUnbound = void 0;
                cur.prevUnbound = void 0;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                cur = next; // we're checking it for undefined the next line
            } while (cur !== void 0);
        }
    }
};
UnboundQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], UnboundQueue);
let AttachedQueue = class AttachedQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.depth = 0;
        this.head = void 0;
        this.tail = void 0;
    }
    begin() {
        ++this.depth;
    }
    end(flags) {
        if (flags === void 0) {
            flags = 0 /* none */;
        }
        if (--this.depth === 0) {
            // temporary, until everything else works and we're ready for integrating mount/unmount in the RAF queue
            this.lifecycle.mount.process(flags);
            this.process(flags);
        }
    }
    inline(fn, flags) {
        this.begin();
        fn();
        this.end(flags);
    }
    add(controller) {
        if (this.head === void 0) {
            this.head = controller;
        }
        else {
            controller.prevAttached = this.tail;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.tail.nextAttached = controller; // implied by attachedHead not being undefined
        }
        this.tail = controller;
    }
    remove(controller) {
        if (controller.prevAttached !== void 0) {
            controller.prevAttached.nextAttached = controller.nextAttached;
        }
        if (controller.nextAttached !== void 0) {
            controller.nextAttached.prevAttached = controller.prevAttached;
        }
        controller.prevAttached = void 0;
        controller.nextAttached = void 0;
        if (this.tail === controller) {
            this.tail = controller.prevAttached;
        }
        if (this.head === controller) {
            this.head = controller.nextAttached;
        }
    }
    process(flags) {
        while (this.head !== void 0) {
            let cur = this.head;
            this.head = this.tail = void 0;
            let next;
            do {
                cur.afterAttach(flags);
                next = cur.nextAttached;
                cur.nextAttached = void 0;
                cur.prevAttached = void 0;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                cur = next; // we're checking it for undefined the next line
            } while (cur !== void 0);
        }
    }
};
AttachedQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], AttachedQueue);
let DetachedQueue = class DetachedQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.depth = 0;
        this.head = void 0;
        this.tail = void 0;
    }
    begin() {
        ++this.depth;
    }
    end(flags) {
        if (flags === void 0) {
            flags = 0 /* none */;
        }
        if (--this.depth === 0) {
            // temporary, until everything else works and we're ready for integrating mount/unmount in the RAF queue
            this.lifecycle.unmount.process(flags);
            this.process(flags);
        }
    }
    inline(fn, flags) {
        this.begin();
        fn();
        this.end(flags);
    }
    add(controller) {
        if (this.head === void 0) {
            this.head = controller;
        }
        else {
            controller.prevDetached = this.tail;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.tail.nextDetached = controller; // implied by detachedHead not being undefined
        }
        this.tail = controller;
    }
    remove(controller) {
        if (controller.prevDetached !== void 0) {
            controller.prevDetached.nextDetached = controller.nextDetached;
        }
        if (controller.nextDetached !== void 0) {
            controller.nextDetached.prevDetached = controller.prevDetached;
        }
        controller.prevDetached = void 0;
        controller.nextDetached = void 0;
        if (this.tail === controller) {
            this.tail = controller.prevDetached;
        }
        if (this.head === controller) {
            this.head = controller.nextDetached;
        }
    }
    process(flags) {
        while (this.head !== void 0) {
            let cur = this.head;
            this.head = this.tail = void 0;
            let next;
            do {
                cur.afterDetach(flags);
                next = cur.nextDetached;
                cur.nextDetached = void 0;
                cur.prevDetached = void 0;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                cur = next; // we're checking it for undefined the next line
            } while (cur !== void 0);
        }
    }
};
DetachedQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], DetachedQueue);
let MountQueue = class MountQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.depth = 0;
        this.head = void 0;
        this.tail = void 0;
    }
    add(controller) {
        if (this.head === void 0) {
            this.head = controller;
        }
        else {
            controller.prevMount = this.tail;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.tail.nextMount = controller; // implied by mountHead not being undefined
        }
        this.tail = controller;
    }
    remove(controller) {
        if (controller.prevMount !== void 0) {
            controller.prevMount.nextMount = controller.nextMount;
        }
        if (controller.nextMount !== void 0) {
            controller.nextMount.prevMount = controller.prevMount;
        }
        controller.prevMount = void 0;
        controller.nextMount = void 0;
        if (this.tail === controller) {
            this.tail = controller.prevMount;
        }
        if (this.head === controller) {
            this.head = controller.nextMount;
        }
    }
    process(flags) {
        while (this.head !== void 0) {
            let cur = this.head;
            this.head = this.tail = void 0;
            let next;
            do {
                cur.mount(flags);
                next = cur.nextMount;
                cur.nextMount = void 0;
                cur.prevMount = void 0;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                cur = next; // we're checking it for undefined the next line
            } while (cur !== void 0);
        }
    }
};
MountQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], MountQueue);
let UnmountQueue = class UnmountQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.head = void 0;
        this.tail = void 0;
    }
    add(controller) {
        if (this.head === void 0) {
            this.head = controller;
        }
        else {
            controller.prevUnmount = this.tail;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.tail.nextUnmount = controller; // implied by unmountHead not being undefined
        }
        this.tail = controller;
    }
    remove(controller) {
        if (controller.prevUnmount !== void 0) {
            controller.prevUnmount.nextUnmount = controller.nextUnmount;
        }
        if (controller.nextUnmount !== void 0) {
            controller.nextUnmount.prevUnmount = controller.prevUnmount;
        }
        controller.prevUnmount = void 0;
        controller.nextUnmount = void 0;
        if (this.tail === controller) {
            this.tail = controller.prevUnmount;
        }
        if (this.head === controller) {
            this.head = controller.nextUnmount;
        }
    }
    process(flags) {
        while (this.head !== void 0) {
            let cur = this.head;
            this.head = this.tail = void 0;
            let next;
            do {
                cur.unmount(flags);
                next = cur.nextUnmount;
                cur.nextUnmount = void 0;
                cur.prevUnmount = void 0;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                cur = next; // we're checking it for undefined the next line
            } while (cur !== void 0);
        }
    }
};
UnmountQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], UnmountQueue);
let BatchQueue = class BatchQueue {
    constructor(lifecycle) {
        this.lifecycle = lifecycle;
        this.queue = [];
        this.depth = 0;
    }
    begin() {
        ++this.depth;
    }
    end(flags) {
        if (flags === void 0) {
            flags = 0 /* none */;
        }
        if (--this.depth === 0) {
            this.process(flags);
        }
    }
    inline(fn, flags) {
        this.begin();
        fn();
        this.end(flags);
    }
    add(requestor) {
        this.queue.push(requestor);
    }
    remove(requestor) {
        const index = this.queue.indexOf(requestor);
        if (index > -1) {
            this.queue.splice(index, 1);
        }
    }
    process(flags) {
        flags |= 512 /* fromBatch */;
        while (this.queue.length > 0) {
            const batch = this.queue.slice();
            this.queue = [];
            const { length } = batch;
            for (let i = 0; i < length; ++i) {
                batch[i].flushBatch(flags);
            }
        }
    }
};
BatchQueue = __decorate$2([
    __param$1(0, ILifecycle),
    __metadata$2("design:paramtypes", [Object])
], BatchQueue);
class Lifecycle {
    constructor() {
        this.batch = new BatchQueue(this);
        this.mount = new MountQueue(this);
        this.unmount = new UnmountQueue(this);
        this.afterBind = new BoundQueue(this);
        this.afterUnbind = new UnboundQueue(this);
        this.afterAttach = new AttachedQueue(this);
        this.afterDetach = new DetachedQueue(this);
    }
    static register(container) {
        return Registration.singleton(ILifecycle, this).register(container);
    }
}

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Observer for the mutation of object property value employing getter-setter strategy.
 * This is used for observing object properties that has no decorator.
 */
let SetterObserver = class SetterObserver {
    constructor(lifecycle, flags, obj, propertyKey) {
        this.lifecycle = lifecycle;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.inBatch = false;
        this.observing = false;
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        if (this.observing) {
            const currentValue = this.currentValue;
            this.currentValue = newValue;
            if (this.lifecycle.batch.depth === 0) {
                this.callSubscribers(newValue, currentValue, this.persistentFlags | flags);
            }
            else if (!this.inBatch) {
                this.inBatch = true;
                this.oldValue = currentValue;
                this.lifecycle.batch.add(this);
            }
        }
        else {
            // If subscribe() has been called, the target property descriptor is replaced by these getter/setter methods,
            // so calling obj[propertyKey] will actually return this.currentValue.
            // However, if subscribe() was not yet called (indicated by !this.observing), the target descriptor
            // is unmodified and we need to explicitly set the property value.
            // This will happen in one-time, to-view and two-way bindings during $bind, meaning that the $bind will not actually update the target value.
            // This wasn't visible in vCurrent due to connect-queue always doing a delayed update, so in many cases it didn't matter whether $bind updated the target or not.
            this.obj[this.propertyKey] = newValue;
        }
    }
    flushBatch(flags) {
        this.inBatch = false;
        const currentValue = this.currentValue;
        const oldValue = this.oldValue;
        this.oldValue = currentValue;
        this.callSubscribers(currentValue, oldValue, this.persistentFlags | flags);
    }
    subscribe(subscriber) {
        if (this.observing === false) {
            this.observing = true;
            this.currentValue = this.obj[this.propertyKey];
            if (!Reflect.defineProperty(this.obj, this.propertyKey, {
                enumerable: true,
                configurable: true,
                get: () => {
                    return this.getValue();
                },
                set: value => {
                    this.setValue(value, 0 /* none */);
                },
            })) {
                Reporter.write(1, this.propertyKey, this.obj);
            }
        }
        this.addSubscriber(subscriber);
    }
};
SetterObserver = __decorate$3([
    subscriberCollection(),
    __metadata$3("design:paramtypes", [Object, Number, Object, String])
], SetterObserver);

var RuntimeError;
(function (RuntimeError) {
    RuntimeError[RuntimeError["NilScope"] = 250] = "NilScope";
    RuntimeError[RuntimeError["NilOverrideContext"] = 252] = "NilOverrideContext";
    RuntimeError[RuntimeError["NilParentScope"] = 253] = "NilParentScope";
})(RuntimeError || (RuntimeError = {}));
const marker = Object.freeze({});
/** @internal */
class InternalObserversLookup {
    getOrCreate(lifecycle, flags, obj, key) {
        if (this[key] === void 0) {
            this[key] = new SetterObserver(lifecycle, flags, obj, key);
        }
        return this[key];
    }
}
class BindingContext {
    constructor(keyOrObj, value) {
        this.$synthetic = true;
        if (keyOrObj !== void 0) {
            if (value !== void 0) {
                // if value is defined then it's just a property and a value to initialize with
                this[keyOrObj] = value;
            }
            else {
                // can either be some random object or another bindingContext to clone from
                for (const prop in keyOrObj) {
                    if (Object.prototype.hasOwnProperty.call(keyOrObj, prop)) {
                        this[prop] = keyOrObj[prop];
                    }
                }
            }
        }
    }
    static create(flags, keyOrObj, value) {
        const bc = new BindingContext(keyOrObj, value);
        if (flags & 2 /* proxyStrategy */) {
            return ProxyObserver.getOrCreate(bc).proxy;
        }
        return bc;
    }
    static get(scope, name, ancestor, flags, part) {
        if (scope == null) {
            throw Reporter.error(250 /* NilScope */);
        }
        let overrideContext = scope.overrideContext;
        if (ancestor > 0) {
            // jump up the required number of ancestor contexts (eg $parent.$parent requires two jumps)
            while (ancestor > 0) {
                if (overrideContext.parentOverrideContext == null) {
                    return void 0;
                }
                ancestor--;
                overrideContext = overrideContext.parentOverrideContext;
            }
            return name in overrideContext ? overrideContext : overrideContext.bindingContext;
        }
        // traverse the context and it's ancestors, searching for a context that has the name.
        while (overrideContext && !(name in overrideContext) && !(overrideContext.bindingContext && name in overrideContext.bindingContext)) {
            overrideContext = overrideContext.parentOverrideContext;
        }
        if (overrideContext) {
            // we located a context with the property.  return it.
            return name in overrideContext ? overrideContext : overrideContext.bindingContext;
        }
        // the name wasn't found. see if parent scope traversal is allowed and if so, try that
        if ((flags & 67108864 /* allowParentScopeTraversal */) > 0) {
            let parent = scope.parentScope;
            while (parent !== null) {
                if (parent.scopeParts.includes(part)) {
                    const result = this.get(parent, name, ancestor, flags
                        // unset the flag; only allow one level of scope boundary traversal
                        & ~67108864 /* allowParentScopeTraversal */
                        // tell the scope to return null if the name could not be found
                        | 4194304 /* isTraversingParentScope */);
                    if (result === marker) {
                        return scope.bindingContext || scope.overrideContext;
                    }
                    else {
                        return result;
                    }
                }
                else {
                    parent = parent.parentScope;
                }
            }
            if (parent === null) {
                throw new Error(`No target scope could be found for part "${part}"`);
            }
        }
        // still nothing found. return the root binding context (or null
        // if this is a parent scope traversal, to ensure we fall back to the
        // correct level)
        if (flags & 4194304 /* isTraversingParentScope */) {
            return marker;
        }
        return scope.bindingContext || scope.overrideContext;
    }
    getObservers(flags) {
        if (this.$observers == null) {
            this.$observers = new InternalObserversLookup();
        }
        return this.$observers;
    }
}
class Scope {
    constructor(parentScope, bindingContext, overrideContext) {
        this.parentScope = parentScope;
        this.scopeParts = PLATFORM.emptyArray;
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext;
    }
    static create(flags, bc, oc) {
        return new Scope(null, bc, oc == null ? OverrideContext.create(flags, bc, oc) : oc);
    }
    static fromOverride(flags, oc) {
        if (oc == null) {
            throw Reporter.error(252 /* NilOverrideContext */);
        }
        return new Scope(null, oc.bindingContext, oc);
    }
    static fromParent(flags, ps, bc) {
        if (ps == null) {
            throw Reporter.error(253 /* NilParentScope */);
        }
        return new Scope(ps, bc, OverrideContext.create(flags, bc, ps.overrideContext));
    }
}
class OverrideContext {
    constructor(bindingContext, parentOverrideContext) {
        this.$synthetic = true;
        this.bindingContext = bindingContext;
        this.parentOverrideContext = parentOverrideContext;
    }
    static create(flags, bc, poc) {
        return new OverrideContext(bc, poc === void 0 ? null : poc);
    }
    getObservers() {
        if (this.$observers === void 0) {
            this.$observers = new InternalObserversLookup();
        }
        return this.$observers;
    }
}

const ISignaler = DI.createInterface('ISignaler').withDefault(x => x.singleton(Signaler));
/** @internal */
class Signaler {
    constructor() {
        this.signals = Object.create(null);
    }
    dispatchSignal(name, flags) {
        const listeners = this.signals[name];
        if (listeners === undefined) {
            return;
        }
        for (const listener of listeners.keys()) {
            listener.handleChange(undefined, undefined, flags | 16 /* updateTargetInstance */);
        }
    }
    addSignalListener(name, listener) {
        const signals = this.signals;
        const listeners = signals[name];
        if (listeners === undefined) {
            signals[name] = new Set([listener]);
        }
        else {
            listeners.add(listener);
        }
    }
    removeSignalListener(name, listener) {
        const listeners = this.signals[name];
        if (listeners) {
            listeners.delete(listener);
        }
    }
}

/**
 * TargetedInstructionType enum values become the property names for the associated renderers when they are injected
 * into the `Renderer`.
 *
 * Additional instruction types can be added as long as they are 2 characters long and do not clash with existing ones.
 *
 * By convention, the instruction types for a particular runtime start with the same first letter, and the second letter
 * starts counting from letter `a`. The standard runtime instruction types all start with the letter `r`.
 */
var TargetedInstructionType;
(function (TargetedInstructionType) {
    TargetedInstructionType["hydrateElement"] = "ra";
    TargetedInstructionType["hydrateAttribute"] = "rb";
    TargetedInstructionType["hydrateTemplateController"] = "rc";
    TargetedInstructionType["hydrateLetElement"] = "rd";
    TargetedInstructionType["setProperty"] = "re";
    TargetedInstructionType["interpolation"] = "rf";
    TargetedInstructionType["propertyBinding"] = "rg";
    TargetedInstructionType["callBinding"] = "rh";
    TargetedInstructionType["letBinding"] = "ri";
    TargetedInstructionType["refBinding"] = "rj";
    TargetedInstructionType["iteratorBinding"] = "rk";
})(TargetedInstructionType || (TargetedInstructionType = {}));
const parentPartsOwnPartsLookup = new WeakMap();
/**
 * Efficiently merge parts, performing the minimal amount of work / using the minimal amount of memory.
 *
 * If either of the two part records is undefined, the other will simply be returned.
 *
 * If both are undefined, undefined will be returned.
 *
 * If neither are undefined, a new object will be returned where parts of the second value will be written last (and thus may overwrite duplicate named parts).
 *
 * This function is idempotent via a WeakMap cache: results are cached and if the same two variables are provided again, the same object will be returned.
 */
function mergeParts(parentParts, ownParts) {
    if (parentParts === ownParts) {
        return parentParts;
    }
    if (parentParts === void 0) {
        return ownParts;
    }
    if (ownParts === void 0) {
        return parentParts;
    }
    let ownPartsLookup = parentPartsOwnPartsLookup.get(parentParts);
    if (ownPartsLookup === void 0) {
        parentPartsOwnPartsLookup.set(parentParts, ownPartsLookup = new WeakMap());
    }
    let mergedParts = ownPartsLookup.get(ownParts);
    if (mergedParts === void 0) {
        ownPartsLookup.set(ownParts, mergedParts = {
            ...parentParts,
            ...ownParts,
        });
    }
    return mergedParts;
}
const ITargetedInstruction = DI.createInterface('ITargetedInstruction').noDefault();
class HooksDefinition {
    constructor(target) {
        this.hasCreate = 'create' in target;
        this.hasBeforeCompile = 'beforeCompile' in target;
        this.hasAfterCompile = 'afterCompile' in target;
        this.hasAfterCompileChildren = 'afterCompileChildren' in target;
        this.hasBeforeBind = 'beforeBind' in target;
        this.hasAfterBind = 'afterBind' in target;
        this.hasBeforeUnbind = 'beforeUnbind' in target;
        this.hasAfterUnbind = 'afterUnbind' in target;
        this.hasBeforeAttach = 'beforeAttach' in target;
        this.hasAfterAttach = 'afterAttach' in target;
        this.hasBeforeDetach = 'beforeDetach' in target;
        this.hasAfterDetach = 'afterDetach' in target;
        this.hasCaching = 'caching' in target;
    }
}
HooksDefinition.none = new HooksDefinition({});
function alias(...aliases) {
    return function (target) {
        const key = Protocol.annotation.keyFor('aliases');
        const existing = Metadata.getOwn(key, target);
        if (existing === void 0) {
            Metadata.define(key, aliases, target);
        }
        else {
            existing.push(...aliases);
        }
    };
}
function registerAliases(aliases, resource, key, container) {
    for (let i = 0, ii = aliases.length; i < ii; ++i) {
        Registration.aliasTo(key, resource.keyFrom(aliases[i])).register(container);
    }
}

// TODO: add connect-queue (or something similar) back in when everything else is working, to improve startup time
const slotNames = [];
const versionSlotNames = [];
let lastSlot = -1;
function ensureEnoughSlotNames(currentSlot) {
    if (currentSlot === lastSlot) {
        lastSlot += 5;
        const ii = slotNames.length = versionSlotNames.length = lastSlot + 1;
        for (let i = currentSlot + 1; i < ii; ++i) {
            slotNames[i] = `_observer${i}`;
            versionSlotNames[i] = `_observerVersion${i}`;
        }
    }
}
ensureEnoughSlotNames(-1);
/** @internal */
function addObserver(observer) {
    // find the observer.
    const observerSlots = this.observerSlots == null ? 0 : this.observerSlots;
    let i = observerSlots;
    while (i-- && this[slotNames[i]] !== observer)
        ;
    // if we are not already observing, put the observer in an open slot and subscribe.
    if (i === -1) {
        i = 0;
        while (this[slotNames[i]]) {
            i++;
        }
        this[slotNames[i]] = observer;
        observer.subscribe(this);
        observer[this.id] |= 16 /* updateTargetInstance */;
        // increment the slot count.
        if (i === observerSlots) {
            this.observerSlots = i + 1;
        }
    }
    // set the "version" when the observer was used.
    if (this.version == null) {
        this.version = 0;
    }
    this[versionSlotNames[i]] = this.version;
    ensureEnoughSlotNames(i);
}
/** @internal */
function observeProperty(flags, obj, propertyName) {
    const observer = this.observerLocator.getObserver(flags, obj, propertyName);
    /* Note: we need to cast here because we can indeed get an accessor instead of an observer,
     *  in which case the call to observer.subscribe will throw. It's not very clean and we can solve this in 2 ways:
     *  1. Fail earlier: only let the locator resolve observers from .getObserver, and throw if no branches are left (e.g. it would otherwise return an accessor)
     *  2. Fail silently (without throwing): give all accessors a no-op subscribe method
     *
     * We'll probably want to implement some global configuration (like a "strict" toggle) so users can pick between enforced correctness vs. ease-of-use
     */
    this.addObserver(observer);
}
/** @internal */
function unobserve(all) {
    const slots = this.observerSlots;
    let slotName;
    let observer;
    if (all === true) {
        for (let i = 0; i < slots; ++i) {
            slotName = slotNames[i];
            observer = this[slotName];
            if (observer != null) {
                this[slotName] = void 0;
                observer.unsubscribe(this);
                observer[this.id] &= ~16 /* updateTargetInstance */;
            }
        }
    }
    else {
        const version = this.version;
        for (let i = 0; i < slots; ++i) {
            if (this[versionSlotNames[i]] !== version) {
                slotName = slotNames[i];
                observer = this[slotName];
                if (observer != null) {
                    this[slotName] = void 0;
                    observer.unsubscribe(this);
                    observer[this.id] &= ~16 /* updateTargetInstance */;
                }
            }
        }
    }
}
function connectableDecorator(target) {
    const proto = target.prototype;
    if (!Object.prototype.hasOwnProperty.call(proto, 'observeProperty'))
        proto.observeProperty = observeProperty;
    if (!Object.prototype.hasOwnProperty.call(proto, 'unobserve'))
        proto.unobserve = unobserve;
    if (!Object.prototype.hasOwnProperty.call(proto, 'addObserver'))
        proto.addObserver = addObserver;
    return target;
}
function connectable(target) {
    return target == null ? connectableDecorator : connectableDecorator(target);
}
let value = 0;
connectable.assignIdTo = (instance) => {
    instance.id = ++value;
};

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var BindingBehaviorStrategy;
(function (BindingBehaviorStrategy) {
    BindingBehaviorStrategy[BindingBehaviorStrategy["singleton"] = 1] = "singleton";
    BindingBehaviorStrategy[BindingBehaviorStrategy["interceptor"] = 2] = "interceptor";
})(BindingBehaviorStrategy || (BindingBehaviorStrategy = {}));
function bindingBehavior(nameOrDef) {
    return function (target) {
        return BindingBehavior.define(nameOrDef, target);
    };
}
class BindingBehaviorDefinition {
    constructor(Type, name, aliases, key, strategy) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.strategy = strategy;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        const inheritsFromInterceptor = Object.getPrototypeOf(Type) === BindingInterceptor;
        return new BindingBehaviorDefinition(Type, firstDefined(BindingBehavior.getAnnotation(Type, 'name'), name), mergeArrays(BindingBehavior.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), BindingBehavior.keyFrom(name), fromAnnotationOrDefinitionOrTypeOrDefault('strategy', def, Type, () => inheritsFromInterceptor ? 2 /* interceptor */ : 1 /* singleton */));
    }
    register(container) {
        const { Type, key, aliases, strategy } = this;
        switch (strategy) {
            case 1 /* singleton */:
                Registration.singleton(key, Type).register(container);
                break;
            case 2 /* interceptor */:
                Registration.instance(key, new BindingBehaviorFactory(container, Type)).register(container);
                break;
        }
        Registration.aliasTo(key, Type).register(container);
        registerAliases(aliases, BindingBehavior, key, container);
    }
}
class BindingBehaviorFactory {
    constructor(container, Type) {
        this.container = container;
        this.Type = Type;
        this.deps = DI.getDependencies(Type);
    }
    construct(binding, expr) {
        const container = this.container;
        const deps = this.deps;
        switch (deps.length) {
            case 0:
            case 1:
            case 2:
                return new this.Type(binding, expr);
            case 3:
                return new this.Type(container.get(deps[0]), binding, expr);
            case 4:
                return new this.Type(container.get(deps[0]), container.get(deps[1]), binding, expr);
            default:
                return new this.Type(...deps.map(d => container.get(d)), binding, expr);
        }
    }
}
let BindingInterceptor = class BindingInterceptor {
    constructor(binding, expr) {
        this.binding = binding;
        this.expr = expr;
        this.interceptor = this;
        let interceptor;
        while (binding.interceptor !== this) {
            interceptor = binding.interceptor;
            binding.interceptor = this;
            binding = interceptor;
        }
    }
    get id() {
        return this.binding.id;
    }
    get observerLocator() {
        return this.binding.observerLocator;
    }
    get locator() {
        return this.binding.locator;
    }
    get $scope() {
        return this.binding.$scope;
    }
    get part() {
        return this.binding.part;
    }
    get $state() {
        return this.binding.$state;
    }
    updateTarget(value, flags) {
        this.binding.updateTarget(value, flags);
    }
    updateSource(value, flags) {
        this.binding.updateSource(value, flags);
    }
    callSource(args) {
        return this.binding.callSource(args);
    }
    handleChange(newValue, previousValue, flags) {
        this.binding.handleChange(newValue, previousValue, flags);
    }
    $bind(flags, scope, part) {
        this.binding.$bind(flags, scope, part);
    }
    $unbind(flags) {
        this.binding.$unbind(flags);
    }
};
BindingInterceptor = __decorate$4([
    connectable,
    __metadata$4("design:paramtypes", [Object, Object])
], BindingInterceptor);
const BindingBehavior = {
    name: Protocol.resource.keyFor('binding-behavior'),
    keyFrom(name) {
        return `${BindingBehavior.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && Metadata.hasOwn(BindingBehavior.name, value);
    },
    define(nameOrDef, Type) {
        const definition = BindingBehaviorDefinition.create(nameOrDef, Type);
        Metadata.define(BindingBehavior.name, definition, definition.Type);
        Metadata.define(BindingBehavior.name, definition, definition);
        Protocol.resource.appendTo(Type, BindingBehavior.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = Metadata.getOwn(BindingBehavior.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        Metadata.define(Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return Metadata.getOwn(Protocol.annotation.keyFor(prop), Type);
    },
};

function valueConverter(nameOrDef) {
    return function (target) {
        return ValueConverter.define(nameOrDef, target);
    };
}
class ValueConverterDefinition {
    constructor(Type, name, aliases, key) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        return new ValueConverterDefinition(Type, firstDefined(ValueConverter.getAnnotation(Type, 'name'), name), mergeArrays(ValueConverter.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), ValueConverter.keyFrom(name));
    }
    register(container) {
        const { Type, key, aliases } = this;
        Registration.singleton(key, Type).register(container);
        Registration.aliasTo(key, Type).register(container);
        registerAliases(aliases, ValueConverter, key, container);
    }
}
const ValueConverter = {
    name: Protocol.resource.keyFor('value-converter'),
    keyFrom(name) {
        return `${ValueConverter.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && Metadata.hasOwn(ValueConverter.name, value);
    },
    define(nameOrDef, Type) {
        const definition = ValueConverterDefinition.create(nameOrDef, Type);
        Metadata.define(ValueConverter.name, definition, definition.Type);
        Metadata.define(ValueConverter.name, definition, definition);
        Protocol.resource.appendTo(Type, ValueConverter.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = Metadata.getOwn(ValueConverter.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        Metadata.define(Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return Metadata.getOwn(Protocol.annotation.keyFor(prop), Type);
    },
};

function hasBind(expr) {
    return (expr.$kind & 2048 /* HasBind */) === 2048 /* HasBind */;
}
function hasUnbind(expr) {
    return (expr.$kind & 4096 /* HasUnbind */) === 4096 /* HasUnbind */;
}
var RuntimeError$1;
(function (RuntimeError) {
    RuntimeError[RuntimeError["NoLocator"] = 202] = "NoLocator";
    RuntimeError[RuntimeError["NoBehaviorFound"] = 203] = "NoBehaviorFound";
    RuntimeError[RuntimeError["BehaviorAlreadyApplied"] = 204] = "BehaviorAlreadyApplied";
    RuntimeError[RuntimeError["NoConverterFound"] = 205] = "NoConverterFound";
    RuntimeError[RuntimeError["NoBinding"] = 206] = "NoBinding";
    RuntimeError[RuntimeError["NotAFunction"] = 207] = "NotAFunction";
    RuntimeError[RuntimeError["UnknownOperator"] = 208] = "UnknownOperator";
    RuntimeError[RuntimeError["NilScope"] = 250] = "NilScope";
})(RuntimeError$1 || (RuntimeError$1 = {}));
class CustomExpression {
    constructor(value) {
        this.value = value;
    }
    evaluate(flags, scope, locator, part) {
        return this.value;
    }
}
class BindingBehaviorExpression {
    constructor(expression, name, args) {
        this.expression = expression;
        this.name = name;
        this.args = args;
        this.$kind = 38962 /* BindingBehavior */;
        this.behaviorKey = BindingBehavior.keyFrom(name);
    }
    evaluate(flags, scope, locator, part) {
        return this.expression.evaluate(flags, scope, locator, part);
    }
    assign(flags, scope, locator, value, part) {
        return this.expression.assign(flags, scope, locator, value, part);
    }
    connect(flags, scope, binding, part) {
        this.expression.connect(flags, scope, binding, part);
    }
    bind(flags, scope, binding) {
        if (scope == null) {
            throw Reporter.error(250 /* NilScope */, this);
        }
        if (!binding) {
            throw Reporter.error(206 /* NoBinding */, this);
        }
        const locator = binding.locator;
        if (!locator) {
            throw Reporter.error(202 /* NoLocator */, this);
        }
        if (hasBind(this.expression)) {
            this.expression.bind(flags, scope, binding);
        }
        const behaviorKey = this.behaviorKey;
        const behavior = locator.get(behaviorKey);
        if (!behavior) {
            throw Reporter.error(203 /* NoBehaviorFound */, this);
        }
        if (!(behavior instanceof BindingBehaviorFactory)) {
            if (binding[behaviorKey] === void 0) {
                binding[behaviorKey] = behavior;
                behavior.bind.call(behavior, flags, scope, binding, ...evalList(flags, scope, locator, this.args));
            }
            else {
                Reporter.write(204 /* BehaviorAlreadyApplied */, this);
            }
        }
    }
    unbind(flags, scope, binding) {
        const behaviorKey = this.behaviorKey;
        if (binding[behaviorKey] !== void 0) {
            binding[behaviorKey].unbind(flags, scope, binding);
            binding[behaviorKey] = void 0;
        }
        if (hasUnbind(this.expression)) {
            this.expression.unbind(flags, scope, binding);
        }
    }
    accept(visitor) {
        return visitor.visitBindingBehavior(this);
    }
}
class ValueConverterExpression {
    constructor(expression, name, args) {
        this.expression = expression;
        this.name = name;
        this.args = args;
        this.$kind = 36913 /* ValueConverter */;
        this.converterKey = ValueConverter.keyFrom(name);
    }
    evaluate(flags, scope, locator, part) {
        if (!locator) {
            throw Reporter.error(202 /* NoLocator */, this);
        }
        const converter = locator.get(this.converterKey);
        if (!converter) {
            throw Reporter.error(205 /* NoConverterFound */, this);
        }
        if ('toView' in converter) {
            const args = this.args;
            const len = args.length;
            const result = Array(len + 1);
            result[0] = this.expression.evaluate(flags, scope, locator, part);
            for (let i = 0; i < len; ++i) {
                result[i + 1] = args[i].evaluate(flags, scope, locator, part);
            }
            return converter.toView.call(converter, ...result);
        }
        return this.expression.evaluate(flags, scope, locator, part);
    }
    assign(flags, scope, locator, value, part) {
        if (!locator) {
            throw Reporter.error(202 /* NoLocator */, this);
        }
        const converter = locator.get(this.converterKey);
        if (!converter) {
            throw Reporter.error(205 /* NoConverterFound */, this);
        }
        if ('fromView' in converter) {
            value = converter.fromView.call(converter, value, ...(evalList(flags, scope, locator, this.args)));
        }
        return this.expression.assign(flags, scope, locator, value, part);
    }
    connect(flags, scope, binding, part) {
        if (scope == null) {
            throw Reporter.error(250 /* NilScope */, this);
        }
        if (!binding) {
            throw Reporter.error(206 /* NoBinding */, this);
        }
        const locator = binding.locator;
        if (!locator) {
            throw Reporter.error(202 /* NoLocator */, this);
        }
        this.expression.connect(flags, scope, binding, part);
        const args = this.args;
        for (let i = 0, ii = args.length; i < ii; ++i) {
            args[i].connect(flags, scope, binding, part);
        }
        const converter = locator.get(this.converterKey);
        if (!converter) {
            throw Reporter.error(205 /* NoConverterFound */, this);
        }
        const signals = converter.signals;
        if (signals === void 0) {
            return;
        }
        const signaler = locator.get(ISignaler);
        for (let i = 0, ii = signals.length; i < ii; ++i) {
            signaler.addSignalListener(signals[i], binding);
        }
    }
    unbind(flags, scope, binding) {
        const locator = binding.locator;
        const converter = locator.get(this.converterKey);
        const signals = converter.signals;
        if (signals === void 0) {
            return;
        }
        const signaler = locator.get(ISignaler);
        for (let i = 0, ii = signals.length; i < ii; ++i) {
            signaler.removeSignalListener(signals[i], binding);
        }
    }
    accept(visitor) {
        return visitor.visitValueConverter(this);
    }
}
class AssignExpression {
    constructor(target, value) {
        this.target = target;
        this.value = value;
        this.$kind = 8208 /* Assign */;
    }
    evaluate(flags, scope, locator, part) {
        return this.target.assign(flags, scope, locator, this.value.evaluate(flags, scope, locator), part);
    }
    connect(flags, scope, binding, part) {
        return;
    }
    assign(flags, scope, locator, value, part) {
        this.value.assign(flags, scope, locator, value, part);
        return this.target.assign(flags, scope, locator, value, part);
    }
    accept(visitor) {
        return visitor.visitAssign(this);
    }
}
class ConditionalExpression {
    constructor(condition, yes, no) {
        this.condition = condition;
        this.yes = yes;
        this.no = no;
        this.$kind = 63 /* Conditional */;
    }
    evaluate(flags, scope, locator, part) {
        return (!!this.condition.evaluate(flags, scope, locator, part))
            ? this.yes.evaluate(flags, scope, locator, part)
            : this.no.evaluate(flags, scope, locator, part);
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const condition = this.condition;
        if (condition.evaluate(flags, scope, null, part)) {
            this.condition.connect(flags, scope, binding, part);
            this.yes.connect(flags, scope, binding, part);
        }
        else {
            this.condition.connect(flags, scope, binding, part);
            this.no.connect(flags, scope, binding, part);
        }
    }
    accept(visitor) {
        return visitor.visitConditional(this);
    }
}
class AccessThisExpression {
    constructor(ancestor = 0) {
        this.ancestor = ancestor;
        this.$kind = 1793 /* AccessThis */;
    }
    evaluate(flags, scope, locator, part) {
        if (scope == null) {
            throw Reporter.error(250 /* NilScope */, this);
        }
        if ((flags & 67108864 /* allowParentScopeTraversal */) > 0) {
            let parent = scope.parentScope;
            while (parent !== null) {
                if (!parent.scopeParts.includes(part)) {
                    parent = parent.parentScope;
                }
            }
            if (parent === null) {
                throw new Error(`No target scope cold be found for part "${part}"`);
            }
        }
        let oc = scope.overrideContext;
        let i = this.ancestor;
        while (i-- && oc) {
            oc = oc.parentOverrideContext;
        }
        return i < 1 && oc ? oc.bindingContext : void 0;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        return;
    }
    accept(visitor) {
        return visitor.visitAccessThis(this);
    }
}
AccessThisExpression.$this = new AccessThisExpression(0);
AccessThisExpression.$parent = new AccessThisExpression(1);
class AccessScopeExpression {
    constructor(name, ancestor = 0) {
        this.name = name;
        this.ancestor = ancestor;
        this.$kind = 10082 /* AccessScope */;
    }
    evaluate(flags, scope, locator, part) {
        const obj = BindingContext.get(scope, this.name, this.ancestor, flags, part);
        const evaluatedValue = obj[this.name];
        if (flags & 4 /* isStrictBindingStrategy */) {
            return evaluatedValue;
        }
        return evaluatedValue == null ? '' : evaluatedValue;
    }
    assign(flags, scope, locator, value, part) {
        const obj = BindingContext.get(scope, this.name, this.ancestor, flags, part);
        if (obj instanceof Object) {
            if (obj.$observers !== void 0 && obj.$observers[this.name] !== void 0) {
                obj.$observers[this.name].setValue(value, flags);
                return value;
            }
            else {
                return obj[this.name] = value;
            }
        }
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const context = BindingContext.get(scope, this.name, this.ancestor, flags, part);
        binding.observeProperty(flags, context, this.name);
    }
    accept(visitor) {
        return visitor.visitAccessScope(this);
    }
}
class AccessMemberExpression {
    constructor(object, name) {
        this.object = object;
        this.name = name;
        this.$kind = 9323 /* AccessMember */;
    }
    evaluate(flags, scope, locator, part) {
        const instance = this.object.evaluate(flags, scope, locator, part);
        if (flags & 4 /* isStrictBindingStrategy */) {
            return instance == null ? instance : instance[this.name];
        }
        return instance ? instance[this.name] : '';
    }
    assign(flags, scope, locator, value, part) {
        const obj = this.object.evaluate(flags, scope, locator, part);
        if (obj instanceof Object) {
            if (obj.$observers !== void 0 && obj.$observers[this.name] !== void 0) {
                obj.$observers[this.name].setValue(value, flags);
            }
            else {
                obj[this.name] = value;
            }
        }
        else {
            this.object.assign(flags, scope, locator, { [this.name]: value });
        }
        return value;
    }
    connect(flags, scope, binding, part) {
        const obj = this.object.evaluate(flags, scope, null, part);
        if ((flags & 134217728 /* observeLeafPropertiesOnly */) === 0) {
            this.object.connect(flags, scope, binding, part);
        }
        if (obj instanceof Object) {
            binding.observeProperty(flags, obj, this.name);
        }
    }
    accept(visitor) {
        return visitor.visitAccessMember(this);
    }
}
class AccessKeyedExpression {
    constructor(object, key) {
        this.object = object;
        this.key = key;
        this.$kind = 9324 /* AccessKeyed */;
    }
    evaluate(flags, scope, locator, part) {
        const instance = this.object.evaluate(flags, scope, locator, part);
        if (instance instanceof Object) {
            const key = this.key.evaluate(flags, scope, locator, part);
            return instance[key];
        }
        return void 0;
    }
    assign(flags, scope, locator, value, part) {
        const instance = this.object.evaluate(flags, scope, locator, part);
        const key = this.key.evaluate(flags, scope, locator, part);
        return instance[key] = value;
    }
    connect(flags, scope, binding, part) {
        const obj = this.object.evaluate(flags, scope, null, part);
        if ((flags & 134217728 /* observeLeafPropertiesOnly */) === 0) {
            this.object.connect(flags, scope, binding, part);
        }
        if (obj instanceof Object) {
            this.key.connect(flags, scope, binding, part);
            const key = this.key.evaluate(flags, scope, null, part);
            // (note: string indexers behave the same way as numeric indexers as long as they represent numbers)
            binding.observeProperty(flags, obj, key);
        }
    }
    accept(visitor) {
        return visitor.visitAccessKeyed(this);
    }
}
class CallScopeExpression {
    constructor(name, args, ancestor = 0) {
        this.name = name;
        this.args = args;
        this.ancestor = ancestor;
        this.$kind = 1448 /* CallScope */;
    }
    evaluate(flags, scope, locator, part) {
        const args = evalList(flags, scope, locator, this.args, part);
        const context = BindingContext.get(scope, this.name, this.ancestor, flags, part);
        const func = getFunction(flags, context, this.name);
        if (func) {
            return func.apply(context, args);
        }
        return void 0;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const args = this.args;
        for (let i = 0, ii = args.length; i < ii; ++i) {
            args[i].connect(flags, scope, binding, part);
        }
    }
    accept(visitor) {
        return visitor.visitCallScope(this);
    }
}
class CallMemberExpression {
    constructor(object, name, args) {
        this.object = object;
        this.name = name;
        this.args = args;
        this.$kind = 1161 /* CallMember */;
    }
    evaluate(flags, scope, locator, part) {
        const instance = this.object.evaluate(flags, scope, locator, part);
        const args = evalList(flags, scope, locator, this.args, part);
        const func = getFunction(flags, instance, this.name);
        if (func) {
            return func.apply(instance, args);
        }
        return void 0;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const obj = this.object.evaluate(flags, scope, null, part);
        if ((flags & 134217728 /* observeLeafPropertiesOnly */) === 0) {
            this.object.connect(flags, scope, binding, part);
        }
        if (getFunction(flags & ~2097152 /* mustEvaluate */, obj, this.name)) {
            const args = this.args;
            for (let i = 0, ii = args.length; i < ii; ++i) {
                args[i].connect(flags, scope, binding, part);
            }
        }
    }
    accept(visitor) {
        return visitor.visitCallMember(this);
    }
}
class CallFunctionExpression {
    constructor(func, args) {
        this.func = func;
        this.args = args;
        this.$kind = 1162 /* CallFunction */;
    }
    evaluate(flags, scope, locator, part) {
        const func = this.func.evaluate(flags, scope, locator, part);
        if (typeof func === 'function') {
            return func(...evalList(flags, scope, locator, this.args, part));
        }
        if (!(flags & 2097152 /* mustEvaluate */) && (func == null)) {
            return void 0;
        }
        throw Reporter.error(207 /* NotAFunction */, this);
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const func = this.func.evaluate(flags, scope, null, part);
        this.func.connect(flags, scope, binding, part);
        if (typeof func === 'function') {
            const args = this.args;
            for (let i = 0, ii = args.length; i < ii; ++i) {
                args[i].connect(flags, scope, binding, part);
            }
        }
    }
    accept(visitor) {
        return visitor.visitCallFunction(this);
    }
}
class BinaryExpression {
    constructor(operation, left, right) {
        this.operation = operation;
        this.left = left;
        this.right = right;
        this.$kind = 46 /* Binary */;
        // what we're doing here is effectively moving the large switch statement from evaluate to the constructor
        // so that the check only needs to be done once, and evaluate (which is called many times) will have a lot less
        // work to do; we can do this because the operation can't change after it's parsed
        this.evaluate = this[operation];
    }
    evaluate(flags, scope, locator, part) {
        throw Reporter.error(208 /* UnknownOperator */, this);
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        this.left.connect(flags, scope, binding, part);
        this.right.connect(flags, scope, binding, part);
    }
    ['&&'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) && this.right.evaluate(f, s, l, p);
    }
    ['||'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) || this.right.evaluate(f, s, l, p);
    }
    ['=='](f, s, l, p) {
        // eslint-disable-next-line eqeqeq
        return this.left.evaluate(f, s, l, p) == this.right.evaluate(f, s, l, p);
    }
    ['==='](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) === this.right.evaluate(f, s, l, p);
    }
    ['!='](f, s, l, p) {
        // eslint-disable-next-line eqeqeq
        return this.left.evaluate(f, s, l, p) != this.right.evaluate(f, s, l, p);
    }
    ['!=='](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) !== this.right.evaluate(f, s, l, p);
    }
    ['instanceof'](f, s, l, p) {
        const right = this.right.evaluate(f, s, l, p);
        if (typeof right === 'function') {
            return this.left.evaluate(f, s, l, p) instanceof right;
        }
        return false;
    }
    ['in'](f, s, l, p) {
        const right = this.right.evaluate(f, s, l, p);
        if (right instanceof Object) {
            return this.left.evaluate(f, s, l, p) in right;
        }
        return false;
    }
    // note: autoConvertAdd (and the null check) is removed because the default spec behavior is already largely similar
    // and where it isn't, you kind of want it to behave like the spec anyway (e.g. return NaN when adding a number to undefined)
    // this makes bugs in user code easier to track down for end users
    // also, skipping these checks and leaving it to the runtime is a nice little perf boost and simplifies our code
    ['+'](f, s, l, p) {
        const left = this.left.evaluate(f, s, l, p);
        const right = this.right.evaluate(f, s, l, p);
        if ((f & 4 /* isStrictBindingStrategy */) > 0) {
            return left + right;
        }
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (!left || !right) {
            if (isNumberOrBigInt(left) || isNumberOrBigInt(right)) {
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unnecessary-condition
                return (left || 0) + (right || 0);
            }
            if (isStringOrDate(left) || isStringOrDate(right)) {
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unnecessary-condition
                return (left || '') + (right || '');
            }
        }
        return left + right;
    }
    ['-'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) - this.right.evaluate(f, s, l, p);
    }
    ['*'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) * this.right.evaluate(f, s, l, p);
    }
    ['/'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) / this.right.evaluate(f, s, l, p);
    }
    ['%'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) % this.right.evaluate(f, s, l, p);
    }
    ['<'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) < this.right.evaluate(f, s, l, p);
    }
    ['>'](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) > this.right.evaluate(f, s, l, p);
    }
    ['<='](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) <= this.right.evaluate(f, s, l, p);
    }
    ['>='](f, s, l, p) {
        return this.left.evaluate(f, s, l, p) >= this.right.evaluate(f, s, l, p);
    }
    accept(visitor) {
        return visitor.visitBinary(this);
    }
}
class UnaryExpression {
    constructor(operation, expression) {
        this.operation = operation;
        this.expression = expression;
        this.$kind = 39 /* Unary */;
        // see Binary (we're doing the same thing here)
        this.evaluate = this[operation];
    }
    evaluate(flags, scope, locator, part) {
        throw Reporter.error(208 /* UnknownOperator */, this);
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        this.expression.connect(flags, scope, binding, part);
    }
    ['void'](f, s, l, p) {
        return void this.expression.evaluate(f, s, l, p);
    }
    ['typeof'](f, s, l, p) {
        return typeof this.expression.evaluate(f | 4 /* isStrictBindingStrategy */, s, l, p);
    }
    ['!'](f, s, l, p) {
        return !this.expression.evaluate(f, s, l, p);
    }
    ['-'](f, s, l, p) {
        return -this.expression.evaluate(f, s, l, p);
    }
    ['+'](f, s, l, p) {
        return +this.expression.evaluate(f, s, l, p);
    }
    accept(visitor) {
        return visitor.visitUnary(this);
    }
}
class PrimitiveLiteralExpression {
    constructor(value) {
        this.value = value;
        this.$kind = 17925 /* PrimitiveLiteral */;
    }
    evaluate(flags, scope, locator, part) {
        return this.value;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        return;
    }
    accept(visitor) {
        return visitor.visitPrimitiveLiteral(this);
    }
}
PrimitiveLiteralExpression.$undefined = new PrimitiveLiteralExpression(void 0);
PrimitiveLiteralExpression.$null = new PrimitiveLiteralExpression(null);
PrimitiveLiteralExpression.$true = new PrimitiveLiteralExpression(true);
PrimitiveLiteralExpression.$false = new PrimitiveLiteralExpression(false);
PrimitiveLiteralExpression.$empty = new PrimitiveLiteralExpression('');
class HtmlLiteralExpression {
    constructor(parts) {
        this.parts = parts;
        this.$kind = 51 /* HtmlLiteral */;
    }
    evaluate(flags, scope, locator, part) {
        const elements = this.parts;
        let result = '';
        let value;
        for (let i = 0, ii = elements.length; i < ii; ++i) {
            value = elements[i].evaluate(flags, scope, locator, part);
            if (value == null) {
                continue;
            }
            result += value;
        }
        return result;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        for (let i = 0, ii = this.parts.length; i < ii; ++i) {
            this.parts[i].connect(flags, scope, binding, part);
        }
    }
    accept(visitor) {
        return visitor.visitHtmlLiteral(this);
    }
}
class ArrayLiteralExpression {
    constructor(elements) {
        this.elements = elements;
        this.$kind = 17955 /* ArrayLiteral */;
    }
    evaluate(flags, scope, locator, part) {
        const elements = this.elements;
        const length = elements.length;
        const result = Array(length);
        for (let i = 0; i < length; ++i) {
            result[i] = elements[i].evaluate(flags, scope, locator, part);
        }
        return result;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const elements = this.elements;
        for (let i = 0, ii = elements.length; i < ii; ++i) {
            elements[i].connect(flags, scope, binding, part);
        }
    }
    accept(visitor) {
        return visitor.visitArrayLiteral(this);
    }
}
ArrayLiteralExpression.$empty = new ArrayLiteralExpression(PLATFORM.emptyArray);
class ObjectLiteralExpression {
    constructor(keys, values) {
        this.keys = keys;
        this.values = values;
        this.$kind = 17956 /* ObjectLiteral */;
    }
    evaluate(flags, scope, locator, part) {
        const instance = {};
        const keys = this.keys;
        const values = this.values;
        for (let i = 0, ii = keys.length; i < ii; ++i) {
            instance[keys[i]] = values[i].evaluate(flags, scope, locator, part);
        }
        return instance;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const keys = this.keys;
        const values = this.values;
        for (let i = 0, ii = keys.length; i < ii; ++i) {
            values[i].connect(flags, scope, binding, part);
        }
    }
    accept(visitor) {
        return visitor.visitObjectLiteral(this);
    }
}
ObjectLiteralExpression.$empty = new ObjectLiteralExpression(PLATFORM.emptyArray, PLATFORM.emptyArray);
class TemplateExpression {
    constructor(cooked, expressions = PLATFORM.emptyArray) {
        this.cooked = cooked;
        this.expressions = expressions;
        this.$kind = 17958 /* Template */;
    }
    evaluate(flags, scope, locator, part) {
        const expressions = this.expressions;
        const cooked = this.cooked;
        let result = cooked[0];
        for (let i = 0, ii = expressions.length; i < ii; ++i) {
            result += expressions[i].evaluate(flags, scope, locator, part);
            result += cooked[i + 1];
        }
        return result;
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const expressions = this.expressions;
        for (let i = 0, ii = expressions.length; i < ii; ++i) {
            expressions[i].connect(flags, scope, binding, part);
            i++;
        }
    }
    accept(visitor) {
        return visitor.visitTemplate(this);
    }
}
TemplateExpression.$empty = new TemplateExpression(['']);
class TaggedTemplateExpression {
    constructor(cooked, raw, func, expressions = PLATFORM.emptyArray) {
        this.cooked = cooked;
        this.func = func;
        this.expressions = expressions;
        this.$kind = 1197 /* TaggedTemplate */;
        cooked.raw = raw;
    }
    evaluate(flags, scope, locator, part) {
        const expressions = this.expressions;
        const len = expressions.length;
        const results = Array(len);
        for (let i = 0, ii = len; i < ii; ++i) {
            results[i] = expressions[i].evaluate(flags, scope, locator, part);
        }
        const func = this.func.evaluate(flags, scope, locator, part);
        if (typeof func !== 'function') {
            throw Reporter.error(207 /* NotAFunction */, this);
        }
        return func(this.cooked, ...results);
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        const expressions = this.expressions;
        for (let i = 0, ii = expressions.length; i < ii; ++i) {
            expressions[i].connect(flags, scope, binding);
        }
        this.func.connect(flags, scope, binding);
    }
    accept(visitor) {
        return visitor.visitTaggedTemplate(this);
    }
}
class ArrayBindingPattern {
    // We'll either have elements, or keys+values, but never all 3
    constructor(elements) {
        this.elements = elements;
        this.$kind = 65556 /* ArrayBindingPattern */;
    }
    evaluate(flags, scope, locator, part) {
        // TODO
        return void 0;
    }
    assign(flags, scope, locator, obj, part) {
        // TODO
        return void 0;
    }
    connect(flags, scope, binding, part) {
        return;
    }
    accept(visitor) {
        return visitor.visitArrayBindingPattern(this);
    }
}
class ObjectBindingPattern {
    // We'll either have elements, or keys+values, but never all 3
    constructor(keys, values) {
        this.keys = keys;
        this.values = values;
        this.$kind = 65557 /* ObjectBindingPattern */;
    }
    evaluate(flags, scope, locator, part) {
        // TODO
        return void 0;
    }
    assign(flags, scope, locator, obj, part) {
        // TODO
        return void 0;
    }
    connect(flags, scope, binding, part) {
        return;
    }
    accept(visitor) {
        return visitor.visitObjectBindingPattern(this);
    }
}
class BindingIdentifier {
    constructor(name) {
        this.name = name;
        this.$kind = 65558 /* BindingIdentifier */;
    }
    evaluate(flags, scope, locator, part) {
        return this.name;
    }
    connect(flags, scope, binding, part) {
        return;
    }
    accept(visitor) {
        return visitor.visitBindingIdentifier(this);
    }
}
const toStringTag = Object.prototype.toString;
// https://tc39.github.io/ecma262/#sec-iteration-statements
// https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
class ForOfStatement {
    constructor(declaration, iterable) {
        this.declaration = declaration;
        this.iterable = iterable;
        this.$kind = 6199 /* ForOfStatement */;
    }
    evaluate(flags, scope, locator, part) {
        return this.iterable.evaluate(flags, scope, locator, part);
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    count(flags, result) {
        switch (toStringTag.call(result)) {
            case '[object Array]': return result.length;
            case '[object Map]': return result.size;
            case '[object Set]': return result.size;
            case '[object Number]': return result;
            case '[object Null]': return 0;
            case '[object Undefined]': return 0;
            default: throw Reporter.error(0); // TODO: Set error code
        }
    }
    iterate(flags, result, func) {
        switch (toStringTag.call(result)) {
            case '[object Array]': return $array(flags | 8388608 /* isOriginalArray */, result, func);
            case '[object Map]': return $map(flags | 8388608 /* isOriginalArray */, result, func);
            case '[object Set]': return $set(flags | 8388608 /* isOriginalArray */, result, func);
            case '[object Number]': return $number(flags | 8388608 /* isOriginalArray */, result, func);
            case '[object Null]': return;
            case '[object Undefined]': return;
            default: throw Reporter.error(0); // TODO: Set error code
        }
    }
    connect(flags, scope, binding, part) {
        this.declaration.connect(flags, scope, binding, part);
        this.iterable.connect(flags, scope, binding, part);
    }
    bind(flags, scope, binding) {
        if (hasBind(this.iterable)) {
            this.iterable.bind(flags, scope, binding);
        }
    }
    unbind(flags, scope, binding) {
        if (hasUnbind(this.iterable)) {
            this.iterable.unbind(flags, scope, binding);
        }
    }
    accept(visitor) {
        return visitor.visitForOfStatement(this);
    }
}
/*
* Note: this implementation is far simpler than the one in vCurrent and might be missing important stuff (not sure yet)
* so while this implementation is identical to Template and we could reuse that one, we don't want to lock outselves in to potentially the wrong abstraction
* but this class might be a candidate for removal if it turns out it does provide all we need
*/
class Interpolation {
    constructor(parts, expressions = PLATFORM.emptyArray) {
        this.parts = parts;
        this.expressions = expressions;
        this.$kind = 24 /* Interpolation */;
        this.isMulti = expressions.length > 1;
        this.firstExpression = expressions[0];
    }
    evaluate(flags, scope, locator, part) {
        if (this.isMulti) {
            const expressions = this.expressions;
            const parts = this.parts;
            let result = parts[0];
            for (let i = 0, ii = expressions.length; i < ii; ++i) {
                result += expressions[i].evaluate(flags, scope, locator, part);
                result += parts[i + 1];
            }
            return result;
        }
        else {
            const parts = this.parts;
            return `${parts[0]}${this.firstExpression.evaluate(flags, scope, locator, part)}${parts[1]}`;
        }
    }
    assign(flags, scope, locator, obj, part) {
        return void 0;
    }
    connect(flags, scope, binding, part) {
        return;
    }
    accept(visitor) {
        return visitor.visitInterpolation(this);
    }
}
/// Evaluate the [list] in context of the [scope].
function evalList(flags, scope, locator, list, part) {
    const len = list.length;
    const result = Array(len);
    for (let i = 0; i < len; ++i) {
        result[i] = list[i].evaluate(flags, scope, locator, part);
    }
    return result;
}
function getFunction(flags, obj, name) {
    const func = obj == null ? null : obj[name];
    if (typeof func === 'function') {
        return func;
    }
    if (!(flags & 2097152 /* mustEvaluate */) && func == null) {
        return null;
    }
    throw Reporter.error(207 /* NotAFunction */, obj, name, func);
}
const proxyAndOriginalArray = 2 /* proxyStrategy */ | 8388608 /* isOriginalArray */;
function $array(flags, result, func) {
    if ((flags & proxyAndOriginalArray) === proxyAndOriginalArray) {
        // If we're in proxy mode, and the array is the original "items" (and not an array we created here to iterate over e.g. a set)
        // then replace all items (which are Objects) with proxies so their properties are observed in the source view model even if no
        // observers are explicitly created
        const rawArray = ProxyObserver.getRawIfProxy(result);
        const len = rawArray.length;
        let item;
        let i = 0;
        for (; i < len; ++i) {
            item = rawArray[i];
            if (item instanceof Object) {
                item = rawArray[i] = ProxyObserver.getOrCreate(item).proxy;
            }
            func(rawArray, i, item);
        }
    }
    else {
        for (let i = 0, ii = result.length; i < ii; ++i) {
            func(result, i, result[i]);
        }
    }
}
function $map(flags, result, func) {
    const arr = Array(result.size);
    let i = -1;
    for (const entry of result.entries()) {
        arr[++i] = entry;
    }
    $array(flags & ~8388608 /* isOriginalArray */, arr, func);
}
function $set(flags, result, func) {
    const arr = Array(result.size);
    let i = -1;
    for (const key of result.keys()) {
        arr[++i] = key;
    }
    $array(flags & ~8388608 /* isOriginalArray */, arr, func);
}
function $number(flags, result, func) {
    const arr = Array(result);
    for (let i = 0; i < result; ++i) {
        arr[i] = i;
    }
    $array(flags & ~8388608 /* isOriginalArray */, arr, func);
}

/*
* Note: the oneTime binding now has a non-zero value for 2 reasons:
*  - plays nicer with bitwise operations (more consistent code, more explicit settings)
*  - allows for potentially having something like BindingMode.oneTime | BindingMode.fromView, where an initial value is set once to the view but updates from the view also propagate back to the view model
*
* Furthermore, the "default" mode would be for simple ".bind" expressions to make it explicit for our logic that the default is being used.
* This essentially adds extra information which binding could use to do smarter things and allows bindingBehaviors that add a mode instead of simply overwriting it
*/
var BindingMode;
(function (BindingMode) {
    BindingMode[BindingMode["oneTime"] = 1] = "oneTime";
    BindingMode[BindingMode["toView"] = 2] = "toView";
    BindingMode[BindingMode["fromView"] = 4] = "fromView";
    BindingMode[BindingMode["twoWay"] = 6] = "twoWay";
    BindingMode[BindingMode["default"] = 8] = "default";
})(BindingMode || (BindingMode = {}));
var BindingStrategy;
(function (BindingStrategy) {
    /**
     * Configures all components "below" this one to operate in getterSetter binding mode.
     * This is the default; if no strategy is specified, this one is implied.
     *
     * This strategy is the most compatible, convenient and has the best performance on frequently updated bindings on components that are infrequently replaced.
     * However, it also consumes the most resources on initialization.
     */
    BindingStrategy[BindingStrategy["getterSetter"] = 1] = "getterSetter";
    /**
     * Configures all components "below" this one to operate in proxy binding mode.
     * No getters/setters are created.
     *
     * This strategy consumes significantly fewer resources than `getterSetter` on initialization and has the best performance on infrequently updated bindings on
     * components that are frequently replaced.
     * However, it consumes more resources on updates.
     */
    BindingStrategy[BindingStrategy["proxies"] = 2] = "proxies";
})(BindingStrategy || (BindingStrategy = {}));
var State;
(function (State) {
    State[State["none"] = 0] = "none";
    State[State["isBinding"] = 1] = "isBinding";
    State[State["isUnbinding"] = 2] = "isUnbinding";
    State[State["isBound"] = 4] = "isBound";
    State[State["isBoundOrBinding"] = 5] = "isBoundOrBinding";
    State[State["isBoundOrUnbinding"] = 6] = "isBoundOrUnbinding";
    State[State["isAttaching"] = 8] = "isAttaching";
    State[State["isDetaching"] = 16] = "isDetaching";
    State[State["isAttached"] = 32] = "isAttached";
    State[State["isAttachedOrAttaching"] = 40] = "isAttachedOrAttaching";
    State[State["isAttachedOrDetaching"] = 48] = "isAttachedOrDetaching";
    State[State["isMounted"] = 64] = "isMounted";
    State[State["hasLockedScope"] = 256] = "hasLockedScope";
    State[State["canBeCached"] = 512] = "canBeCached";
})(State || (State = {}));
var LifecycleFlags;
(function (LifecycleFlags) {
    LifecycleFlags[LifecycleFlags["none"] = 0] = "none";
    // Bitmask for flags that need to be stored on a binding during $bind for mutation
    // callbacks outside of $bind
    LifecycleFlags[LifecycleFlags["persistentBindingFlags"] = 2080374799] = "persistentBindingFlags";
    LifecycleFlags[LifecycleFlags["allowParentScopeTraversal"] = 67108864] = "allowParentScopeTraversal";
    LifecycleFlags[LifecycleFlags["observeLeafPropertiesOnly"] = 134217728] = "observeLeafPropertiesOnly";
    LifecycleFlags[LifecycleFlags["targetObserverFlags"] = 805306383] = "targetObserverFlags";
    LifecycleFlags[LifecycleFlags["noTargetObserverQueue"] = 268435456] = "noTargetObserverQueue";
    LifecycleFlags[LifecycleFlags["persistentTargetObserverQueue"] = 536870912] = "persistentTargetObserverQueue";
    LifecycleFlags[LifecycleFlags["secondaryExpression"] = 1073741824] = "secondaryExpression";
    LifecycleFlags[LifecycleFlags["bindingStrategy"] = 15] = "bindingStrategy";
    LifecycleFlags[LifecycleFlags["getterSetterStrategy"] = 1] = "getterSetterStrategy";
    LifecycleFlags[LifecycleFlags["proxyStrategy"] = 2] = "proxyStrategy";
    LifecycleFlags[LifecycleFlags["isStrictBindingStrategy"] = 4] = "isStrictBindingStrategy";
    LifecycleFlags[LifecycleFlags["update"] = 48] = "update";
    LifecycleFlags[LifecycleFlags["updateTargetInstance"] = 16] = "updateTargetInstance";
    LifecycleFlags[LifecycleFlags["updateSourceExpression"] = 32] = "updateSourceExpression";
    LifecycleFlags[LifecycleFlags["from"] = 524224] = "from";
    LifecycleFlags[LifecycleFlags["fromFlush"] = 960] = "fromFlush";
    LifecycleFlags[LifecycleFlags["fromAsyncFlush"] = 64] = "fromAsyncFlush";
    LifecycleFlags[LifecycleFlags["fromSyncFlush"] = 128] = "fromSyncFlush";
    LifecycleFlags[LifecycleFlags["fromTick"] = 256] = "fromTick";
    LifecycleFlags[LifecycleFlags["fromBatch"] = 512] = "fromBatch";
    LifecycleFlags[LifecycleFlags["fromStartTask"] = 1024] = "fromStartTask";
    LifecycleFlags[LifecycleFlags["fromStopTask"] = 2048] = "fromStopTask";
    LifecycleFlags[LifecycleFlags["fromBind"] = 4096] = "fromBind";
    LifecycleFlags[LifecycleFlags["fromUnbind"] = 8192] = "fromUnbind";
    LifecycleFlags[LifecycleFlags["fromAttach"] = 16384] = "fromAttach";
    LifecycleFlags[LifecycleFlags["fromDetach"] = 32768] = "fromDetach";
    LifecycleFlags[LifecycleFlags["fromCache"] = 65536] = "fromCache";
    LifecycleFlags[LifecycleFlags["fromDOMEvent"] = 131072] = "fromDOMEvent";
    LifecycleFlags[LifecycleFlags["fromLifecycleTask"] = 262144] = "fromLifecycleTask";
    LifecycleFlags[LifecycleFlags["allowPublishRoundtrip"] = 524288] = "allowPublishRoundtrip";
    LifecycleFlags[LifecycleFlags["isPublishing"] = 1048576] = "isPublishing";
    LifecycleFlags[LifecycleFlags["mustEvaluate"] = 2097152] = "mustEvaluate";
    LifecycleFlags[LifecycleFlags["isTraversingParentScope"] = 4194304] = "isTraversingParentScope";
    LifecycleFlags[LifecycleFlags["isOriginalArray"] = 8388608] = "isOriginalArray";
    LifecycleFlags[LifecycleFlags["isCollectionMutation"] = 16777216] = "isCollectionMutation";
    LifecycleFlags[LifecycleFlags["reorderNodes"] = 33554432] = "reorderNodes";
})(LifecycleFlags || (LifecycleFlags = {}));
var ExpressionKind;
(function (ExpressionKind) {
    ExpressionKind[ExpressionKind["Connects"] = 32] = "Connects";
    ExpressionKind[ExpressionKind["Observes"] = 64] = "Observes";
    ExpressionKind[ExpressionKind["CallsFunction"] = 128] = "CallsFunction";
    ExpressionKind[ExpressionKind["HasAncestor"] = 256] = "HasAncestor";
    ExpressionKind[ExpressionKind["IsPrimary"] = 512] = "IsPrimary";
    ExpressionKind[ExpressionKind["IsLeftHandSide"] = 1024] = "IsLeftHandSide";
    ExpressionKind[ExpressionKind["HasBind"] = 2048] = "HasBind";
    ExpressionKind[ExpressionKind["HasUnbind"] = 4096] = "HasUnbind";
    ExpressionKind[ExpressionKind["IsAssignable"] = 8192] = "IsAssignable";
    ExpressionKind[ExpressionKind["IsLiteral"] = 16384] = "IsLiteral";
    ExpressionKind[ExpressionKind["IsResource"] = 32768] = "IsResource";
    ExpressionKind[ExpressionKind["IsForDeclaration"] = 65536] = "IsForDeclaration";
    ExpressionKind[ExpressionKind["Type"] = 31] = "Type";
    // ---------------------------------------------------------------------------------------------------------------------------
    ExpressionKind[ExpressionKind["AccessThis"] = 1793] = "AccessThis";
    ExpressionKind[ExpressionKind["AccessScope"] = 10082] = "AccessScope";
    ExpressionKind[ExpressionKind["ArrayLiteral"] = 17955] = "ArrayLiteral";
    ExpressionKind[ExpressionKind["ObjectLiteral"] = 17956] = "ObjectLiteral";
    ExpressionKind[ExpressionKind["PrimitiveLiteral"] = 17925] = "PrimitiveLiteral";
    ExpressionKind[ExpressionKind["Template"] = 17958] = "Template";
    ExpressionKind[ExpressionKind["Unary"] = 39] = "Unary";
    ExpressionKind[ExpressionKind["CallScope"] = 1448] = "CallScope";
    ExpressionKind[ExpressionKind["CallMember"] = 1161] = "CallMember";
    ExpressionKind[ExpressionKind["CallFunction"] = 1162] = "CallFunction";
    ExpressionKind[ExpressionKind["AccessMember"] = 9323] = "AccessMember";
    ExpressionKind[ExpressionKind["AccessKeyed"] = 9324] = "AccessKeyed";
    ExpressionKind[ExpressionKind["TaggedTemplate"] = 1197] = "TaggedTemplate";
    ExpressionKind[ExpressionKind["Binary"] = 46] = "Binary";
    ExpressionKind[ExpressionKind["Conditional"] = 63] = "Conditional";
    ExpressionKind[ExpressionKind["Assign"] = 8208] = "Assign";
    ExpressionKind[ExpressionKind["ValueConverter"] = 36913] = "ValueConverter";
    ExpressionKind[ExpressionKind["BindingBehavior"] = 38962] = "BindingBehavior";
    ExpressionKind[ExpressionKind["HtmlLiteral"] = 51] = "HtmlLiteral";
    ExpressionKind[ExpressionKind["ArrayBindingPattern"] = 65556] = "ArrayBindingPattern";
    ExpressionKind[ExpressionKind["ObjectBindingPattern"] = 65557] = "ObjectBindingPattern";
    ExpressionKind[ExpressionKind["BindingIdentifier"] = 65558] = "BindingIdentifier";
    ExpressionKind[ExpressionKind["ForOfStatement"] = 6199] = "ForOfStatement";
    ExpressionKind[ExpressionKind["Interpolation"] = 24] = "Interpolation"; //
})(ExpressionKind || (ExpressionKind = {}));

/** @internal */
var SubscriberFlags;
(function (SubscriberFlags) {
    SubscriberFlags[SubscriberFlags["None"] = 0] = "None";
    SubscriberFlags[SubscriberFlags["Subscriber0"] = 1] = "Subscriber0";
    SubscriberFlags[SubscriberFlags["Subscriber1"] = 2] = "Subscriber1";
    SubscriberFlags[SubscriberFlags["Subscriber2"] = 4] = "Subscriber2";
    SubscriberFlags[SubscriberFlags["SubscribersRest"] = 8] = "SubscribersRest";
    SubscriberFlags[SubscriberFlags["Any"] = 15] = "Any";
})(SubscriberFlags || (SubscriberFlags = {}));
var DelegationStrategy;
(function (DelegationStrategy) {
    DelegationStrategy[DelegationStrategy["none"] = 0] = "none";
    DelegationStrategy[DelegationStrategy["capturing"] = 1] = "capturing";
    DelegationStrategy[DelegationStrategy["bubbling"] = 2] = "bubbling";
})(DelegationStrategy || (DelegationStrategy = {}));
var CollectionKind;
(function (CollectionKind) {
    CollectionKind[CollectionKind["indexed"] = 8] = "indexed";
    CollectionKind[CollectionKind["keyed"] = 4] = "keyed";
    CollectionKind[CollectionKind["array"] = 9] = "array";
    CollectionKind[CollectionKind["map"] = 6] = "map";
    CollectionKind[CollectionKind["set"] = 7] = "set";
})(CollectionKind || (CollectionKind = {}));
function createIndexMap(length = 0) {
    const arr = Array(length);
    let i = 0;
    while (i < length) {
        arr[i] = i++;
    }
    arr.deletedItems = [];
    arr.isIndexMap = true;
    return arr;
}

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let CollectionLengthObserver = class CollectionLengthObserver {
    constructor(obj) {
        this.obj = obj;
        this.currentValue = obj.length;
    }
    getValue() {
        return this.obj.length;
    }
    setValue(newValue, flags) {
        const { currentValue } = this;
        if (newValue !== currentValue) {
            this.currentValue = newValue;
            this.callSubscribers(newValue, currentValue, flags | 16 /* updateTargetInstance */);
        }
    }
};
CollectionLengthObserver = __decorate$5([
    subscriberCollection(),
    __metadata$5("design:paramtypes", [Array])
], CollectionLengthObserver);

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const observerLookup = new WeakMap();
// https://tc39.github.io/ecma262/#sec-sortcompare
function sortCompare(x, y) {
    if (x === y) {
        return 0;
    }
    x = x === null ? 'null' : x.toString();
    y = y === null ? 'null' : y.toString();
    return x < y ? -1 : 1;
}
function preSortCompare(x, y) {
    if (x === void 0) {
        if (y === void 0) {
            return 0;
        }
        else {
            return 1;
        }
    }
    if (y === void 0) {
        return -1;
    }
    return 0;
}
function insertionSort(arr, indexMap, from, to, compareFn) {
    let velement, ielement, vtmp, itmp, order;
    let i, j;
    for (i = from + 1; i < to; i++) {
        velement = arr[i];
        ielement = indexMap[i];
        for (j = i - 1; j >= from; j--) {
            vtmp = arr[j];
            itmp = indexMap[j];
            order = compareFn(vtmp, velement);
            if (order > 0) {
                arr[j + 1] = vtmp;
                indexMap[j + 1] = itmp;
            }
            else {
                break;
            }
        }
        arr[j + 1] = velement;
        indexMap[j + 1] = ielement;
    }
}
function quickSort(arr, indexMap, from, to, compareFn) {
    let thirdIndex = 0, i = 0;
    let v0, v1, v2;
    let i0, i1, i2;
    let c01, c02, c12;
    let vtmp, itmp;
    let vpivot, ipivot, lowEnd, highStart;
    let velement, ielement, order, vtopElement;
    // eslint-disable-next-line no-constant-condition
    while (true) {
        if (to - from <= 10) {
            insertionSort(arr, indexMap, from, to, compareFn);
            return;
        }
        thirdIndex = from + ((to - from) >> 1);
        v0 = arr[from];
        i0 = indexMap[from];
        v1 = arr[to - 1];
        i1 = indexMap[to - 1];
        v2 = arr[thirdIndex];
        i2 = indexMap[thirdIndex];
        c01 = compareFn(v0, v1);
        if (c01 > 0) {
            vtmp = v0;
            itmp = i0;
            v0 = v1;
            i0 = i1;
            v1 = vtmp;
            i1 = itmp;
        }
        c02 = compareFn(v0, v2);
        if (c02 >= 0) {
            vtmp = v0;
            itmp = i0;
            v0 = v2;
            i0 = i2;
            v2 = v1;
            i2 = i1;
            v1 = vtmp;
            i1 = itmp;
        }
        else {
            c12 = compareFn(v1, v2);
            if (c12 > 0) {
                vtmp = v1;
                itmp = i1;
                v1 = v2;
                i1 = i2;
                v2 = vtmp;
                i2 = itmp;
            }
        }
        arr[from] = v0;
        indexMap[from] = i0;
        arr[to - 1] = v2;
        indexMap[to - 1] = i2;
        vpivot = v1;
        ipivot = i1;
        lowEnd = from + 1;
        highStart = to - 1;
        arr[thirdIndex] = arr[lowEnd];
        indexMap[thirdIndex] = indexMap[lowEnd];
        arr[lowEnd] = vpivot;
        indexMap[lowEnd] = ipivot;
        partition: for (i = lowEnd + 1; i < highStart; i++) {
            velement = arr[i];
            ielement = indexMap[i];
            order = compareFn(velement, vpivot);
            if (order < 0) {
                arr[i] = arr[lowEnd];
                indexMap[i] = indexMap[lowEnd];
                arr[lowEnd] = velement;
                indexMap[lowEnd] = ielement;
                lowEnd++;
            }
            else if (order > 0) {
                do {
                    highStart--;
                    // eslint-disable-next-line eqeqeq
                    if (highStart == i) {
                        break partition;
                    }
                    vtopElement = arr[highStart];
                    order = compareFn(vtopElement, vpivot);
                } while (order > 0);
                arr[i] = arr[highStart];
                indexMap[i] = indexMap[highStart];
                arr[highStart] = velement;
                indexMap[highStart] = ielement;
                if (order < 0) {
                    velement = arr[i];
                    ielement = indexMap[i];
                    arr[i] = arr[lowEnd];
                    indexMap[i] = indexMap[lowEnd];
                    arr[lowEnd] = velement;
                    indexMap[lowEnd] = ielement;
                    lowEnd++;
                }
            }
        }
        if (to - highStart < lowEnd - from) {
            quickSort(arr, indexMap, highStart, to, compareFn);
            to = lowEnd;
        }
        else {
            quickSort(arr, indexMap, from, lowEnd, compareFn);
            from = highStart;
        }
    }
}
const proto = Array.prototype;
const $push = proto.push;
const $unshift = proto.unshift;
const $pop = proto.pop;
const $shift = proto.shift;
const $splice = proto.splice;
const $reverse = proto.reverse;
const $sort = proto.sort;
const methods = ['push', 'unshift', 'pop', 'shift', 'splice', 'reverse', 'sort'];
const observe = {
    // https://tc39.github.io/ecma262/#sec-array.prototype.push
    push: function (...args) {
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            return $push.apply($this, args);
        }
        const len = $this.length;
        const argCount = args.length;
        if (argCount === 0) {
            return len;
        }
        $this.length = o.indexMap.length = len + argCount;
        let i = len;
        while (i < $this.length) {
            $this[i] = args[i - len];
            o.indexMap[i] = -2;
            i++;
        }
        o.notify();
        return $this.length;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.unshift
    unshift: function (...args) {
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            return $unshift.apply($this, args);
        }
        const argCount = args.length;
        const inserts = new Array(argCount);
        let i = 0;
        while (i < argCount) {
            inserts[i++] = -2;
        }
        $unshift.apply(o.indexMap, inserts);
        const len = $unshift.apply($this, args);
        o.notify();
        return len;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.pop
    pop: function () {
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            return $pop.call($this);
        }
        const indexMap = o.indexMap;
        const element = $pop.call($this);
        // only mark indices as deleted if they actually existed in the original array
        const index = indexMap.length - 1;
        if (indexMap[index] > -1) {
            indexMap.deletedItems.push(indexMap[index]);
        }
        $pop.call(indexMap);
        o.notify();
        return element;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.shift
    shift: function () {
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            return $shift.call($this);
        }
        const indexMap = o.indexMap;
        const element = $shift.call($this);
        // only mark indices as deleted if they actually existed in the original array
        if (indexMap[0] > -1) {
            indexMap.deletedItems.push(indexMap[0]);
        }
        $shift.call(indexMap);
        o.notify();
        return element;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.splice
    splice: function (...args) {
        const start = args[0];
        const deleteCount = args[1];
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            return $splice.apply($this, args);
        }
        const len = this.length;
        const relativeStart = start | 0;
        const actualStart = relativeStart < 0 ? Math.max((len + relativeStart), 0) : Math.min(relativeStart, len);
        const indexMap = o.indexMap;
        const argCount = args.length;
        const actualDeleteCount = argCount === 0 ? 0 : argCount === 1 ? len - actualStart : deleteCount;
        if (actualDeleteCount > 0) {
            let i = actualStart;
            const to = i + actualDeleteCount;
            while (i < to) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                i++;
            }
        }
        if (argCount > 2) {
            const itemCount = argCount - 2;
            const inserts = new Array(itemCount);
            let i = 0;
            while (i < itemCount) {
                inserts[i++] = -2;
            }
            $splice.call(indexMap, start, deleteCount, ...inserts);
        }
        else {
            $splice.apply(indexMap, args);
        }
        const deleted = $splice.apply($this, args);
        o.notify();
        return deleted;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
    reverse: function () {
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            $reverse.call($this);
            return this;
        }
        const len = $this.length;
        const middle = (len / 2) | 0;
        let lower = 0;
        while (lower !== middle) {
            const upper = len - lower - 1;
            const lowerValue = $this[lower];
            const lowerIndex = o.indexMap[lower];
            const upperValue = $this[upper];
            const upperIndex = o.indexMap[upper];
            $this[lower] = upperValue;
            o.indexMap[lower] = upperIndex;
            $this[upper] = lowerValue;
            o.indexMap[upper] = lowerIndex;
            lower++;
        }
        o.notify();
        return this;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.sort
    // https://github.com/v8/v8/blob/master/src/js/array.js
    sort: function (compareFn) {
        let $this = this;
        if ($this.$raw !== void 0) {
            $this = $this.$raw;
        }
        const o = observerLookup.get($this);
        if (o === void 0) {
            $sort.call($this, compareFn);
            return this;
        }
        const len = $this.length;
        if (len < 2) {
            return this;
        }
        quickSort($this, o.indexMap, 0, len, preSortCompare);
        let i = 0;
        while (i < len) {
            if ($this[i] === void 0) {
                break;
            }
            i++;
        }
        if (compareFn === void 0 || typeof compareFn !== 'function' /* spec says throw a TypeError, should we do that too? */) {
            compareFn = sortCompare;
        }
        quickSort($this, o.indexMap, 0, i, compareFn);
        o.notify();
        return this;
    }
};
const descriptorProps = {
    writable: true,
    enumerable: false,
    configurable: true
};
const def$1 = Reflect.defineProperty;
for (const method of methods) {
    def$1(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });
}
let enableArrayObservationCalled = false;
function enableArrayObservation() {
    for (const method of methods) {
        if (proto[method].observing !== true) {
            def$1(proto, method, { ...descriptorProps, value: observe[method] });
        }
    }
}
let ArrayObserver = class ArrayObserver {
    constructor(flags, lifecycle, array) {
        if (!enableArrayObservationCalled) {
            enableArrayObservationCalled = true;
            enableArrayObservation();
        }
        this.inBatch = false;
        this.indexObservers = {};
        this.collection = array;
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        this.indexMap = createIndexMap(array.length);
        this.lifecycle = lifecycle;
        this.lengthObserver = (void 0);
        observerLookup.set(array, this);
    }
    notify() {
        if (this.lifecycle.batch.depth > 0) {
            if (!this.inBatch) {
                this.inBatch = true;
                this.lifecycle.batch.add(this);
            }
        }
        else {
            this.flushBatch(0 /* none */);
        }
    }
    getLengthObserver() {
        if (this.lengthObserver === void 0) {
            this.lengthObserver = new CollectionLengthObserver(this.collection);
        }
        return this.lengthObserver;
    }
    getIndexObserver(index) {
        return this.getOrCreateIndexObserver(index);
    }
    flushBatch(flags) {
        this.inBatch = false;
        const indexMap = this.indexMap;
        const length = this.collection.length;
        this.indexMap = createIndexMap(length);
        this.callCollectionSubscribers(indexMap, 16 /* updateTargetInstance */ | this.persistentFlags);
        if (this.lengthObserver !== void 0) {
            this.lengthObserver.setValue(length, 16 /* updateTargetInstance */);
        }
    }
    /**
     * @internal used by friend class ArrayIndexObserver only
     */
    addIndexObserver(indexObserver) {
        this.addCollectionSubscriber(indexObserver);
    }
    /**
     * @internal used by friend class ArrayIndexObserver only
     */
    removeIndexObserver(indexObserver) {
        this.removeCollectionSubscriber(indexObserver);
    }
    /**
     * @internal
     */
    getOrCreateIndexObserver(index) {
        const indexObservers = this.indexObservers;
        let observer = indexObservers[index];
        if (observer === void 0) {
            observer = indexObservers[index] = new ArrayIndexObserver(this, index);
        }
        return observer;
    }
};
ArrayObserver = __decorate$6([
    collectionSubscriberCollection(),
    __metadata$6("design:paramtypes", [Number, Object, Object])
], ArrayObserver);
let ArrayIndexObserver = class ArrayIndexObserver {
    constructor(owner, index) {
        this.owner = owner;
        this.index = index;
        this.subscriberCount = 0;
        this.currentValue = this.getValue();
    }
    getValue() {
        return this.owner.collection[this.index];
    }
    setValue(newValue, flags) {
        if (newValue === this.getValue()) {
            return;
        }
        const arrayObserver = this.owner;
        const index = this.index;
        const indexMap = arrayObserver.indexMap;
        if (indexMap[index] > -1) {
            indexMap.deletedItems.push(indexMap[index]);
        }
        indexMap[index] = -2;
        // do not need to update current value here
        // as it will be updated inside handle collection change
        arrayObserver.collection[index] = newValue;
        arrayObserver.notify();
    }
    /**
     * From interface `ICollectionSubscriber`
     */
    handleCollectionChange(indexMap, flags) {
        const index = this.index;
        const noChange = indexMap[index] === index;
        if (noChange) {
            return;
        }
        const prevValue = this.currentValue;
        const currValue = this.currentValue = this.getValue();
        // hmm
        if (prevValue !== currValue) {
            this.callSubscribers(currValue, prevValue, flags);
        }
    }
    subscribe(subscriber) {
        if (this.addSubscriber(subscriber) && ++this.subscriberCount === 1) {
            this.owner.addIndexObserver(this);
        }
    }
    unsubscribe(subscriber) {
        if (this.removeSubscriber(subscriber) && --this.subscriberCount === 0) {
            this.owner.removeIndexObserver(this);
        }
    }
};
ArrayIndexObserver = __decorate$6([
    subscriberCollection(),
    __metadata$6("design:paramtypes", [ArrayObserver, Number])
], ArrayIndexObserver);
function getArrayObserver(flags, lifecycle, array) {
    const observer = observerLookup.get(array);
    if (observer === void 0) {
        return new ArrayObserver(flags, lifecycle, array);
    }
    return observer;
}
/**
 * Applies offsets to the non-negative indices in the IndexMap
 * based on added and deleted items relative to those indices.
 *
 * e.g. turn `[-2, 0, 1]` into `[-2, 1, 2]`, allowing the values at the indices to be
 * used for sorting/reordering items if needed
 */
function applyMutationsToIndices(indexMap) {
    let offset = 0;
    let j = 0;
    const len = indexMap.length;
    for (let i = 0; i < len; ++i) {
        while (indexMap.deletedItems[j] <= i - offset) {
            ++j;
            --offset;
        }
        if (indexMap[i] === -2) {
            ++offset;
        }
        else {
            indexMap[i] += offset;
        }
    }
}
/**
 * After `applyMutationsToIndices`, this function can be used to reorder items in a derived
 * array (e.g.  the items in the `views` in the repeater are derived from the `items` property)
 */
function synchronizeIndices(items, indexMap) {
    const copy = items.slice();
    const len = indexMap.length;
    let to = 0;
    let from = 0;
    while (to < len) {
        from = indexMap[to];
        if (from !== -2) {
            items[to] = copy[from];
        }
        ++to;
    }
}

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
function computed(config) {
    return function (target, key) {
        /**
         * The 'computed' property defined on prototype needs to be non-enumerable to prevent getting this in loops,
         * iterating over object properties, such as for..in.
         *
         * The 'value' of the property should not have any prototype. Otherwise if by mistake the target passed
         * here is `Object`, then we are in soup. Because then every instance of `Object` will have the `computed`
         * property, including the `value` (in the descriptor of the property), when assigned `{}`. This might
         * lead to infinite recursion for the cases as mentioned above.
         */
        if (target.computed == null) {
            Reflect.defineProperty(target, 'computed', {
                writable: true,
                configurable: true,
                enumerable: false,
                value: Object.create(null)
            });
        }
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        target.computed[key] = config;
    };
}
const computedOverrideDefaults = { static: false, volatile: false };
/* @internal */
function createComputedObserver(flags, observerLocator, dirtyChecker, lifecycle, instance, propertyName, descriptor) {
    if (descriptor.configurable === false) {
        return dirtyChecker.createProperty(instance, propertyName);
    }
    if (descriptor.get != null) {
        const { constructor: { prototype: { computed: givenOverrides } } } = instance;
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unnecessary-type-assertion
        const overrides = givenOverrides && givenOverrides[propertyName] || computedOverrideDefaults;
        if (descriptor.set != null) {
            if (overrides.volatile) {
                return new GetterObserver(flags, overrides, instance, propertyName, descriptor, observerLocator);
            }
            return new CustomSetterObserver(instance, propertyName, descriptor);
        }
        return new GetterObserver(flags, overrides, instance, propertyName, descriptor, observerLocator);
    }
    throw Reporter.error(18, propertyName);
}
// Used when the getter is dependent solely on changes that happen within the setter.
let CustomSetterObserver = class CustomSetterObserver {
    constructor(obj, propertyKey, descriptor) {
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.descriptor = descriptor;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.observing = false;
    }
    setValue(newValue) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unnecessary-type-assertion
        this.descriptor.set.call(this.obj, newValue); // Non-null is implied because descriptors without setters won't end up here
        if (this.currentValue !== newValue) {
            this.oldValue = this.currentValue;
            this.currentValue = newValue;
            this.callSubscribers(newValue, this.oldValue, 16 /* updateTargetInstance */);
        }
    }
    subscribe(subscriber) {
        if (!this.observing) {
            this.convertProperty();
        }
        this.addSubscriber(subscriber);
    }
    unsubscribe(subscriber) {
        this.removeSubscriber(subscriber);
    }
    convertProperty() {
        this.observing = true;
        this.currentValue = this.obj[this.propertyKey];
        const set = (newValue) => { this.setValue(newValue); };
        Reflect.defineProperty(this.obj, this.propertyKey, { set, get: this.descriptor.get });
    }
};
CustomSetterObserver = __decorate$7([
    subscriberCollection(),
    __metadata$7("design:paramtypes", [Object, String, Object])
], CustomSetterObserver);
// Used when there is no setter, and the getter is dependent on other properties of the object;
// Used when there is a setter but the value of the getter can change based on properties set outside of the setter.
let GetterObserver = class GetterObserver {
    constructor(flags, overrides, obj, propertyKey, descriptor, observerLocator) {
        this.overrides = overrides;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.descriptor = descriptor;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.propertyDeps = [];
        this.collectionDeps = [];
        this.subscriberCount = 0;
        this.isCollecting = false;
        this.proxy = new Proxy(obj, createGetterTraps(flags, observerLocator, this));
        const get = () => this.getValue();
        Reflect.defineProperty(obj, propertyKey, { get, set: descriptor.set });
    }
    addPropertyDep(subscribable) {
        if (!this.propertyDeps.includes(subscribable)) {
            this.propertyDeps.push(subscribable);
        }
    }
    addCollectionDep(subscribable) {
        if (!this.collectionDeps.includes(subscribable)) {
            this.collectionDeps.push(subscribable);
        }
    }
    getValue() {
        if (this.subscriberCount > 0 || this.isCollecting) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.currentValue = Reflect.apply(this.descriptor.get, this.proxy, PLATFORM.emptyArray); // Non-null is implied because descriptors without getters won't end up here
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.currentValue = Reflect.apply(this.descriptor.get, this.obj, PLATFORM.emptyArray); // Non-null is implied because descriptors without getters won't end up here
        }
        return this.currentValue;
    }
    subscribe(subscriber) {
        this.addSubscriber(subscriber);
        if (++this.subscriberCount === 1) {
            this.getValueAndCollectDependencies(true);
        }
    }
    unsubscribe(subscriber) {
        this.removeSubscriber(subscriber);
        if (--this.subscriberCount === 0) {
            this.unsubscribeAllDependencies();
        }
    }
    handleChange() {
        const oldValue = this.currentValue;
        const newValue = this.getValueAndCollectDependencies(false);
        if (oldValue !== newValue) {
            this.callSubscribers(newValue, oldValue, 16 /* updateTargetInstance */);
        }
    }
    handleCollectionChange() {
        const oldValue = this.currentValue;
        const newValue = this.getValueAndCollectDependencies(false);
        if (oldValue !== newValue) {
            this.callSubscribers(newValue, oldValue, 16 /* updateTargetInstance */);
        }
    }
    getValueAndCollectDependencies(requireCollect) {
        const dynamicDependencies = !this.overrides.static || requireCollect;
        if (dynamicDependencies) {
            this.unsubscribeAllDependencies();
            this.isCollecting = true;
        }
        this.currentValue = this.getValue();
        if (dynamicDependencies) {
            this.propertyDeps.forEach(x => { x.subscribe(this); });
            this.collectionDeps.forEach(x => { x.subscribeToCollection(this); });
            this.isCollecting = false;
        }
        return this.currentValue;
    }
    doNotCollect(target, key, receiver) {
        return !this.isCollecting
            || key === '$observers'
            || key === '$synthetic'
            || key === 'constructor';
    }
    unsubscribeAllDependencies() {
        this.propertyDeps.forEach(x => { x.unsubscribe(this); });
        this.propertyDeps.length = 0;
        this.collectionDeps.forEach(x => { x.unsubscribeFromCollection(this); });
        this.collectionDeps.length = 0;
    }
};
GetterObserver = __decorate$7([
    subscriberCollection(),
    __metadata$7("design:paramtypes", [Number, Object, Object, String, Object, Object])
], GetterObserver);
const toStringTag$1 = Object.prototype.toString;
/**
 * _@param observer The owning observer of current evaluation, will subscribe to all observers created via proxy
 */
function createGetterTraps(flags, observerLocator, observer) {
    return {
        get: function (target, key, receiver) {
            if (observer.doNotCollect(target, key, receiver)) {
                return Reflect.get(target, key, receiver);
            }
            // The length and iterator properties need to be invoked on the original object
            // (for Map and Set at least) or they will throw.
            switch (toStringTag$1.call(target)) {
                case '[object Array]':
                    if (key === 'length' || isArrayIndex(key)) {
                        observer.addCollectionDep(observerLocator.getArrayObserver(flags, target));
                        return proxyOrValue(flags, target, key, observerLocator, observer);
                    }
                    break;
                case '[object Map]':
                    if (key === 'size') {
                        observer.addCollectionDep(observerLocator.getMapObserver(flags, target));
                        return Reflect.get(target, key, target);
                    }
                    break;
                case '[object Set]':
                    if (key === 'size') {
                        observer.addCollectionDep(observerLocator.getSetObserver(flags, target));
                        return Reflect.get(target, key, target);
                    }
                    break;
            }
            observer.addPropertyDep(observerLocator.getObserver(flags, target, key));
            return proxyOrValue(flags, target, key, observerLocator, observer);
        }
    };
}
/**
 * _@param observer The owning observer of current evaluation, will subscribe to all observers created via proxy
 */
function proxyOrValue(flags, target, key, observerLocator, observer) {
    const value = Reflect.get(target, key, target);
    if (typeof value !== 'object' || typeof value === 'function' || value === null) {
        return value;
    }
    return new Proxy(value, createGetterTraps(flags, observerLocator, observer));
}

const defaultNow = PLATFORM.now.bind(PLATFORM);
const Now = DI.createInterface('Now').withDefault(x => x.instance(defaultNow));

var TaskQueuePriority;
(function (TaskQueuePriority) {
    TaskQueuePriority[TaskQueuePriority["microTask"] = 0] = "microTask";
    TaskQueuePriority[TaskQueuePriority["render"] = 1] = "render";
    TaskQueuePriority[TaskQueuePriority["macroTask"] = 2] = "macroTask";
    TaskQueuePriority[TaskQueuePriority["postRender"] = 3] = "postRender";
    TaskQueuePriority[TaskQueuePriority["idle"] = 4] = "idle";
})(TaskQueuePriority || (TaskQueuePriority = {}));
const defaultQueueTaskOptions = {
    delay: 0,
    preempt: false,
    priority: 1 /* render */,
    persistent: false,
    reusable: true,
};
let $resolve;
let $reject;
function executor(resolve, reject) {
    $resolve = resolve;
    $reject = reject;
}
function createExposedPromise() {
    const p = new Promise(executor);
    p.resolve = $resolve;
    p.reject = $reject;
    return p;
}

class TaskAbortError extends Error {
    constructor(task) {
        super('Task was canceled.');
        this.task = task;
    }
}
let id = 0;
class Task {
    constructor(taskQueue, createdTime, queueTime, preempt, persistent, reusable, callback) {
        this.taskQueue = taskQueue;
        this.createdTime = createdTime;
        this.queueTime = queueTime;
        this.preempt = preempt;
        this.persistent = persistent;
        this.reusable = reusable;
        this.callback = callback;
        this.id = ++id;
        this.next = void 0;
        this.prev = void 0;
        this.resolve = void 0;
        this.reject = void 0;
        this._result = void 0;
        this._status = 'pending';
        this.priority = taskQueue.priority;
    }
    get result() {
        const result = this._result;
        if (result === void 0) {
            switch (this._status) {
                case 'pending': {
                    const promise = this._result = createExposedPromise();
                    this.resolve = promise.resolve;
                    this.reject = promise.reject;
                    return promise;
                }
                case 'running':
                    throw new Error('Trying to await task from within task will cause a deadlock.');
                case 'completed':
                    return this._result = Promise.resolve();
                case 'canceled':
                    return this._result = Promise.reject(new TaskAbortError(this));
            }
        }
        return result;
    }
    get status() {
        return this._status;
    }
    run() {
        if (this._status !== 'pending') {
            throw new Error(`Cannot run task in ${this._status} state`);
        }
        // this.persistent could be changed while the task is running (this can only be done by the task itself if canceled, and is a valid way of stopping a loop)
        // so we deliberately reference this.persistent instead of the local variable, but we keep it around to know whether the task *was* persistent before running it,
        // so we can set the correct cancelation state.
        const persistent = this.persistent;
        const reusable = this.reusable;
        const taskQueue = this.taskQueue;
        const callback = this.callback;
        const resolve = this.resolve;
        const reject = this.reject;
        const createdTime = this.createdTime;
        taskQueue.remove(this);
        this._status = 'running';
        try {
            const ret = callback(taskQueue.now() - createdTime);
            if (this.persistent) {
                taskQueue.resetPersistentTask(this);
            }
            else if (persistent) {
                // Persistent tasks never reach completed status. They're either pending, running, or canceled.
                this._status = 'canceled';
            }
            else {
                this._status = 'completed';
            }
            if (resolve !== void 0) {
                resolve(ret);
            }
        }
        catch (err) {
            if (reject !== void 0) {
                reject(err);
            }
            else {
                throw err;
            }
        }
        finally {
            if (!this.persistent) {
                this.dispose();
                if (reusable) {
                    taskQueue.returnToPool(this);
                }
            }
        }
    }
    cancel() {
        if (this._status === 'pending') {
            const taskQueue = this.taskQueue;
            const reusable = this.reusable;
            const reject = this.reject;
            taskQueue.remove(this);
            if (taskQueue.isEmpty) {
                taskQueue.cancel();
            }
            this._status = 'canceled';
            if (reject !== void 0) {
                reject(new TaskAbortError(this));
            }
            this.dispose();
            if (reusable) {
                taskQueue.returnToPool(this);
            }
            return true;
        }
        else if (this._status === 'running' && this.persistent) {
            this.persistent = false;
            return true;
        }
        return false;
    }
    reset(time) {
        const delay = this.queueTime - this.createdTime;
        this.createdTime = time;
        this.queueTime = time + delay;
        this._status = 'pending';
        this.resolve = void 0;
        this.reject = void 0;
        this._result = void 0;
    }
    reuse(time, delay, preempt, persistent, callback) {
        this.createdTime = time;
        this.queueTime = time + delay;
        this.preempt = preempt;
        this.persistent = persistent;
        this.callback = callback;
        this._status = 'pending';
    }
    dispose() {
        this.prev = void 0;
        this.next = void 0;
        this.callback = (void 0);
        this.resolve = void 0;
        this.reject = void 0;
        this._result = void 0;
    }
}

class TaskQueue {
    constructor(now, priority, scheduler, flushRequestorFactory) {
        this.now = now;
        this.priority = priority;
        this.scheduler = scheduler;
        this.processingSize = 0;
        this.processingHead = void 0;
        this.processingTail = void 0;
        this.pendingSize = 0;
        this.pendingHead = void 0;
        this.pendingTail = void 0;
        this.delayedSize = 0;
        this.delayedHead = void 0;
        this.delayedTail = void 0;
        this.flushRequested = false;
        this.yieldPromise = void 0;
        this.taskPool = [];
        this.taskPoolSize = 0;
        this.lastRequest = 0;
        this.microTaskRequestFlushTask = null;
        this.flushRequestor = flushRequestorFactory.create(this);
        this.requestFlush = this.requestFlush.bind(this);
    }
    get isEmpty() {
        return this.processingSize === 0 && this.pendingSize === 0 && this.delayedSize === 0;
    }
    flush() {
        if (this.microTaskRequestFlushTask !== null) {
            this.microTaskRequestFlushTask.cancel();
            this.microTaskRequestFlushTask = null;
        }
        this.flushRequested = false;
        if (this.pendingSize > 0) {
            this.movePendingToProcessing();
        }
        if (this.delayedSize > 0) {
            this.moveDelayedToProcessing();
        }
        while (this.processingSize > 0) {
            this.processingHead.run();
        }
        if (this.pendingSize > 0) {
            this.movePendingToProcessing();
        }
        if (this.delayedSize > 0) {
            this.moveDelayedToProcessing();
        }
        if (this.processingSize > 0) {
            this.requestFlush();
        }
        else if (this.delayedSize > 0) {
            if (this.priority <= 0 /* microTask */) {
                // MicroTasks are not clamped so we have to clamp them with setTimeout or they'll block forever
                this.microTaskRequestFlushTask = this.scheduler.getTaskQueue(2 /* macroTask */).queueTask(this.requestFlush);
            }
            else {
                // Otherwise just let this queue handle itself
                this.requestFlush();
            }
        }
        if (this.yieldPromise !== void 0) {
            let noMoreFiniteWork = true;
            let cur = this.processingHead;
            while (cur !== void 0) {
                if (!cur.persistent) {
                    noMoreFiniteWork = false;
                    break;
                }
                cur = cur.next;
            }
            if (noMoreFiniteWork) {
                cur = this.pendingHead;
                while (cur !== void 0) {
                    if (!cur.persistent) {
                        noMoreFiniteWork = false;
                        break;
                    }
                    cur = cur.next;
                }
            }
            if (noMoreFiniteWork) {
                cur = this.delayedHead;
                while (cur !== void 0) {
                    if (!cur.persistent) {
                        noMoreFiniteWork = false;
                        break;
                    }
                    cur = cur.next;
                }
            }
            if (noMoreFiniteWork) {
                const p = this.yieldPromise;
                this.yieldPromise = void 0;
                p.resolve();
            }
        }
    }
    cancel() {
        if (this.microTaskRequestFlushTask !== null) {
            this.microTaskRequestFlushTask.cancel();
            this.microTaskRequestFlushTask = null;
        }
        this.flushRequestor.cancel();
        this.flushRequested = false;
    }
    async yield() {
        if (this.processingSize > 0 || this.pendingSize > 0 || this.delayedSize > 0) {
            if (this.yieldPromise === void 0) {
                this.yieldPromise = createExposedPromise();
            }
            await this.yieldPromise;
        }
    }
    queueTask(callback, opts) {
        const { delay, preempt, persistent, reusable } = { ...defaultQueueTaskOptions, ...opts };
        if (preempt) {
            if (delay > 0) {
                throw new Error(`Invalid arguments: preempt cannot be combined with a greater-than-zero delay`);
            }
            if (persistent) {
                throw new Error(`Invalid arguments: preempt cannot be combined with persistent`);
            }
        }
        if (persistent && this.priority === 0 /* microTask */) {
            throw new Error(`Invalid arguments: cannot queue persistent tasks on the micro task queue`);
        }
        if (this.processingSize === 0) {
            this.requestFlush();
        }
        const time = this.now();
        let task;
        if (reusable) {
            const taskPool = this.taskPool;
            const index = this.taskPoolSize - 1;
            if (index >= 0) {
                task = taskPool[index];
                taskPool[index] = (void 0);
                this.taskPoolSize = index;
                task.reuse(time, delay, preempt, persistent, callback);
            }
            else {
                task = new Task(this, time, time + delay, preempt, persistent, reusable, callback);
            }
        }
        else {
            task = new Task(this, time, time + delay, preempt, persistent, reusable, callback);
        }
        if (preempt) {
            if (this.processingSize++ === 0) {
                this.processingHead = this.processingTail = task;
            }
            else {
                this.processingTail = (task.prev = this.processingTail).next = task;
            }
        }
        else if (delay === 0) {
            if (this.pendingSize++ === 0) {
                this.pendingHead = this.pendingTail = task;
            }
            else {
                this.pendingTail = (task.prev = this.pendingTail).next = task;
            }
        }
        else {
            if (this.delayedSize++ === 0) {
                this.delayedHead = this.delayedTail = task;
            }
            else {
                this.delayedTail = (task.prev = this.delayedTail).next = task;
            }
        }
        return task;
    }
    take(task) {
        if (task.status !== 'pending') {
            throw new Error('Can only take pending tasks.');
        }
        if (this.processingSize === 0) {
            this.requestFlush();
        }
        task.taskQueue.remove(task);
        if (task.preempt) {
            this.addToProcessing(task);
        }
        else if (task.queueTime <= this.now()) {
            this.addToPending(task);
        }
        else {
            this.addToDelayed(task);
        }
    }
    remove(task) {
        if (task.preempt) {
            // Fast path - preempt task can only ever end up in the processing queue
            this.removeFromProcessing(task);
            return;
        }
        if (task.queueTime > this.now()) {
            // Fast path - task with queueTime in the future can only ever be in the delayed queue
            this.removeFromDelayed(task);
            return;
        }
        // Scan everything (we can make this faster by using the queueTime property, but this is good enough for now)
        let cur = this.processingHead;
        while (cur !== void 0) {
            if (cur === task) {
                this.removeFromProcessing(task);
                return;
            }
            cur = cur.next;
        }
        cur = this.pendingHead;
        while (cur !== void 0) {
            if (cur === task) {
                this.removeFromPending(task);
                return;
            }
            cur = cur.next;
        }
        cur = this.delayedHead;
        while (cur !== void 0) {
            if (cur === task) {
                this.removeFromDelayed(task);
                return;
            }
            cur = cur.next;
        }
        throw new Error(`Task #${task.id} could not be found`);
    }
    returnToPool(task) {
        this.taskPool[this.taskPoolSize++] = task;
    }
    resetPersistentTask(task) {
        task.reset(this.now());
        if (task.createdTime === task.queueTime) {
            if (this.pendingSize++ === 0) {
                this.pendingHead = this.pendingTail = task;
                task.prev = task.next = void 0;
            }
            else {
                this.pendingTail = (task.prev = this.pendingTail).next = task;
                task.next = void 0;
            }
        }
        else {
            if (this.delayedSize++ === 0) {
                this.delayedHead = this.delayedTail = task;
                task.prev = task.next = void 0;
            }
            else {
                this.delayedTail = (task.prev = this.delayedTail).next = task;
                task.next = void 0;
            }
        }
    }
    finish(task) {
        if (task.next !== void 0) {
            task.next.prev = task.prev;
        }
        if (task.prev !== void 0) {
            task.prev.next = task.next;
        }
    }
    removeFromProcessing(task) {
        if (this.processingHead === task) {
            this.processingHead = task.next;
        }
        if (this.processingTail === task) {
            this.processingTail = task.prev;
        }
        --this.processingSize;
        this.finish(task);
    }
    removeFromPending(task) {
        if (this.pendingHead === task) {
            this.pendingHead = task.next;
        }
        if (this.pendingTail === task) {
            this.pendingTail = task.prev;
        }
        --this.pendingSize;
        this.finish(task);
    }
    removeFromDelayed(task) {
        if (this.delayedHead === task) {
            this.delayedHead = task.next;
        }
        if (this.delayedTail === task) {
            this.delayedTail = task.prev;
        }
        --this.delayedSize;
        this.finish(task);
    }
    addToProcessing(task) {
        if (this.processingSize++ === 0) {
            this.processingHead = this.processingTail = task;
        }
        else {
            this.processingTail = (task.prev = this.processingTail).next = task;
        }
    }
    addToPending(task) {
        if (this.pendingSize++ === 0) {
            this.pendingHead = this.pendingTail = task;
        }
        else {
            this.pendingTail = (task.prev = this.pendingTail).next = task;
        }
    }
    addToDelayed(task) {
        if (this.delayedSize++ === 0) {
            this.delayedHead = this.delayedTail = task;
        }
        else {
            this.delayedTail = (task.prev = this.delayedTail).next = task;
        }
    }
    movePendingToProcessing() {
        // Add the previously pending tasks to the currently processing tasks
        if (this.processingSize === 0) {
            this.processingHead = this.pendingHead;
            this.processingTail = this.pendingTail;
            this.processingSize = this.pendingSize;
        }
        else {
            this.processingTail.next = this.pendingHead;
            this.processingTail = this.pendingTail;
            this.processingSize += this.pendingSize;
        }
        this.pendingHead = void 0;
        this.pendingTail = void 0;
        this.pendingSize = 0;
    }
    moveDelayedToProcessing() {
        const time = this.now();
        // Add any delayed tasks whose delay have expired to the currently processing tasks
        const delayedHead = this.delayedHead;
        if (delayedHead.queueTime <= time) {
            let delayedTail = delayedHead;
            let next = delayedTail.next;
            let count = 1;
            while (next !== void 0 && next.queueTime <= time) {
                delayedTail = next;
                next = delayedTail.next;
                ++count;
            }
            if (this.processingSize === 0) {
                this.processingHead = delayedHead;
                this.processingTail = delayedTail;
                this.processingSize = count;
            }
            else {
                this.processingTail.next = delayedHead;
                this.processingTail = delayedTail;
                this.processingSize += count;
            }
            this.delayedHead = next;
            this.delayedSize -= count;
            if (this.delayedSize === 0) {
                this.delayedTail = void 0;
            }
        }
    }
    requestFlush() {
        if (this.microTaskRequestFlushTask !== null) {
            this.microTaskRequestFlushTask.cancel();
            this.microTaskRequestFlushTask = null;
        }
        if (!this.flushRequested) {
            this.flushRequested = true;
            this.lastRequest = this.now();
            this.flushRequestor.request();
        }
    }
}

const store = new WeakMap();
const IScheduler = DI.createInterface('IScheduler').noDefault();
class Scheduler {
    constructor(now, microtaskFactory, renderFactory, macroTaskFactory, postRenderFactory, idleFactory) {
        this.taskQueues = [
            this.microtask = (new TaskQueue(now, 0 /* microTask */, this, microtaskFactory)),
            this.render = (new TaskQueue(now, 1 /* render */, this, renderFactory)),
            this.macroTask = (new TaskQueue(now, 2 /* macroTask */, this, macroTaskFactory)),
            this.postRender = (new TaskQueue(now, 3 /* postRender */, this, postRenderFactory)),
            this.idle = (new TaskQueue(now, 4 /* idle */, this, idleFactory)),
        ];
        this.yieldMicroTask = this.yieldMicroTask.bind(this);
        this.yieldRenderTask = this.yieldRenderTask.bind(this);
        this.yieldMacroTask = this.yieldMacroTask.bind(this);
        this.yieldPostRenderTask = this.yieldPostRenderTask.bind(this);
        this.yieldIdleTask = this.yieldIdleTask.bind(this);
        this.yieldAll = this.yieldAll.bind(this);
    }
    static get(key) {
        return store.get(key);
    }
    static set(key, instance) {
        store.set(key, instance);
    }
    getTaskQueue(priority) {
        return this.taskQueues[priority];
    }
    yield(priority) {
        return this.taskQueues[priority].yield();
    }
    queueTask(callback, opts) {
        const { delay, preempt, priority, persistent, reusable } = { ...defaultQueueTaskOptions, ...opts };
        return this.taskQueues[priority].queueTask(callback, { delay, preempt, persistent, reusable });
    }
    getMicroTaskQueue() {
        return this.microtask;
    }
    getRenderTaskQueue() {
        return this.render;
    }
    getMacroTaskQueue() {
        return this.macroTask;
    }
    getPostRenderTaskQueue() {
        return this.postRender;
    }
    getIdleTaskQueue() {
        return this.idle;
    }
    yieldMicroTask() {
        return this.microtask.yield();
    }
    yieldRenderTask() {
        return this.render.yield();
    }
    yieldMacroTask() {
        return this.macroTask.yield();
    }
    yieldPostRenderTask() {
        return this.postRender.yield();
    }
    yieldIdleTask() {
        return this.idle.yield();
    }
    async yieldAll(repeat = 1) {
        while (repeat-- > 0) {
            await this.yieldIdleTask();
            await this.yieldPostRenderTask();
            await this.yieldMacroTask();
            await this.yieldRenderTask();
            await this.yieldMicroTask();
        }
    }
    queueMicroTask(callback, opts) {
        return this.microtask.queueTask(callback, opts);
    }
    queueRenderTask(callback, opts) {
        return this.render.queueTask(callback, opts);
    }
    queueMacroTask(callback, opts) {
        return this.macroTask.queueTask(callback, opts);
    }
    queuePostRenderTask(callback, opts) {
        return this.postRender.queueTask(callback, opts);
    }
    queueIdleTask(callback, opts) {
        return this.idle.queueTask(callback, opts);
    }
}

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$2 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const IDirtyChecker = DI.createInterface('IDirtyChecker').withDefault(x => x.singleton(DirtyChecker));
const DirtyCheckSettings = {
    /**
     * Default: `6`
     *
     * Adjust the global dirty check frequency.
     * Measures in "frames per check", such that (given an FPS of 60):
     * - A value of 1 will result in 60 dirty checks per second
     * - A value of 6 will result in 10 dirty checks per second
     */
    framesPerCheck: 6,
    /**
     * Default: `false`
     *
     * Disable dirty-checking entirely. Properties that cannot be observed without dirty checking
     * or an adapter, will simply not be observed.
     */
    disabled: false,
    /**
     * Default: `true`
     *
     * Log a warning message to the console if a property is being dirty-checked.
     */
    warn: true,
    /**
     * Default: `false`
     *
     * Throw an error if a property is being dirty-checked.
     */
    throw: false,
    /**
     * Resets all dirty checking settings to the framework's defaults.
     */
    resetToDefault() {
        this.framesPerCheck = 6;
        this.disabled = false;
        this.warn = true;
        this.throw = false;
    }
};
/** @internal */
let DirtyChecker = class DirtyChecker {
    constructor(scheduler) {
        this.scheduler = scheduler;
        this.tracked = [];
        this.task = null;
        this.elapsedFrames = 0;
    }
    createProperty(obj, propertyName) {
        {
            Reporter.write(801, propertyName);
        }
        return new DirtyCheckProperty(this, obj, propertyName);
    }
    addProperty(property) {
        this.tracked.push(property);
        if (this.tracked.length === 1) {
            this.task = this.scheduler.queueRenderTask(() => this.check(), { persistent: true });
        }
    }
    removeProperty(property) {
        this.tracked.splice(this.tracked.indexOf(property), 1);
        if (this.tracked.length === 0) {
            this.task.cancel();
            this.task = null;
        }
    }
    check(delta) {
        if (++this.elapsedFrames < DirtyCheckSettings.framesPerCheck) {
            return;
        }
        this.elapsedFrames = 0;
        const tracked = this.tracked;
        const len = tracked.length;
        let current;
        let i = 0;
        for (; i < len; ++i) {
            current = tracked[i];
            if (current.isDirty()) {
                current.flush(256 /* fromTick */);
            }
        }
    }
};
DirtyChecker = __decorate$8([
    __param$2(0, IScheduler),
    __metadata$8("design:paramtypes", [Object])
], DirtyChecker);
let DirtyCheckProperty = class DirtyCheckProperty {
    constructor(dirtyChecker, obj, propertyKey) {
        this.dirtyChecker = dirtyChecker;
        this.obj = obj;
        this.propertyKey = propertyKey;
    }
    isDirty() {
        return this.oldValue !== this.obj[this.propertyKey];
    }
    flush(flags) {
        const oldValue = this.oldValue;
        const newValue = this.obj[this.propertyKey];
        this.callSubscribers(newValue, oldValue, flags | 16 /* updateTargetInstance */);
        this.oldValue = newValue;
    }
    subscribe(subscriber) {
        if (!this.hasSubscribers()) {
            this.oldValue = this.obj[this.propertyKey];
            this.dirtyChecker.addProperty(this);
        }
        this.addSubscriber(subscriber);
    }
    unsubscribe(subscriber) {
        if (this.removeSubscriber(subscriber) && !this.hasSubscribers()) {
            this.dirtyChecker.removeProperty(this);
        }
    }
};
DirtyCheckProperty = __decorate$8([
    subscriberCollection(),
    __metadata$8("design:paramtypes", [Object, Object, String])
], DirtyCheckProperty);

var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let CollectionSizeObserver = class CollectionSizeObserver {
    constructor(obj) {
        this.obj = obj;
        this.currentValue = obj.size;
    }
    getValue() {
        return this.obj.size;
    }
    setValue(newValue, flags) {
        const { currentValue } = this;
        if (newValue !== currentValue) {
            this.currentValue = newValue;
            this.callSubscribers(newValue, currentValue, flags | 16 /* updateTargetInstance */);
        }
    }
};
CollectionSizeObserver = __decorate$9([
    subscriberCollection(),
    __metadata$9("design:paramtypes", [Object])
], CollectionSizeObserver);

var __decorate$a = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$a = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const observerLookup$1 = new WeakMap();
const proto$1 = Map.prototype;
const $set$1 = proto$1.set;
const $clear = proto$1.clear;
const $delete$1 = proto$1.delete;
const methods$1 = ['set', 'clear', 'delete'];
// note: we can't really do much with Map due to the internal data structure not being accessible so we're just using the native calls
// fortunately, map/delete/clear are easy to reconstruct for the indexMap
const observe$1 = {
    // https://tc39.github.io/ecma262/#sec-map.prototype.map
    set: function (key, value) {
        let $this = this;
        if ($this.$raw !== undefined) {
            $this = $this.$raw;
        }
        const o = observerLookup$1.get($this);
        if (o === undefined) {
            $set$1.call($this, key, value);
            return this;
        }
        const oldValue = $this.get(key);
        const oldSize = $this.size;
        $set$1.call($this, key, value);
        const newSize = $this.size;
        if (newSize === oldSize) {
            let i = 0;
            for (const entry of $this.entries()) {
                if (entry[0] === key) {
                    if (entry[1] !== oldValue) {
                        o.indexMap.deletedItems.push(o.indexMap[i]);
                        o.indexMap[i] = -2;
                        o.notify();
                    }
                    return this;
                }
                i++;
            }
            return this;
        }
        o.indexMap[oldSize] = -2;
        o.notify();
        return this;
    },
    // https://tc39.github.io/ecma262/#sec-map.prototype.clear
    clear: function () {
        let $this = this;
        if ($this.$raw !== undefined) {
            $this = $this.$raw;
        }
        const o = observerLookup$1.get($this);
        if (o === undefined) {
            return $clear.call($this);
        }
        const size = $this.size;
        if (size > 0) {
            const indexMap = o.indexMap;
            let i = 0;
            for (const entry of $this.keys()) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                i++;
            }
            $clear.call($this);
            indexMap.length = 0;
            o.notify();
        }
        return undefined;
    },
    // https://tc39.github.io/ecma262/#sec-map.prototype.delete
    delete: function (value) {
        let $this = this;
        if ($this.$raw !== undefined) {
            $this = $this.$raw;
        }
        const o = observerLookup$1.get($this);
        if (o === undefined) {
            return $delete$1.call($this, value);
        }
        const size = $this.size;
        if (size === 0) {
            return false;
        }
        let i = 0;
        const indexMap = o.indexMap;
        for (const entry of $this.keys()) {
            if (entry === value) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                indexMap.splice(i, 1);
                const deleteResult = $delete$1.call($this, value);
                if (deleteResult === true) {
                    o.notify();
                }
                return deleteResult;
            }
            ++i;
        }
        return false;
    }
};
const descriptorProps$1 = {
    writable: true,
    enumerable: false,
    configurable: true
};
const def$2 = Reflect.defineProperty;
for (const method of methods$1) {
    def$2(observe$1[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });
}
let enableMapObservationCalled = false;
function enableMapObservation() {
    for (const method of methods$1) {
        if (proto$1[method].observing !== true) {
            def$2(proto$1, method, { ...descriptorProps$1, value: observe$1[method] });
        }
    }
}
let MapObserver = class MapObserver {
    constructor(flags, lifecycle, map) {
        if (!enableMapObservationCalled) {
            enableMapObservationCalled = true;
            enableMapObservation();
        }
        this.inBatch = false;
        this.collection = map;
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        this.indexMap = createIndexMap(map.size);
        this.lifecycle = lifecycle;
        this.lengthObserver = (void 0);
        observerLookup$1.set(map, this);
    }
    notify() {
        if (this.lifecycle.batch.depth > 0) {
            if (!this.inBatch) {
                this.inBatch = true;
                this.lifecycle.batch.add(this);
            }
        }
        else {
            this.flushBatch(0 /* none */);
        }
    }
    getLengthObserver() {
        if (this.lengthObserver === void 0) {
            this.lengthObserver = new CollectionSizeObserver(this.collection);
        }
        return this.lengthObserver;
    }
    getIndexObserver(index) {
        throw new Error('Map index observation not supported');
    }
    flushBatch(flags) {
        this.inBatch = false;
        const { indexMap, collection } = this;
        const { size } = collection;
        this.indexMap = createIndexMap(size);
        this.callCollectionSubscribers(indexMap, 16 /* updateTargetInstance */ | this.persistentFlags);
        if (this.lengthObserver !== void 0) {
            this.lengthObserver.setValue(size, 16 /* updateTargetInstance */);
        }
    }
};
MapObserver = __decorate$a([
    collectionSubscriberCollection(),
    __metadata$a("design:paramtypes", [Number, Object, Object])
], MapObserver);
function getMapObserver(flags, lifecycle, map) {
    const observer = observerLookup$1.get(map);
    if (observer === void 0) {
        return new MapObserver(flags, lifecycle, map);
    }
    return observer;
}

const noop = PLATFORM.noop;
// note: string.length is the only property of any primitive that is not a function,
// so we can hardwire it to that and simply return undefined for anything else
// note#2: a modified primitive constructor prototype would not work (and really, it shouldn't..)
class PrimitiveObserver {
    constructor(obj, propertyKey) {
        this.doNotCache = true;
        // we don't need to store propertyName because only 'length' can return a useful value
        if (propertyKey === 'length') {
            // deliberately not checking for typeof string as users probably still want to know via an error that their string is undefined
            this.obj = obj;
            this.getValue = this.getStringLength;
        }
        else {
            this.getValue = this.returnUndefined;
        }
    }
    getStringLength() {
        return this.obj.length;
    }
    returnUndefined() {
        return undefined;
    }
}
PrimitiveObserver.prototype.setValue = noop;
PrimitiveObserver.prototype.subscribe = noop;
PrimitiveObserver.prototype.unsubscribe = noop;
PrimitiveObserver.prototype.dispose = noop;

class PropertyAccessor {
    constructor(obj, propertyKey) {
        this.obj = obj;
        this.propertyKey = propertyKey;
        if (obj.$observers !== void 0
            && obj.$observers[propertyKey] !== void 0
            && obj.$observers[propertyKey].setValue !== void 0) {
            this.setValue = this.setValueDirect;
        }
    }
    getValue() {
        return this.obj[this.propertyKey];
    }
    setValue(value, flags) {
        this.obj[this.propertyKey] = value;
    }
    setValueDirect(value, flags) {
        this.obj.$observers[this.propertyKey].setValue(value, flags);
    }
}

var __decorate$b = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$b = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const observerLookup$2 = new WeakMap();
const proto$2 = Set.prototype;
const $add = proto$2.add;
const $clear$1 = proto$2.clear;
const $delete$2 = proto$2.delete;
const methods$2 = ['add', 'clear', 'delete'];
// note: we can't really do much with Set due to the internal data structure not being accessible so we're just using the native calls
// fortunately, add/delete/clear are easy to reconstruct for the indexMap
const observe$2 = {
    // https://tc39.github.io/ecma262/#sec-set.prototype.add
    add: function (value) {
        let $this = this;
        if ($this.$raw !== undefined) {
            $this = $this.$raw;
        }
        const o = observerLookup$2.get($this);
        if (o === undefined) {
            $add.call($this, value);
            return this;
        }
        const oldSize = $this.size;
        $add.call($this, value);
        const newSize = $this.size;
        if (newSize === oldSize) {
            return this;
        }
        o.indexMap[oldSize] = -2;
        o.notify();
        return this;
    },
    // https://tc39.github.io/ecma262/#sec-set.prototype.clear
    clear: function () {
        let $this = this;
        if ($this.$raw !== undefined) {
            $this = $this.$raw;
        }
        const o = observerLookup$2.get($this);
        if (o === undefined) {
            return $clear$1.call($this);
        }
        const size = $this.size;
        if (size > 0) {
            const indexMap = o.indexMap;
            let i = 0;
            for (const entry of $this.keys()) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                i++;
            }
            $clear$1.call($this);
            indexMap.length = 0;
            o.notify();
        }
        return undefined;
    },
    // https://tc39.github.io/ecma262/#sec-set.prototype.delete
    delete: function (value) {
        let $this = this;
        if ($this.$raw !== undefined) {
            $this = $this.$raw;
        }
        const o = observerLookup$2.get($this);
        if (o === undefined) {
            return $delete$2.call($this, value);
        }
        const size = $this.size;
        if (size === 0) {
            return false;
        }
        let i = 0;
        const indexMap = o.indexMap;
        for (const entry of $this.keys()) {
            if (entry === value) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                indexMap.splice(i, 1);
                const deleteResult = $delete$2.call($this, value);
                if (deleteResult === true) {
                    o.notify();
                }
                return deleteResult;
            }
            i++;
        }
        return false;
    }
};
const descriptorProps$2 = {
    writable: true,
    enumerable: false,
    configurable: true
};
const def$3 = Reflect.defineProperty;
for (const method of methods$2) {
    def$3(observe$2[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });
}
let enableSetObservationCalled = false;
function enableSetObservation() {
    for (const method of methods$2) {
        if (proto$2[method].observing !== true) {
            def$3(proto$2, method, { ...descriptorProps$2, value: observe$2[method] });
        }
    }
}
let SetObserver = class SetObserver {
    constructor(flags, lifecycle, observedSet) {
        if (!enableSetObservationCalled) {
            enableSetObservationCalled = true;
            enableSetObservation();
        }
        this.inBatch = false;
        this.collection = observedSet;
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        this.indexMap = createIndexMap(observedSet.size);
        this.lifecycle = lifecycle;
        this.lengthObserver = (void 0);
        observerLookup$2.set(observedSet, this);
    }
    notify() {
        if (this.lifecycle.batch.depth > 0) {
            if (!this.inBatch) {
                this.inBatch = true;
                this.lifecycle.batch.add(this);
            }
        }
        else {
            this.flushBatch(0 /* none */);
        }
    }
    getLengthObserver() {
        if (this.lengthObserver === void 0) {
            this.lengthObserver = new CollectionSizeObserver(this.collection);
        }
        return this.lengthObserver;
    }
    getIndexObserver(index) {
        throw new Error('Set index observation not supported');
    }
    flushBatch(flags) {
        this.inBatch = false;
        const { indexMap, collection } = this;
        const { size } = collection;
        this.indexMap = createIndexMap(size);
        this.callCollectionSubscribers(indexMap, 16 /* updateTargetInstance */ | this.persistentFlags);
        if (this.lengthObserver !== void 0) {
            this.lengthObserver.setValue(size, 16 /* updateTargetInstance */);
        }
    }
};
SetObserver = __decorate$b([
    collectionSubscriberCollection(),
    __metadata$b("design:paramtypes", [Number, Object, Object])
], SetObserver);
function getSetObserver(flags, lifecycle, observedSet) {
    const observer = observerLookup$2.get(observedSet);
    if (observer === void 0) {
        return new SetObserver(flags, lifecycle, observedSet);
    }
    return observer;
}

var __decorate$c = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$c = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$3 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const toStringTag$2 = Object.prototype.toString;
const IObserverLocator = DI.createInterface('IObserverLocator').noDefault();
const ITargetObserverLocator = DI.createInterface('ITargetObserverLocator').noDefault();
const ITargetAccessorLocator = DI.createInterface('ITargetAccessorLocator').noDefault();
function getPropertyDescriptor(subject, name) {
    let pd = Object.getOwnPropertyDescriptor(subject, name);
    let proto = Object.getPrototypeOf(subject);
    while (pd == null && proto != null) {
        pd = Object.getOwnPropertyDescriptor(proto, name);
        proto = Object.getPrototypeOf(proto);
    }
    return pd;
}
/** @internal */
let ObserverLocator = class ObserverLocator {
    constructor(lifecycle, scheduler, dirtyChecker, targetObserverLocator, targetAccessorLocator) {
        this.lifecycle = lifecycle;
        this.scheduler = scheduler;
        this.dirtyChecker = dirtyChecker;
        this.targetObserverLocator = targetObserverLocator;
        this.targetAccessorLocator = targetAccessorLocator;
        this.adapters = [];
    }
    static register(container) {
        return Registration.singleton(IObserverLocator, this).register(container);
    }
    getObserver(flags, obj, propertyName) {
        if (flags & 2 /* proxyStrategy */ && typeof obj === 'object') {
            return ProxyObserver.getOrCreate(obj, propertyName); // TODO: fix typings (and ensure proper contracts ofc)
        }
        if (isBindingContext(obj)) {
            return obj.getObservers(flags).getOrCreate(this.lifecycle, flags, obj, propertyName);
        }
        let observersLookup = obj.$observers;
        if (observersLookup && propertyName in observersLookup) {
            return observersLookup[propertyName];
        }
        const observer = this.createPropertyObserver(flags, obj, propertyName);
        if (!observer.doNotCache) {
            if (observersLookup === void 0) {
                observersLookup = this.getOrCreateObserversLookup(obj);
            }
            observersLookup[propertyName] = observer;
        }
        return observer;
    }
    addAdapter(adapter) {
        this.adapters.push(adapter);
    }
    getAccessor(flags, obj, propertyName) {
        if (this.targetAccessorLocator.handles(flags, obj)) {
            if (this.targetObserverLocator.overridesAccessor(flags, obj, propertyName)) {
                return this.getObserver(flags, obj, propertyName);
            }
            return this.targetAccessorLocator.getAccessor(flags, this.scheduler, this.lifecycle, obj, propertyName);
        }
        if (flags & 2 /* proxyStrategy */) {
            return ProxyObserver.getOrCreate(obj, propertyName);
        }
        return new PropertyAccessor(obj, propertyName);
    }
    getArrayObserver(flags, observedArray) {
        return getArrayObserver(flags, this.lifecycle, observedArray);
    }
    getMapObserver(flags, observedMap) {
        return getMapObserver(flags, this.lifecycle, observedMap);
    }
    getSetObserver(flags, observedSet) {
        return getSetObserver(flags, this.lifecycle, observedSet);
    }
    getOrCreateObserversLookup(obj) {
        return obj.$observers || this.createObserversLookup(obj);
    }
    createObserversLookup(obj) {
        const value = {};
        if (!Reflect.defineProperty(obj, '$observers', {
            enumerable: false,
            configurable: false,
            writable: false,
            value: value
        })) {
            Reporter.write(0, obj);
        }
        return value;
    }
    getAdapterObserver(flags, obj, propertyName, descriptor) {
        for (let i = 0, ii = this.adapters.length; i < ii; i++) {
            const adapter = this.adapters[i];
            const observer = adapter.getObserver(flags, obj, propertyName, descriptor);
            if (observer != null) {
                return observer;
            }
        }
        return null;
    }
    createPropertyObserver(flags, obj, propertyName) {
        if (!(obj instanceof Object)) {
            return new PrimitiveObserver(obj, propertyName);
        }
        let isNode = false;
        if (this.targetObserverLocator.handles(flags, obj)) {
            const observer = this.targetObserverLocator.getObserver(flags, this.scheduler, this.lifecycle, this, obj, propertyName);
            if (observer != null) {
                return observer;
            }
            isNode = true;
        }
        const tag = toStringTag$2.call(obj);
        switch (tag) {
            case '[object Array]':
                if (propertyName === 'length') {
                    return this.getArrayObserver(flags, obj).getLengthObserver();
                }
                // is numer only returns true for integer
                if (isArrayIndex(propertyName)) {
                    return this.getArrayObserver(flags, obj).getIndexObserver(Number(propertyName));
                }
                break;
            case '[object Map]':
                if (propertyName === 'size') {
                    return this.getMapObserver(flags, obj).getLengthObserver();
                }
                break;
            case '[object Set]':
                if (propertyName === 'size') {
                    return this.getSetObserver(flags, obj).getLengthObserver();
                }
                break;
        }
        const descriptor = getPropertyDescriptor(obj, propertyName);
        if (descriptor != null && (descriptor.get != null || descriptor.set != null)) {
            if (descriptor.get != null && descriptor.get.getObserver != null) {
                return descriptor.get.getObserver(obj);
            }
            // attempt to use an adapter before resorting to dirty checking.
            const adapterObserver = this.getAdapterObserver(flags, obj, propertyName, descriptor);
            if (adapterObserver != null) {
                return adapterObserver;
            }
            if (isNode) {
                // TODO: use MutationObserver
                return this.dirtyChecker.createProperty(obj, propertyName);
            }
            return createComputedObserver(flags, this, this.dirtyChecker, this.lifecycle, obj, propertyName, descriptor);
        }
        return new SetterObserver(this.lifecycle, flags, obj, propertyName);
    }
};
ObserverLocator = __decorate$c([
    __param$3(0, ILifecycle),
    __param$3(1, IScheduler),
    __param$3(2, IDirtyChecker),
    __param$3(3, ITargetObserverLocator),
    __param$3(4, ITargetAccessorLocator),
    __metadata$c("design:paramtypes", [Object, Object, Object, Object, Object])
], ObserverLocator);
function getCollectionObserver(flags, lifecycle, collection) {
    // If the collection is wrapped by a proxy then `$observer` will return the proxy observer instead of the collection observer, which is not what we want
    // when we ask for getCollectionObserver
    const rawCollection = collection instanceof Object ? ProxyObserver.getRawIfProxy(collection) : collection;
    switch (toStringTag$2.call(collection)) {
        case '[object Array]':
            return getArrayObserver(flags, lifecycle, rawCollection);
        case '[object Map]':
            return getMapObserver(flags, lifecycle, rawCollection);
        case '[object Set]':
            return getSetObserver(flags, lifecycle, rawCollection);
    }
    return void 0;
}
function isBindingContext(obj) {
    return obj.$synthetic === true;
}

var __decorate$d = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$d = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// BindingMode is not a const enum (and therefore not inlined), so assigning them to a variable to save a member accessor is a minor perf tweak
const { oneTime, toView, fromView } = BindingMode;
// pre-combining flags for bitwise checks is a minor perf tweak
const toViewOrOneTime = toView | oneTime;
let PropertyBinding = class PropertyBinding {
    constructor(sourceExpression, target, targetProperty, mode, observerLocator, locator) {
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.interceptor = this;
        this.$state = 0 /* none */;
        this.$scope = void 0;
        this.targetObserver = void 0;
        this.persistentFlags = 0 /* none */;
        connectable.assignIdTo(this);
        this.$lifecycle = locator.get(ILifecycle);
    }
    ;
    updateTarget(value, flags) {
        flags |= this.persistentFlags;
        this.targetObserver.setValue(value, flags);
    }
    updateSource(value, flags) {
        flags |= this.persistentFlags;
        this.sourceExpression.assign(flags, this.$scope, this.locator, value, this.part);
    }
    handleChange(newValue, _previousValue, flags) {
        if ((this.$state & 4 /* isBound */) === 0) {
            return;
        }
        flags |= this.persistentFlags;
        if ((flags & 16 /* updateTargetInstance */) > 0) {
            const previousValue = this.targetObserver.getValue();
            // if the only observable is an AccessScope then we can assume the passed-in newValue is the correct and latest value
            if (this.sourceExpression.$kind !== 10082 /* AccessScope */ || this.observerSlots > 1) {
                newValue = this.sourceExpression.evaluate(flags, this.$scope, this.locator, this.part);
            }
            if (newValue !== previousValue) {
                this.interceptor.updateTarget(newValue, flags);
            }
            if ((this.mode & oneTime) === 0) {
                this.version++;
                this.sourceExpression.connect(flags, this.$scope, this.interceptor, this.part);
                this.interceptor.unobserve(false);
            }
            return;
        }
        if ((flags & 32 /* updateSourceExpression */) > 0) {
            if (newValue !== this.sourceExpression.evaluate(flags, this.$scope, this.locator, this.part)) {
                this.interceptor.updateSource(newValue, flags);
            }
            return;
        }
        throw Reporter.error(15, flags);
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 4096 /* fromBind */);
        }
        // add isBinding flag
        this.$state |= 1 /* isBinding */;
        // Force property binding to always be strict
        flags |= 4 /* isStrictBindingStrategy */;
        // Store flags which we can only receive during $bind and need to pass on
        // to the AST during evaluate/connect/assign
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        this.$scope = scope;
        this.part = part;
        let sourceExpression = this.sourceExpression;
        if (hasBind(sourceExpression)) {
            sourceExpression.bind(flags, scope, this.interceptor);
        }
        let targetObserver = this.targetObserver;
        if (!targetObserver) {
            if (this.mode & fromView) {
                targetObserver = this.targetObserver = this.observerLocator.getObserver(flags, this.target, this.targetProperty);
            }
            else {
                targetObserver = this.targetObserver = this.observerLocator.getAccessor(flags, this.target, this.targetProperty);
            }
        }
        if (this.mode !== BindingMode.oneTime && targetObserver.bind) {
            targetObserver.bind(flags);
        }
        // during bind, binding behavior might have changed sourceExpression
        sourceExpression = this.sourceExpression;
        if (this.mode & toViewOrOneTime) {
            this.interceptor.updateTarget(sourceExpression.evaluate(flags, scope, this.locator, part), flags);
        }
        if (this.mode & toView) {
            sourceExpression.connect(flags, scope, this.interceptor, part);
        }
        if (this.mode & fromView) {
            targetObserver.subscribe(this.interceptor);
            if ((this.mode & toView) === 0) {
                this.interceptor.updateSource(targetObserver.getValue(), flags);
            }
            targetObserver[this.id] |= 32 /* updateSourceExpression */;
        }
        // add isBound flag and remove isBinding flag
        this.$state |= 4 /* isBound */;
        this.$state &= ~1 /* isBinding */;
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        // add isUnbinding flag
        this.$state |= 2 /* isUnbinding */;
        // clear persistent flags
        this.persistentFlags = 0 /* none */;
        if (hasUnbind(this.sourceExpression)) {
            this.sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        this.$scope = void 0;
        if (this.targetObserver.unbind) {
            this.targetObserver.unbind(flags);
        }
        if (this.targetObserver.unsubscribe) {
            this.targetObserver.unsubscribe(this.interceptor);
            this.targetObserver[this.id] &= ~32 /* updateSourceExpression */;
        }
        this.interceptor.unobserve(true);
        // remove isBound and isUnbinding flags
        this.$state &= ~(4 /* isBound */ | 2 /* isUnbinding */);
    }
};
PropertyBinding = __decorate$d([
    connectable(),
    __metadata$d("design:paramtypes", [Object, Object, String, Number, Object, Object])
], PropertyBinding);

class CallBinding {
    constructor(sourceExpression, target, targetProperty, observerLocator, locator) {
        this.sourceExpression = sourceExpression;
        this.locator = locator;
        this.interceptor = this;
        this.$state = 0 /* none */;
        this.targetObserver = observerLocator.getObserver(0 /* none */, target, targetProperty);
    }
    callSource(args) {
        const overrideContext = this.$scope.overrideContext;
        Object.assign(overrideContext, args);
        const result = this.sourceExpression.evaluate(2097152 /* mustEvaluate */, this.$scope, this.locator, this.part);
        for (const prop in args) {
            Reflect.deleteProperty(overrideContext, prop);
        }
        return result;
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 4096 /* fromBind */);
        }
        // add isBinding flag
        this.$state |= 1 /* isBinding */;
        this.$scope = scope;
        this.part = part;
        if (hasBind(this.sourceExpression)) {
            this.sourceExpression.bind(flags, scope, this.interceptor);
        }
        this.targetObserver.setValue(($args) => this.interceptor.callSource($args), flags);
        // add isBound flag and remove isBinding flag
        this.$state |= 4 /* isBound */;
        this.$state &= ~1 /* isBinding */;
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        // add isUnbinding flag
        this.$state |= 2 /* isUnbinding */;
        if (hasUnbind(this.sourceExpression)) {
            this.sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        this.$scope = void 0;
        this.targetObserver.setValue(null, flags);
        // remove isBound and isUnbinding flags
        this.$state &= ~(4 /* isBound */ | 2 /* isUnbinding */);
    }
    observeProperty(flags, obj, propertyName) {
        return;
    }
    handleChange(newValue, previousValue, flags) {
        return;
    }
}

const IExpressionParser = DI.createInterface('IExpressionParser').withDefault(x => x.singleton(ExpressionParser));
/** @internal */
class ExpressionParser {
    constructor() {
        this.expressionLookup = Object.create(null);
        this.forOfLookup = Object.create(null);
        this.interpolationLookup = Object.create(null);
    }
    parse(expression, bindingType) {
        switch (bindingType) {
            case 2048 /* Interpolation */: {
                let found = this.interpolationLookup[expression];
                if (found === void 0) {
                    found = this.interpolationLookup[expression] = this.parseCore(expression, bindingType);
                }
                return found;
            }
            case 539 /* ForCommand */: {
                let found = this.forOfLookup[expression];
                if (found === void 0) {
                    found = this.forOfLookup[expression] = this.parseCore(expression, bindingType);
                }
                return found;
            }
            default: {
                // Allow empty strings for normal bindings and those that are empty by default (such as a custom attribute without an equals sign)
                // But don't cache it, because empty strings are always invalid for any other type of binding
                if (expression.length === 0 && (bindingType & (53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */))) {
                    return PrimitiveLiteralExpression.$empty;
                }
                let found = this.expressionLookup[expression];
                if (found === void 0) {
                    found = this.expressionLookup[expression] = this.parseCore(expression, bindingType);
                }
                return found;
            }
        }
    }
    cache(expressions) {
        const { forOfLookup, expressionLookup, interpolationLookup } = this;
        for (const expression in expressions) {
            const expr = expressions[expression];
            switch (expr.$kind) {
                case 24 /* Interpolation */:
                    interpolationLookup[expression] = expr;
                    break;
                case 6199 /* ForOfStatement */:
                    forOfLookup[expression] = expr;
                    break;
                default:
                    expressionLookup[expression] = expr;
            }
        }
    }
    parseCore(expression, bindingType) {
        try {
            const parts = expression.split('.');
            const firstPart = parts[0];
            let current;
            if (firstPart.endsWith('()')) {
                current = new CallScopeExpression(firstPart.replace('()', ''), PLATFORM.emptyArray);
            }
            else {
                current = new AccessScopeExpression(parts[0]);
            }
            let index = 1;
            while (index < parts.length) {
                const currentPart = parts[index];
                if (currentPart.endsWith('()')) {
                    current = new CallMemberExpression(current, currentPart.replace('()', ''), PLATFORM.emptyArray);
                }
                else {
                    current = new AccessMemberExpression(current, parts[index]);
                }
                index++;
            }
            return current;
        }
        catch (e) {
            throw Reporter.error(3, e);
        }
    }
}
/* eslint-disable @typescript-eslint/indent */
var BindingType;
(function (BindingType) {
    BindingType[BindingType["None"] = 0] = "None";
    BindingType[BindingType["IgnoreCustomAttr"] = 4096] = "IgnoreCustomAttr";
    BindingType[BindingType["Interpolation"] = 2048] = "Interpolation";
    BindingType[BindingType["IsRef"] = 5376] = "IsRef";
    BindingType[BindingType["IsIterator"] = 512] = "IsIterator";
    BindingType[BindingType["IsCustom"] = 256] = "IsCustom";
    BindingType[BindingType["IsFunction"] = 128] = "IsFunction";
    BindingType[BindingType["IsEvent"] = 64] = "IsEvent";
    BindingType[BindingType["IsProperty"] = 32] = "IsProperty";
    BindingType[BindingType["IsCommand"] = 16] = "IsCommand";
    BindingType[BindingType["IsPropertyCommand"] = 48] = "IsPropertyCommand";
    BindingType[BindingType["IsEventCommand"] = 80] = "IsEventCommand";
    BindingType[BindingType["DelegationStrategyDelta"] = 6] = "DelegationStrategyDelta";
    BindingType[BindingType["Command"] = 15] = "Command";
    BindingType[BindingType["OneTimeCommand"] = 49] = "OneTimeCommand";
    BindingType[BindingType["ToViewCommand"] = 50] = "ToViewCommand";
    BindingType[BindingType["FromViewCommand"] = 51] = "FromViewCommand";
    BindingType[BindingType["TwoWayCommand"] = 52] = "TwoWayCommand";
    BindingType[BindingType["BindCommand"] = 53] = "BindCommand";
    BindingType[BindingType["TriggerCommand"] = 4182] = "TriggerCommand";
    BindingType[BindingType["CaptureCommand"] = 4183] = "CaptureCommand";
    BindingType[BindingType["DelegateCommand"] = 4184] = "DelegateCommand";
    BindingType[BindingType["CallCommand"] = 153] = "CallCommand";
    BindingType[BindingType["OptionsCommand"] = 26] = "OptionsCommand";
    BindingType[BindingType["ForCommand"] = 539] = "ForCommand";
    BindingType[BindingType["CustomCommand"] = 284] = "CustomCommand";
})(BindingType || (BindingType = {}));
/* eslint-enable @typescript-eslint/indent */

var __decorate$e = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$e = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const { toView: toView$1, oneTime: oneTime$1 } = BindingMode;
class MultiInterpolationBinding {
    constructor(observerLocator, interpolation, target, targetProperty, mode, locator) {
        this.observerLocator = observerLocator;
        this.interpolation = interpolation;
        this.target = target;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.locator = locator;
        this.interceptor = this;
        this.$state = 0 /* none */;
        this.$scope = void 0;
        // Note: the child expressions of an Interpolation expression are full Aurelia expressions, meaning they may include
        // value converters and binding behaviors.
        // Each expression represents one ${interpolation}, and for each we create a child TextBinding unless there is only one,
        // in which case the renderer will create the TextBinding directly
        const expressions = interpolation.expressions;
        const parts = this.parts = Array(expressions.length);
        for (let i = 0, ii = expressions.length; i < ii; ++i) {
            parts[i] = new InterpolationBinding(expressions[i], interpolation, target, targetProperty, mode, observerLocator, locator, i === 0);
        }
    }
    ;
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags);
        }
        this.$state |= 4 /* isBound */;
        this.$scope = scope;
        this.part = part;
        const parts = this.parts;
        for (let i = 0, ii = parts.length; i < ii; ++i) {
            parts[i].interceptor.$bind(flags, scope, part);
        }
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        this.$state &= ~4 /* isBound */;
        this.$scope = void 0;
        const parts = this.parts;
        for (let i = 0, ii = parts.length; i < ii; ++i) {
            parts[i].interceptor.$unbind(flags);
        }
    }
}
let InterpolationBinding = class InterpolationBinding {
    constructor(sourceExpression, interpolation, target, targetProperty, mode, observerLocator, locator, isFirst) {
        this.sourceExpression = sourceExpression;
        this.interpolation = interpolation;
        this.target = target;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.isFirst = isFirst;
        this.interceptor = this;
        this.$state = 0 /* none */;
        connectable.assignIdTo(this);
        this.targetObserver = observerLocator.getAccessor(0 /* none */, target, targetProperty);
    }
    updateTarget(value, flags) {
        this.targetObserver.setValue(value, flags | 16 /* updateTargetInstance */);
    }
    handleChange(_newValue, _previousValue, flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        const previousValue = this.targetObserver.getValue();
        const newValue = this.interpolation.evaluate(flags, this.$scope, this.locator, this.part);
        if (newValue !== previousValue) {
            this.interceptor.updateTarget(newValue, flags);
        }
        if ((this.mode & oneTime$1) === 0) {
            this.version++;
            this.sourceExpression.connect(flags, this.$scope, this.interceptor, this.part);
            this.interceptor.unobserve(false);
        }
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags);
        }
        this.$state |= 4 /* isBound */;
        this.$scope = scope;
        this.part = part;
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.bind) {
            sourceExpression.bind(flags, scope, this.interceptor);
        }
        if (this.mode !== BindingMode.oneTime && this.targetObserver.bind) {
            this.targetObserver.bind(flags);
        }
        // since the interpolation already gets the whole value, we only need to let the first
        // text binding do the update if there are multiple
        if (this.isFirst) {
            this.interceptor.updateTarget(this.interpolation.evaluate(flags, scope, this.locator, part), flags);
        }
        if (this.mode & toView$1) {
            sourceExpression.connect(flags, scope, this.interceptor, part);
        }
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        this.$state &= ~4 /* isBound */;
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.unbind) {
            sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        if (this.targetObserver.unbind) {
            this.targetObserver.unbind(flags);
        }
        this.$scope = void 0;
        this.interceptor.unobserve(true);
    }
};
InterpolationBinding = __decorate$e([
    connectable(),
    __metadata$e("design:paramtypes", [Object, Object, Object, String, Number, Object, Object, Boolean])
], InterpolationBinding);

var __decorate$f = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$f = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let LetBinding = class LetBinding {
    constructor(sourceExpression, targetProperty, observerLocator, locator, toBindingContext = false) {
        this.sourceExpression = sourceExpression;
        this.targetProperty = targetProperty;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.toBindingContext = toBindingContext;
        this.interceptor = this;
        this.$state = 0 /* none */;
        this.$scope = void 0;
        this.target = null;
        connectable.assignIdTo(this);
        this.$lifecycle = locator.get(ILifecycle);
    }
    handleChange(_newValue, _previousValue, flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        if (flags & 16 /* updateTargetInstance */) {
            const { target, targetProperty } = this;
            const previousValue = target[targetProperty];
            const newValue = this.sourceExpression.evaluate(flags, this.$scope, this.locator, this.part);
            if (newValue !== previousValue) {
                target[targetProperty] = newValue;
            }
            return;
        }
        throw Reporter.error(15, flags);
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 4096 /* fromBind */);
        }
        // add isBinding flag
        this.$state |= 1 /* isBinding */;
        this.$scope = scope;
        this.part = part;
        this.target = (this.toBindingContext ? scope.bindingContext : scope.overrideContext);
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.bind) {
            sourceExpression.bind(flags, scope, this.interceptor);
        }
        // sourceExpression might have been changed during bind
        this.target[this.targetProperty] = this.sourceExpression.evaluate(flags | 4096 /* fromBind */, scope, this.locator, part);
        this.sourceExpression.connect(flags, scope, this.interceptor, part);
        // add isBound flag and remove isBinding flag
        this.$state |= 4 /* isBound */;
        this.$state &= ~1 /* isBinding */;
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        // add isUnbinding flag
        this.$state |= 2 /* isUnbinding */;
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.unbind) {
            sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        this.$scope = void 0;
        this.interceptor.unobserve(true);
        // remove isBound and isUnbinding flags
        this.$state &= ~(4 /* isBound */ | 2 /* isUnbinding */);
    }
};
LetBinding = __decorate$f([
    connectable(),
    __metadata$f("design:paramtypes", [Object, String, Object, Object, Boolean])
], LetBinding);

class RefBinding {
    constructor(sourceExpression, target, locator) {
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.locator = locator;
        this.interceptor = this;
        this.$state = 0 /* none */;
        this.$scope = void 0;
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 4096 /* fromBind */);
        }
        // add isBinding flag
        this.$state |= 1 /* isBinding */;
        this.$scope = scope;
        this.part = part;
        if (hasBind(this.sourceExpression)) {
            this.sourceExpression.bind(flags, scope, this);
        }
        this.sourceExpression.assign(flags | 32 /* updateSourceExpression */, this.$scope, this.locator, this.target, part);
        // add isBound flag and remove isBinding flag
        this.$state |= 4 /* isBound */;
        this.$state &= ~1 /* isBinding */;
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        // add isUnbinding flag
        this.$state |= 2 /* isUnbinding */;
        let sourceExpression = this.sourceExpression;
        if (sourceExpression.evaluate(flags, this.$scope, this.locator, this.part) === this.target) {
            sourceExpression.assign(flags, this.$scope, this.locator, null, this.part);
        }
        // source expression might have been modified durring assign, via a BB
        sourceExpression = this.sourceExpression;
        if (hasUnbind(sourceExpression)) {
            sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        this.$scope = void 0;
        // remove isBound and isUnbinding flags
        this.$state &= ~(4 /* isBound */ | 2 /* isUnbinding */);
    }
    observeProperty(flags, obj, propertyName) {
        return;
    }
    handleChange(newValue, previousValue, flags) {
        return;
    }
}

var __decorate$g = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$g = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var BindableObserver_1;
let BindableObserver = BindableObserver_1 = class BindableObserver {
    constructor(lifecycle, flags, obj, propertyKey, cbName, $set) {
        this.lifecycle = lifecycle;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.$set = $set;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.inBatch = false;
        let isProxy = false;
        if (ProxyObserver.isProxy(obj)) {
            isProxy = true;
            obj.$observer.subscribe(this, propertyKey);
            this.obj = obj.$raw;
        }
        this.callback = this.obj[cbName];
        const propertyChangedCallback = this.propertyChangedCallback = this.obj.propertyChanged;
        const hasPropertyChangedCallback = this.hasPropertyChangedCallback = typeof propertyChangedCallback === 'function';
        const shouldInterceptSet = this.shouldInterceptSet = $set !== PLATFORM.noop;
        // when user declare @bindable({ set })
        // it's expected to work from the start,
        // regardless where the assignment comes from: either direct view model assignment or from binding during render
        // so if either getter/setter config is present, alter the accessor straight await
        if (this.callback === void 0 && !hasPropertyChangedCallback && !shouldInterceptSet) {
            this.observing = false;
        }
        else {
            this.observing = true;
            const currentValue = obj[propertyKey];
            this.currentValue = shouldInterceptSet && currentValue !== void 0
                ? $set(currentValue)
                : currentValue;
            if (!isProxy) {
                this.createGetterSetter();
            }
        }
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
    }
    handleChange(newValue, oldValue, flags) {
        this.setValue(newValue, flags);
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        if (this.shouldInterceptSet) {
            newValue = this.$set(newValue);
        }
        if (this.observing) {
            const currentValue = this.currentValue;
            // eslint-disable-next-line compat/compat
            if (Object.is(newValue, currentValue)) {
                return;
            }
            this.currentValue = newValue;
            if (this.lifecycle.batch.depth === 0) {
                this.callSubscribers(newValue, currentValue, this.persistentFlags | flags);
                if ((flags & 4096 /* fromBind */) === 0 || (flags & 32 /* updateSourceExpression */) > 0) {
                    const callback = this.callback;
                    if (callback !== void 0) {
                        callback.call(this.obj, newValue, currentValue, this.persistentFlags | flags);
                    }
                    if (this.hasPropertyChangedCallback) {
                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                        this.propertyChangedCallback.call(this.obj, this.propertyKey, newValue, currentValue, this.persistentFlags | flags);
                    }
                }
            }
            else if (!this.inBatch) {
                this.inBatch = true;
                this.oldValue = currentValue;
                this.lifecycle.batch.add(this);
            }
        }
        else {
            // See SetterObserver.setValue for explanation
            this.obj[this.propertyKey] = newValue;
        }
    }
    subscribe(subscriber) {
        if (this.observing === false) {
            this.observing = true;
            const currentValue = this.obj[this.propertyKey];
            this.currentValue = this.shouldInterceptSet
                ? this.$set(currentValue)
                : currentValue;
            this.createGetterSetter();
        }
        this.addSubscriber(subscriber);
    }
    createGetterSetter() {
        if (!Reflect.defineProperty(this.obj, this.propertyKey, {
            enumerable: true,
            configurable: true,
            get: () => this.currentValue,
            set: (value) => {
                this.setValue(value, 0 /* none */);
            }
        })) {
            Reporter.write(1, this.propertyKey, this.obj);
        }
    }
};
BindableObserver = BindableObserver_1 = __decorate$g([
    subscriberCollection(),
    __metadata$g("design:paramtypes", [Object, Number, Object, String, String, Function])
], BindableObserver);

var __decorate$h = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$h = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
class BindingModeBehavior {
    constructor(mode) {
        this.mode = mode;
        this.originalModes = new WeakMap();
    }
    bind(flags, scope, binding) {
        this.originalModes.set(binding, binding.mode);
        binding.mode = this.mode;
    }
    unbind(flags, scope, binding) {
        binding.mode = this.originalModes.get(binding);
    }
}
let OneTimeBindingBehavior = class OneTimeBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(BindingMode.oneTime);
    }
};
OneTimeBindingBehavior = __decorate$h([
    bindingBehavior('oneTime'),
    __metadata$h("design:paramtypes", [])
], OneTimeBindingBehavior);
let ToViewBindingBehavior = class ToViewBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(BindingMode.toView);
    }
};
ToViewBindingBehavior = __decorate$h([
    bindingBehavior('toView'),
    __metadata$h("design:paramtypes", [])
], ToViewBindingBehavior);
let FromViewBindingBehavior = class FromViewBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(BindingMode.fromView);
    }
};
FromViewBindingBehavior = __decorate$h([
    bindingBehavior('fromView'),
    __metadata$h("design:paramtypes", [])
], FromViewBindingBehavior);
let TwoWayBindingBehavior = class TwoWayBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(BindingMode.twoWay);
    }
};
TwoWayBindingBehavior = __decorate$h([
    bindingBehavior('twoWay'),
    __metadata$h("design:paramtypes", [])
], TwoWayBindingBehavior);

var __decorate$i = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$i = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let DebounceBindingBehavior = class DebounceBindingBehavior extends BindingInterceptor {
    constructor(binding, expr) {
        super(binding, expr);
        this.opts = { delay: 0 };
        this.firstArg = null;
        this.task = null;
        this.taskQueue = binding.locator.get(IScheduler).getPostRenderTaskQueue();
        if (expr.args.length > 0) {
            this.firstArg = expr.args[0];
        }
    }
    callSource(args) {
        this.queueTask(() => this.binding.callSource(args));
        return void 0;
    }
    handleChange(newValue, previousValue, flags) {
        this.queueTask(() => this.binding.handleChange(newValue, previousValue, flags));
    }
    queueTask(callback) {
        if (this.task !== null) {
            this.task.cancel();
        }
        this.task = this.taskQueue.queueTask(callback, this.opts);
    }
    $bind(flags, scope, part) {
        if (this.firstArg !== null) {
            const delay = Number(this.firstArg.evaluate(flags, scope, this.locator, part));
            if (!isNaN(delay)) {
                this.opts.delay = delay;
            }
        }
        this.binding.$bind(flags, scope, part);
    }
};
DebounceBindingBehavior = __decorate$i([
    bindingBehavior('debounce'),
    __metadata$i("design:paramtypes", [Object, BindingBehaviorExpression])
], DebounceBindingBehavior);

var __decorate$j = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$j = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$4 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let SignalBindingBehavior = class SignalBindingBehavior {
    constructor(signaler) {
        this.signaler = signaler;
    }
    bind(flags, scope, binding, ...args) {
        if (!binding.updateTarget) {
            throw Reporter.error(11);
        }
        if (arguments.length === 4) {
            const name = args[0];
            this.signaler.addSignalListener(name, binding);
            binding.signal = name;
        }
        else if (arguments.length > 4) {
            const names = Array.prototype.slice.call(args.length + 3, 3);
            let i = names.length;
            while (i--) {
                const name = names[i];
                this.signaler.addSignalListener(name, binding);
            }
            binding.signal = names;
        }
        else {
            throw Reporter.error(12);
        }
    }
    unbind(flags, scope, binding) {
        const name = binding.signal;
        binding.signal = null;
        if (Array.isArray(name)) {
            const names = name;
            let i = names.length;
            while (i--) {
                this.signaler.removeSignalListener(names[i], binding);
            }
        }
        else {
            this.signaler.removeSignalListener(name, binding);
        }
    }
};
SignalBindingBehavior = __decorate$j([
    bindingBehavior('signal'),
    __param$4(0, ISignaler),
    __metadata$j("design:paramtypes", [Object])
], SignalBindingBehavior);

var __decorate$k = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$k = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let ThrottleBindingBehavior = class ThrottleBindingBehavior extends BindingInterceptor {
    constructor(binding, expr) {
        super(binding, expr);
        this.opts = { delay: 0 };
        this.firstArg = null;
        this.task = null;
        this.lastCall = 0;
        this.taskQueue = binding.locator.get(IScheduler).getPostRenderTaskQueue();
        this.now = binding.locator.get(Now);
        if (expr.args.length > 0) {
            this.firstArg = expr.args[0];
        }
    }
    callSource(args) {
        this.queueTask(() => this.binding.callSource(args));
        return void 0;
    }
    handleChange(newValue, previousValue, flags) {
        this.queueTask(() => this.binding.handleChange(newValue, previousValue, flags));
    }
    queueTask(callback) {
        const opts = this.opts;
        const now = this.now;
        const nextDelay = this.lastCall + opts.delay - now();
        if (nextDelay > 0) {
            if (this.task !== null) {
                this.task.cancel();
            }
            opts.delay = nextDelay;
            this.task = this.taskQueue.queueTask(() => {
                this.lastCall = now();
                callback();
            }, opts);
        }
        else {
            this.lastCall = now();
            callback();
        }
    }
    $bind(flags, scope, part) {
        if (this.firstArg !== null) {
            const delay = Number(this.firstArg.evaluate(flags, scope, this.locator, part));
            if (!isNaN(delay)) {
                this.opts.delay = delay;
            }
        }
        this.binding.$bind(flags, scope, part);
    }
};
ThrottleBindingBehavior = __decorate$k([
    bindingBehavior('throttle'),
    __metadata$k("design:paramtypes", [Object, BindingBehaviorExpression])
], ThrottleBindingBehavior);

var __decorate$l = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$l = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
function bindable(configOrTarget, prop) {
    let config;
    function decorator($target, $prop) {
        if (arguments.length > 1) {
            // Non invocation:
            // - @bindable
            // Invocation with or w/o opts:
            // - @bindable()
            // - @bindable({...opts})
            config.property = $prop;
        }
        Metadata.define(Bindable.name, BindableDefinition.create($prop, config), $target.constructor, $prop);
        Protocol.annotation.appendTo($target.constructor, Bindable.keyFrom($prop));
    }
    if (arguments.length > 1) {
        // Non invocation:
        // - @bindable
        config = {};
        decorator(configOrTarget, prop);
        return;
    }
    else if (typeof configOrTarget === 'string') {
        // ClassDecorator
        // - @bindable('bar')
        // Direct call:
        // - @bindable('bar')(Foo)
        config = {};
        return decorator;
    }
    // Invocation with or w/o opts:
    // - @bindable()
    // - @bindable({...opts})
    config = configOrTarget === void 0 ? {} : configOrTarget;
    return decorator;
}
function isBindableAnnotation(key) {
    return key.startsWith(Bindable.name);
}
const Bindable = {
    name: Protocol.annotation.keyFor('bindable'),
    keyFrom(name) {
        return `${Bindable.name}:${name}`;
    },
    from(...bindableLists) {
        const bindables = {};
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const isArray = Array.isArray;
        function addName(name) {
            bindables[name] = BindableDefinition.create(name);
        }
        function addDescription(name, def) {
            bindables[name] = def instanceof BindableDefinition ? def : BindableDefinition.create(name, def);
        }
        function addList(maybeList) {
            if (isArray(maybeList)) {
                maybeList.forEach(addName);
            }
            else if (maybeList instanceof BindableDefinition) {
                bindables[maybeList.property] = maybeList;
            }
            else if (maybeList !== void 0) {
                Object.keys(maybeList).forEach(name => addDescription(name, maybeList[name]));
            }
        }
        bindableLists.forEach(addList);
        return bindables;
    },
    for(Type) {
        let def;
        const builder = {
            add(configOrProp) {
                let prop;
                let config;
                if (typeof configOrProp === 'string') {
                    prop = configOrProp;
                    config = { property: prop };
                }
                else {
                    prop = configOrProp.property;
                    config = configOrProp;
                }
                def = BindableDefinition.create(prop, config);
                if (!Metadata.hasOwn(Bindable.name, Type, prop)) {
                    Protocol.annotation.appendTo(Type, Bindable.keyFrom(prop));
                }
                Metadata.define(Bindable.name, def, Type, prop);
                return builder;
            },
            mode(mode) {
                def.mode = mode;
                return builder;
            },
            callback(callback) {
                def.callback = callback;
                return builder;
            },
            attribute(attribute) {
                def.attribute = attribute;
                return builder;
            },
            primary() {
                def.primary = true;
                return builder;
            },
            set(setInterpreter) {
                def.set = setInterpreter;
                return builder;
            }
        };
        return builder;
    },
    getAll(Type) {
        const propStart = Bindable.name.length + 1;
        const defs = [];
        const prototypeChain = getPrototypeChain(Type);
        let iProto = prototypeChain.length;
        let iDefs = 0;
        let keys;
        let keysLen;
        let Class;
        while (--iProto >= 0) {
            Class = prototypeChain[iProto];
            keys = Protocol.annotation.getKeys(Class).filter(isBindableAnnotation);
            keysLen = keys.length;
            for (let i = 0; i < keysLen; ++i) {
                defs[iDefs++] = Metadata.getOwn(Bindable.name, Class, keys[i].slice(propStart));
            }
        }
        return defs;
    },
};
class BindableDefinition {
    constructor(attribute, callback, mode, primary, property, set) {
        this.attribute = attribute;
        this.callback = callback;
        this.mode = mode;
        this.primary = primary;
        this.property = property;
        this.set = set;
    }
    static create(prop, def = {}) {
        return new BindableDefinition(firstDefined(def.attribute, kebabCase(prop)), firstDefined(def.callback, `${prop}Changed`), firstDefined(def.mode, BindingMode.toView), firstDefined(def.primary, false), firstDefined(def.property, prop), firstDefined(def.set, PLATFORM.noop));
    }
}
/* eslint-enable @typescript-eslint/no-unused-vars,spaced-comment */

function customAttribute(nameOrDef) {
    return function (target) {
        return CustomAttribute.define(nameOrDef, target);
    };
}
function templateController(nameOrDef) {
    return function (target) {
        return CustomAttribute.define(typeof nameOrDef === 'string'
            ? { isTemplateController: true, name: nameOrDef }
            : { isTemplateController: true, ...nameOrDef }, target);
    };
}
class CustomAttributeDefinition {
    constructor(Type, name, aliases, key, defaultBindingMode, isTemplateController, bindables, strategy, hooks, noMultiBindings) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.defaultBindingMode = defaultBindingMode;
        this.isTemplateController = isTemplateController;
        this.bindables = bindables;
        this.strategy = strategy;
        this.hooks = hooks;
        this.noMultiBindings = noMultiBindings;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        return new CustomAttributeDefinition(Type, firstDefined(CustomAttribute.getAnnotation(Type, 'name'), name), mergeArrays(CustomAttribute.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), CustomAttribute.keyFrom(name), firstDefined(CustomAttribute.getAnnotation(Type, 'defaultBindingMode'), def.defaultBindingMode, Type.defaultBindingMode, BindingMode.toView), firstDefined(CustomAttribute.getAnnotation(Type, 'isTemplateController'), def.isTemplateController, Type.isTemplateController, false), Bindable.from(...Bindable.getAll(Type), CustomAttribute.getAnnotation(Type, 'bindables'), Type.bindables, def.bindables), firstDefined(CustomAttribute.getAnnotation(Type, 'strategy'), def.strategy, Type.strategy, 1 /* getterSetter */), firstDefined(CustomAttribute.getAnnotation(Type, 'hooks'), def.hooks, Type.hooks, new HooksDefinition(Type.prototype)), firstDefined(CustomAttribute.getAnnotation(Type, 'noMultiBindings'), def.noMultiBindings, Type.noMultiBindings, false));
    }
    register(container) {
        const { Type, key, aliases } = this;
        Registration.transient(key, Type).register(container);
        Registration.aliasTo(key, Type).register(container);
        registerAliases(aliases, CustomAttribute, key, container);
    }
}
const CustomAttribute = {
    name: Protocol.resource.keyFor('custom-attribute'),
    keyFrom(name) {
        return `${CustomAttribute.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && Metadata.hasOwn(CustomAttribute.name, value);
    },
    for(node, name) {
        return Metadata.getOwn(CustomAttribute.keyFrom(name), node);
    },
    define(nameOrDef, Type) {
        const definition = CustomAttributeDefinition.create(nameOrDef, Type);
        Metadata.define(CustomAttribute.name, definition, definition.Type);
        Metadata.define(CustomAttribute.name, definition, definition);
        Protocol.resource.appendTo(Type, CustomAttribute.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = Metadata.getOwn(CustomAttribute.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        Metadata.define(Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return Metadata.getOwn(Protocol.annotation.keyFor(prop), Type);
    },
};

const INode = DI.createInterface('INode').noDefault();
const IRenderLocation = DI.createInterface('IRenderLocation').noDefault();
const IDOM = DI.createInterface('IDOM').noDefault();
const ni = function (...args) {
    throw Reporter.error(1000); // TODO: create error code (not implemented exception)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
}; // this function doesn't need typing because it is never directly called
const niDOM = {
    addEventListener: ni,
    appendChild: ni,
    cloneNode: ni,
    convertToRenderLocation: ni,
    createDocumentFragment: ni,
    createNodeSequence: ni,
    createElement: ni,
    createCustomEvent: ni,
    dispatchEvent: ni,
    createNodeObserver: ni,
    createTemplate: ni,
    createTextNode: ni,
    getEffectiveParentNode: ni,
    setEffectiveParentNode: ni,
    insertBefore: ni,
    isMarker: ni,
    isNodeInstance: ni,
    isRenderLocation: ni,
    makeTarget: ni,
    registerElementResolver: ni,
    remove: ni,
    removeEventListener: ni,
    setAttribute: ni
};
const DOM = {
    ...niDOM,
    scheduler: (void 0),
    get isInitialized() {
        return Reflect.get(this, '$initialized') === true;
    },
    initialize(dom) {
        if (this.isInitialized) {
            throw Reporter.error(1001); // TODO: create error code (already initialized, check isInitialized property and call destroy() if you want to assign a different dom)
        }
        const descriptors = {};
        const protos = [dom];
        let proto = Object.getPrototypeOf(dom);
        while (proto && proto !== Object.prototype) {
            protos.unshift(proto);
            proto = Object.getPrototypeOf(proto);
        }
        for (proto of protos) {
            Object.assign(descriptors, Object.getOwnPropertyDescriptors(proto));
        }
        const keys = [];
        let key;
        let descriptor;
        for (key in descriptors) {
            descriptor = descriptors[key];
            if (descriptor.configurable && descriptor.writable) {
                Reflect.defineProperty(this, key, descriptor);
                keys.push(key);
            }
        }
        Reflect.set(this, '$domKeys', keys);
        Reflect.set(this, '$initialized', true);
    },
    destroy() {
        if (!this.isInitialized) {
            throw Reporter.error(1002); // TODO: create error code (already destroyed)
        }
        const keys = Reflect.get(this, '$domKeys');
        keys.forEach(key => {
            Reflect.deleteProperty(this, key);
        });
        Object.assign(this, niDOM);
        Reflect.set(this, '$domKeys', PLATFORM.emptyArray);
        Reflect.set(this, '$initialized', false);
    }
};

var __decorate$m = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$m = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$5 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
class FlagsTemplateController {
    constructor(factory, location, flags) {
        this.factory = factory;
        this.flags = flags;
        this.id = nextId('au$component');
        this.view = this.factory.create();
        this.view.hold(location, 1 /* insertBefore */);
    }
    beforeBind(flags) {
        this.view.parent = this.$controller;
        return this.view.bind(flags | this.flags, this.$controller.scope);
    }
    beforeAttach(flags) {
        this.view.attach(flags);
    }
    beforeDetach(flags) {
        this.view.detach(flags);
    }
    beforeUnbind(flags) {
        const task = this.view.unbind(flags);
        this.view.parent = void 0;
        return task;
    }
}
let InfrequentMutations = class InfrequentMutations extends FlagsTemplateController {
    constructor(factory, location) {
        super(factory, location, 268435456 /* noTargetObserverQueue */);
    }
};
InfrequentMutations = __decorate$m([
    templateController('infrequent-mutations'),
    __param$5(0, IViewFactory), __param$5(1, IRenderLocation),
    __metadata$m("design:paramtypes", [Object, Object])
], InfrequentMutations);
let FrequentMutations = class FrequentMutations extends FlagsTemplateController {
    constructor(factory, location) {
        super(factory, location, 536870912 /* persistentTargetObserverQueue */);
    }
};
FrequentMutations = __decorate$m([
    templateController('frequent-mutations'),
    __param$5(0, IViewFactory), __param$5(1, IRenderLocation),
    __metadata$m("design:paramtypes", [Object, Object])
], FrequentMutations);
let ObserveShallow = class ObserveShallow extends FlagsTemplateController {
    constructor(factory, location) {
        super(factory, location, 134217728 /* observeLeafPropertiesOnly */);
    }
};
ObserveShallow = __decorate$m([
    templateController('observe-shallow'),
    __param$5(0, IViewFactory), __param$5(1, IRenderLocation),
    __metadata$m("design:paramtypes", [Object, Object])
], ObserveShallow);

var __decorate$n = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$n = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$6 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const LifecycleTask = {
    done: {
        done: true,
        canCancel() { return false; },
        cancel() { return; },
        wait() { return Promise.resolve(); }
    }
};
var TaskSlot;
(function (TaskSlot) {
    TaskSlot[TaskSlot["beforeCreate"] = 0] = "beforeCreate";
    TaskSlot[TaskSlot["beforeRender"] = 1] = "beforeRender";
    TaskSlot[TaskSlot["beforeBind"] = 2] = "beforeBind";
    TaskSlot[TaskSlot["beforeAttach"] = 3] = "beforeAttach";
})(TaskSlot || (TaskSlot = {}));
const IStartTask = DI.createInterface('IStartTask').noDefault();
var TaskType;
(function (TaskType) {
    TaskType[TaskType["with"] = 0] = "with";
    TaskType[TaskType["from"] = 1] = "from";
})(TaskType || (TaskType = {}));
// eslint-disable-next-line @typescript-eslint/class-name-casing
const StartTask = class $StartTask {
    constructor(type) {
        this.type = type;
        this._slot = void 0;
        this._promiseOrTask = void 0;
        this._container = void 0;
        this._key = void 0;
        this._callback = void 0;
        this._task = void 0;
    }
    get slot() {
        if (this._slot === void 0) {
            throw new Error('StartTask.slot is not set');
        }
        return this._slot;
    }
    get promiseOrTask() {
        if (this._promiseOrTask === void 0) {
            throw new Error('StartTask.promiseOrTask is not set');
        }
        return this._promiseOrTask;
    }
    get container() {
        if (this._container === void 0) {
            throw new Error('StartTask.container is not set');
        }
        return this._container;
    }
    get key() {
        if (this._key === void 0) {
            throw new Error('StartTask.key is not set');
        }
        return this._key;
    }
    get callback() {
        if (this._callback === void 0) {
            throw new Error('StartTask.callback is not set');
        }
        return this._callback;
    }
    get task() {
        if (this._task === void 0) {
            throw new Error('StartTask.task is not set');
        }
        return this._task;
    }
    static with(key) {
        const task = new $StartTask(0 /* with */);
        task._key = key;
        return task;
    }
    static from(promiseOrTask) {
        const task = new $StartTask(1 /* from */);
        task._promiseOrTask = promiseOrTask;
        return task;
    }
    beforeCreate() {
        return this.at(0 /* beforeCreate */);
    }
    beforeRender() {
        return this.at(1 /* beforeRender */);
    }
    beforeBind() {
        return this.at(2 /* beforeBind */);
    }
    beforeAttach() {
        return this.at(3 /* beforeAttach */);
    }
    at(slot) {
        this._slot = slot;
        return this;
    }
    call(fn) {
        this._callback = fn;
        return this;
    }
    register(container) {
        return this._container = container.register(Registration.instance(IStartTask, this));
    }
    resolveTask() {
        if (this._task === void 0) {
            switch (this.type) {
                case 0 /* with */:
                    this._task = new ProviderTask(this.container, this.key, this.callback);
                    break;
                case 1 /* from */:
                    this._task = new TerminalTask(this.promiseOrTask);
                    break;
            }
        }
        return this.task;
    }
};
const IStartTaskManager = DI.createInterface('IStartTaskManager').noDefault();
let StartTaskManager = class StartTaskManager {
    constructor(locator) {
        this.locator = locator;
    }
    static register(container) {
        return Registration.singleton(IStartTaskManager, this).register(container);
    }
    runBeforeCreate(locator = this.locator) {
        return this.run(0 /* beforeCreate */, locator);
    }
    runBeforeRender(locator = this.locator) {
        return this.run(1 /* beforeRender */, locator);
    }
    runBeforeBind(locator = this.locator) {
        return this.run(2 /* beforeBind */, locator);
    }
    runBeforeAttach(locator = this.locator) {
        return this.run(3 /* beforeAttach */, locator);
    }
    run(slot, locator = this.locator) {
        const tasks = locator.getAll(IStartTask)
            .filter(startTask => startTask.slot === slot)
            .map(startTask => startTask.resolveTask())
            .filter(task => !task.done);
        if (tasks.length === 0) {
            return LifecycleTask.done;
        }
        return new AggregateTerminalTask(tasks);
    }
};
StartTaskManager = __decorate$n([
    __param$6(0, IServiceLocator),
    __metadata$n("design:paramtypes", [Object])
], StartTaskManager);
class PromiseTask {
    constructor(promise, next, context, ...args) {
        this.done = false;
        this.hasStarted = false;
        this.isCancelled = false;
        this.promise = promise.then(value => {
            if (this.isCancelled === true) {
                return;
            }
            this.hasStarted = true;
            if (next !== null) {
                const nextResult = next.call(context, value, ...args);
                if (nextResult === void 0) {
                    this.done = true;
                }
                else {
                    const nextPromise = nextResult.then instanceof Function
                        ? nextResult
                        : nextResult.wait();
                    return nextPromise.then(() => {
                        this.done = true;
                    });
                }
            }
        });
    }
    canCancel() {
        return !this.hasStarted;
    }
    cancel() {
        if (this.canCancel()) {
            this.isCancelled = true;
        }
    }
    wait() {
        return this.promise;
    }
}
class ProviderTask {
    constructor(container, key, callback) {
        this.container = container;
        this.key = key;
        this.callback = callback;
        this.done = false;
    }
    canCancel() {
        return false;
    }
    cancel() {
        return;
    }
    wait() {
        if (this.promise === void 0) {
            const instance = this.container.get(this.key);
            const maybePromiseOrTask = this.callback.call(void 0, instance);
            this.promise = maybePromiseOrTask === void 0
                ? Promise.resolve()
                : maybePromiseOrTask.then instanceof Function
                    ? maybePromiseOrTask
                    : maybePromiseOrTask.wait();
            this.promise = this.promise.then(() => {
                this.done = true;
                this.container = (void 0);
                this.key = (void 0);
                this.callback = (void 0);
            }).catch(e => { throw e; });
        }
        return this.promise;
    }
}
class ContinuationTask {
    constructor(antecedent, next, context, ...args) {
        this.done = false;
        this.hasStarted = false;
        this.isCancelled = false;
        const promise = antecedent.then instanceof Function
            ? antecedent
            : antecedent.wait();
        this.promise = promise.then(() => {
            if (this.isCancelled === true) {
                return;
            }
            this.hasStarted = true;
            const nextResult = next.call(context, ...args);
            if (nextResult === void 0) {
                this.done = true;
            }
            else {
                const nextPromise = nextResult.then instanceof Function
                    ? nextResult
                    : nextResult.wait();
                return nextPromise.then(() => {
                    this.done = true;
                });
            }
        });
    }
    canCancel() {
        return !this.hasStarted;
    }
    cancel() {
        if (this.canCancel()) {
            this.isCancelled = true;
        }
    }
    wait() {
        return this.promise;
    }
}
class TerminalTask {
    constructor(antecedent) {
        this.done = false;
        this.promise = antecedent.then instanceof Function
            ? antecedent
            : antecedent.wait();
        this.promise.then(() => {
            this.done = true;
        }).catch(e => { throw e; });
    }
    canCancel() {
        return false;
    }
    cancel() {
        return;
    }
    wait() {
        return this.promise;
    }
}
class AggregateContinuationTask {
    constructor(antecedents, next, context, ...args) {
        this.done = false;
        this.hasStarted = false;
        this.isCancelled = false;
        this.promise = Promise.all(antecedents.map(t => t.wait())).then(() => {
            if (this.isCancelled === true) {
                return;
            }
            this.hasStarted = true;
            const nextResult = next.call(context, ...args);
            if (nextResult === void 0) {
                this.done = true;
            }
            else {
                return nextResult.wait().then(() => {
                    this.done = true;
                });
            }
        });
    }
    canCancel() {
        return !this.hasStarted;
    }
    cancel() {
        if (this.canCancel()) {
            this.isCancelled = true;
        }
    }
    wait() {
        return this.promise;
    }
}
class AggregateTerminalTask {
    constructor(antecedents) {
        this.done = false;
        this.promise = Promise.all(antecedents.map(t => t.wait())).then(() => {
            this.done = true;
        });
    }
    canCancel() {
        return false;
    }
    cancel() {
        return;
    }
    wait() {
        return this.promise;
    }
}
function hasAsyncWork(value) {
    return !(value === void 0 || value.done === true);
}

var __decorate$o = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$o = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$7 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let If = class If {
    constructor(ifFactory, location) {
        this.ifFactory = ifFactory;
        this.location = location;
        this.id = nextId('au$component');
        this.elseFactory = void 0;
        this.elseView = void 0;
        this.ifView = void 0;
        this.view = void 0;
        this.task = LifecycleTask.done;
        this.value = false;
    }
    ;
    beforeBind(flags) {
        if (this.task.done) {
            this.task = this.swap(this.value, flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.swap, this, this.value, flags);
        }
        return this.task;
    }
    beforeAttach(flags) {
        if (this.task.done) {
            this.attachView(flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.attachView, this, flags);
        }
    }
    beforeDetach(flags) {
        if (this.view !== void 0) {
            if (this.task.done) {
                this.view.detach(flags);
            }
            else {
                this.task = new ContinuationTask(this.task, this.view.detach, this.view, flags);
            }
        }
        return this.task;
    }
    beforeUnbind(flags) {
        if (this.view !== void 0) {
            if (this.task.done) {
                this.task = this.view.unbind(flags);
            }
            else {
                this.task = new ContinuationTask(this.task, this.view.unbind, this.view, flags);
            }
        }
        return this.task;
    }
    caching(flags) {
        if (this.ifView !== void 0 && this.ifView.release(flags)) {
            this.ifView = void 0;
        }
        if (this.elseView !== void 0 && this.elseView.release(flags)) {
            this.elseView = void 0;
        }
        this.view = void 0;
    }
    valueChanged(newValue, oldValue, flags) {
        if ((this.$controller.state & 4 /* isBound */) === 0) {
            return;
        }
        if (this.task.done) {
            this.task = this.swap(this.value, flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.swap, this, this.value, flags);
        }
    }
    /** @internal */
    updateView(value, flags) {
        let view;
        if (value) {
            view = this.ifView = this.ensureView(this.ifView, this.ifFactory, flags);
        }
        else if (this.elseFactory != void 0) {
            view = this.elseView = this.ensureView(this.elseView, this.elseFactory, flags);
        }
        else {
            view = void 0;
        }
        return view;
    }
    /** @internal */
    ensureView(view, factory, flags) {
        if (view === void 0) {
            view = factory.create(flags);
        }
        view.hold(this.location, 1 /* insertBefore */);
        return view;
    }
    swap(value, flags) {
        let task = LifecycleTask.done;
        if ((value === true && this.elseView !== void 0)
            || (value !== true && this.ifView !== void 0)) {
            task = this.deactivate(flags);
        }
        if (task.done) {
            const view = this.updateView(value, flags);
            task = this.activate(view, flags);
        }
        else {
            task = new PromiseTask(task.wait().then(() => this.updateView(value, flags)), this.activate, this, flags);
        }
        return task;
    }
    deactivate(flags) {
        const view = this.view;
        if (view === void 0) {
            return LifecycleTask.done;
        }
        view.detach(flags); // TODO: link this up with unbind
        const task = view.unbind(flags);
        view.parent = void 0;
        return task;
    }
    activate(view, flags) {
        this.view = view;
        if (view === void 0) {
            return LifecycleTask.done;
        }
        let task = this.bindView(flags);
        if ((this.$controller.state & 32 /* isAttached */) === 0) {
            return task;
        }
        if (task.done) {
            this.attachView(flags);
        }
        else {
            task = new ContinuationTask(task, this.attachView, this, flags);
        }
        return task;
    }
    bindView(flags) {
        if (this.view !== void 0 && (this.$controller.state & 5 /* isBoundOrBinding */) > 0) {
            this.view.parent = this.$controller;
            return this.view.bind(flags, this.$controller.scope, this.$controller.part);
        }
        return LifecycleTask.done;
    }
    attachView(flags) {
        if (this.view !== void 0 && (this.$controller.state & 40 /* isAttachedOrAttaching */) > 0) {
            this.view.attach(flags);
        }
    }
};
__decorate$o([
    bindable,
    __metadata$o("design:type", Boolean)
], If.prototype, "value", void 0);
If = __decorate$o([
    templateController('if'),
    __param$7(0, IViewFactory),
    __param$7(1, IRenderLocation),
    __metadata$o("design:paramtypes", [Object, Object])
], If);
let Else = class Else {
    constructor(factory) {
        this.factory = factory;
        this.id = nextId('au$component');
    }
    link(ifBehavior) {
        if (ifBehavior instanceof If) {
            ifBehavior.elseFactory = this.factory;
        }
        else if (ifBehavior.viewModel instanceof If) {
            ifBehavior.viewModel.elseFactory = this.factory;
        }
        else {
            throw new Error(`Unsupported IfBehavior`); // TODO: create error code
        }
    }
};
Else = __decorate$o([
    templateController('else'),
    __param$7(0, IViewFactory),
    __metadata$o("design:paramtypes", [Object])
], Else);

var __decorate$p = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$p = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$8 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let Repeat = class Repeat {
    constructor(location, renderable, factory) {
        this.location = location;
        this.renderable = renderable;
        this.factory = factory;
        this.id = nextId('au$component');
        this.hasPendingInstanceMutation = false;
        this.observer = void 0;
        this.views = [];
        this.key = void 0;
        this.task = LifecycleTask.done;
        this.normalizedItems = void 0;
    }
    beforeBind(flags) {
        this.checkCollectionObserver(flags);
        const bindings = this.renderable.bindings;
        const { length } = bindings;
        let binding;
        for (let i = 0; i < length; ++i) {
            binding = bindings[i];
            if (binding.target === this && binding.targetProperty === 'items') {
                this.forOf = binding.sourceExpression;
                break;
            }
        }
        this.local = this.forOf.declaration.evaluate(flags, this.$controller.scope, null);
        this.normalizeToArray(flags);
        this.processViewsKeyed(void 0, flags);
        return this.task;
    }
    beforeAttach(flags) {
        if (this.task.done) {
            this.attachViews(void 0, flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.attachViews, this, void 0, flags);
        }
    }
    beforeDetach(flags) {
        if (this.task.done) {
            this.detachViewsByRange(0, this.views.length, flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.detachViewsByRange, this, 0, this.views.length, flags);
        }
    }
    beforeUnbind(flags) {
        this.checkCollectionObserver(flags);
        if (this.task.done) {
            this.task = this.unbindAndRemoveViewsByRange(0, this.views.length, flags, false);
        }
        else {
            this.task = new ContinuationTask(this.task, this.unbindAndRemoveViewsByRange, this, 0, this.views.length, flags, false);
        }
        return this.task;
    }
    // called by SetterObserver
    itemsChanged(flags) {
        flags |= this.$controller.flags;
        this.checkCollectionObserver(flags);
        flags |= 16 /* updateTargetInstance */;
        this.normalizeToArray(flags);
        this.processViewsKeyed(void 0, flags);
    }
    // called by a CollectionObserver
    handleCollectionChange(indexMap, flags) {
        flags |= this.$controller.flags;
        flags |= (960 /* fromFlush */ | 16 /* updateTargetInstance */);
        this.normalizeToArray(flags);
        this.processViewsKeyed(indexMap, flags);
    }
    processViewsKeyed(indexMap, flags) {
        const oldLength = this.views.length;
        if (indexMap === void 0) {
            if ((this.$controller.state & 5 /* isBoundOrBinding */) > 0) {
                this.detachViewsByRange(0, oldLength, flags);
                if (this.task.done) {
                    this.task = this.unbindAndRemoveViewsByRange(0, oldLength, flags, false);
                }
                else {
                    this.task = new ContinuationTask(this.task, this.unbindAndRemoveViewsByRange, this, 0, oldLength, flags, false);
                }
                if (this.task.done) {
                    this.task = this.createAndBindAllViews(flags);
                }
                else {
                    this.task = new ContinuationTask(this.task, this.createAndBindAllViews, this, flags);
                }
            }
            if ((this.$controller.state & 40 /* isAttachedOrAttaching */) > 0) {
                if (this.task.done) {
                    this.attachViewsKeyed(flags);
                }
                else {
                    this.task = new ContinuationTask(this.task, this.attachViewsKeyed, this, flags);
                }
            }
        }
        else {
            applyMutationsToIndices(indexMap);
            if ((this.$controller.state & 5 /* isBoundOrBinding */) > 0) {
                // first detach+unbind+(remove from array) the deleted view indices
                if (indexMap.deletedItems.length > 0) {
                    indexMap.deletedItems.sort(compareNumber);
                    if (this.task.done) {
                        this.detachViewsByKey(indexMap, flags);
                    }
                    else {
                        this.task = new ContinuationTask(this.task, this.detachViewsByKey, this, indexMap, flags);
                    }
                    if (this.task.done) {
                        this.task = this.unbindAndRemoveViewsByKey(indexMap, flags);
                    }
                    else {
                        this.task = new ContinuationTask(this.task, this.unbindAndRemoveViewsByKey, this, indexMap, flags);
                    }
                }
                // then insert new views at the "added" indices to bring the views array in aligment with indexMap size
                if (this.task.done) {
                    this.task = this.createAndBindNewViewsByKey(indexMap, flags);
                }
                else {
                    this.task = new ContinuationTask(this.task, this.createAndBindNewViewsByKey, this, indexMap, flags);
                }
            }
            if ((this.$controller.state & 40 /* isAttachedOrAttaching */) > 0) {
                if (this.task.done) {
                    this.sortViewsByKey(oldLength, indexMap, flags);
                }
                else {
                    this.task = new ContinuationTask(this.task, this.sortViewsByKey, this, oldLength, indexMap, flags);
                }
            }
        }
    }
    // todo: subscribe to collection from inner expression
    checkCollectionObserver(flags) {
        const oldObserver = this.observer;
        if ((flags & 8192 /* fromUnbind */)) {
            if (oldObserver !== void 0) {
                oldObserver.unsubscribeFromCollection(this);
            }
        }
        else if ((this.$controller.state & 5 /* isBoundOrBinding */) > 0) {
            const newObserver = this.observer = getCollectionObserver(flags, this.$controller.lifecycle, this.items);
            if (oldObserver !== newObserver && oldObserver) {
                oldObserver.unsubscribeFromCollection(this);
            }
            if (newObserver) {
                newObserver.subscribeToCollection(this);
            }
        }
    }
    normalizeToArray(flags) {
        const items = this.items;
        if (items instanceof Array) {
            this.normalizedItems = items;
            return;
        }
        const forOf = this.forOf;
        if (forOf === void 0) {
            return;
        }
        const normalizedItems = [];
        this.forOf.iterate(flags, items, (arr, index, item) => {
            normalizedItems[index] = item;
        });
        this.normalizedItems = normalizedItems;
    }
    detachViewsByRange(iStart, iEnd, flags) {
        const views = this.views;
        this.$controller.lifecycle.afterDetach.begin();
        let view;
        for (let i = iStart; i < iEnd; ++i) {
            view = views[i];
            view.release(flags);
            view.detach(flags);
        }
        this.$controller.lifecycle.afterDetach.end(flags);
    }
    unbindAndRemoveViewsByRange(iStart, iEnd, flags, adjustLength) {
        const views = this.views;
        let tasks = void 0;
        let task;
        this.$controller.lifecycle.afterUnbind.begin();
        let view;
        for (let i = iStart; i < iEnd; ++i) {
            view = views[i];
            task = view.unbind(flags);
            view.parent = void 0;
            if (!task.done) {
                if (tasks === undefined) {
                    tasks = [];
                }
                tasks.push(task);
            }
        }
        if (adjustLength) {
            this.views.length = iStart;
        }
        if (tasks === undefined) {
            this.$controller.lifecycle.afterUnbind.end(flags);
            return LifecycleTask.done;
        }
        return new AggregateContinuationTask(tasks, this.$controller.lifecycle.afterUnbind.end, this.$controller.lifecycle.afterUnbind, flags);
    }
    detachViewsByKey(indexMap, flags) {
        const views = this.views;
        this.$controller.lifecycle.afterDetach.begin();
        const deleted = indexMap.deletedItems;
        const deletedLen = deleted.length;
        let view;
        for (let i = 0; i < deletedLen; ++i) {
            view = views[deleted[i]];
            view.release(flags);
            view.detach(flags);
        }
        this.$controller.lifecycle.afterDetach.end(flags);
    }
    unbindAndRemoveViewsByKey(indexMap, flags) {
        const views = this.views;
        let tasks = void 0;
        let task;
        this.$controller.lifecycle.afterUnbind.begin();
        const deleted = indexMap.deletedItems;
        const deletedLen = deleted.length;
        let view;
        let i = 0;
        for (; i < deletedLen; ++i) {
            view = views[deleted[i]];
            task = view.unbind(flags);
            view.parent = void 0;
            if (!task.done) {
                if (tasks === undefined) {
                    tasks = [];
                }
                tasks.push(task);
            }
        }
        i = 0;
        let j = 0;
        for (; i < deletedLen; ++i) {
            j = deleted[i] - i;
            this.views.splice(j, 1);
        }
        if (tasks === undefined) {
            this.$controller.lifecycle.afterUnbind.end(flags);
            return LifecycleTask.done;
        }
        return new AggregateContinuationTask(tasks, this.$controller.lifecycle.afterUnbind.end, this.$controller.lifecycle.afterUnbind, flags);
    }
    createAndBindAllViews(flags) {
        let tasks = void 0;
        let task;
        let view;
        let viewScope;
        const $controller = this.$controller;
        const lifecycle = $controller.lifecycle;
        const parentScope = $controller.scope;
        lifecycle.afterBind.begin();
        const part = $controller.part;
        const factory = this.factory;
        const local = this.local;
        const items = this.items;
        const newLen = this.forOf.count(flags, items);
        const views = this.views = Array(newLen);
        this.forOf.iterate(flags, items, (arr, i, item) => {
            view = views[i] = factory.create(flags);
            view.parent = $controller;
            viewScope = Scope.fromParent(flags, parentScope, BindingContext.create(flags, local, item));
            setContextualProperties(viewScope.overrideContext, i, newLen);
            task = view.bind(flags, viewScope, part);
            if (!task.done) {
                if (tasks === undefined) {
                    tasks = [];
                }
                tasks.push(task);
            }
        });
        if (tasks === undefined) {
            lifecycle.afterBind.end(flags);
            return LifecycleTask.done;
        }
        return new AggregateContinuationTask(tasks, lifecycle.afterBind.end, lifecycle.afterBind, flags);
    }
    createAndBindNewViewsByKey(indexMap, flags) {
        let tasks = void 0;
        let task;
        let view;
        let viewScope;
        const factory = this.factory;
        const views = this.views;
        const local = this.local;
        const normalizedItems = this.normalizedItems;
        const $controller = this.$controller;
        const lifecycle = $controller.lifecycle;
        const parentScope = $controller.scope;
        lifecycle.afterBind.begin();
        const part = $controller.part;
        const mapLen = indexMap.length;
        for (let i = 0; i < mapLen; ++i) {
            if (indexMap[i] === -2) {
                view = factory.create(flags);
                // TODO: test with map/set/undefined/null, make sure we can use strong typing here as well, etc
                view.parent = $controller;
                viewScope = Scope.fromParent(flags, parentScope, BindingContext.create(flags, local, normalizedItems[i]));
                setContextualProperties(viewScope.overrideContext, i, mapLen);
                // update all the rest oc
                task = view.bind(flags, viewScope, part);
                views.splice(i, 0, view);
                if (!task.done) {
                    if (tasks === undefined) {
                        tasks = [];
                    }
                    tasks.push(task);
                }
            }
        }
        if (views.length !== mapLen) {
            // TODO: create error code and use reporter with more informative message
            throw new Error(`viewsLen=${views.length}, mapLen=${mapLen}`);
        }
        if (tasks === undefined) {
            lifecycle.afterBind.end(flags);
            return LifecycleTask.done;
        }
        return new AggregateContinuationTask(tasks, lifecycle.afterBind.end, lifecycle.afterBind, flags);
    }
    attachViews(indexMap, flags) {
        let view;
        const views = this.views;
        const location = this.location;
        const lifecycle = this.$controller.lifecycle;
        lifecycle.afterAttach.begin();
        if (indexMap === void 0) {
            for (let i = 0, ii = views.length; i < ii; ++i) {
                view = views[i];
                view.hold(location, 1 /* insertBefore */);
                view.nodes.unlink();
                view.attach(flags);
            }
        }
        else {
            for (let i = 0, ii = views.length; i < ii; ++i) {
                if (indexMap[i] !== i) {
                    view = views[i];
                    view.hold(location, 1 /* insertBefore */);
                    view.nodes.unlink();
                    view.attach(flags);
                }
            }
        }
        lifecycle.afterAttach.end(flags);
    }
    attachViewsKeyed(flags) {
        let view;
        const { views, location } = this;
        this.$controller.lifecycle.afterAttach.begin();
        for (let i = 0, ii = views.length; i < ii; ++i) {
            view = views[i];
            view.hold(location, 1 /* insertBefore */);
            view.nodes.unlink();
            view.attach(flags);
        }
        this.$controller.lifecycle.afterAttach.end(flags);
    }
    sortViewsByKey(oldLength, indexMap, flags) {
        // TODO: integrate with tasks
        const location = this.location;
        const views = this.views;
        const newLen = indexMap.length;
        synchronizeIndices(views, indexMap);
        // this algorithm retrieves the indices of the longest increasing subsequence of items in the repeater
        // the items on those indices are not moved; this minimizes the number of DOM operations that need to be performed
        const seq = longestIncreasingSubsequence(indexMap);
        const seqLen = seq.length;
        this.$controller.lifecycle.afterAttach.begin();
        flags |= 33554432 /* reorderNodes */;
        let next;
        let j = seqLen - 1;
        let i = newLen - 1;
        let view;
        for (; i >= 0; --i) {
            view = views[i];
            if (indexMap[i] === -2) {
                setContextualProperties(view.scope.overrideContext, i, newLen);
                view.hold(location, 1 /* insertBefore */);
                view.attach(flags);
            }
            else if (j < 0 || seqLen === 1 || i !== seq[j]) {
                setContextualProperties(view.scope.overrideContext, i, newLen);
                view.attach(flags);
            }
            else {
                if (oldLength !== newLen) {
                    setContextualProperties(view.scope.overrideContext, i, newLen);
                }
                --j;
            }
            next = views[i + 1];
            if (next !== void 0) {
                view.nodes.link(next.nodes);
            }
            else {
                view.nodes.link(location);
            }
        }
        this.$controller.lifecycle.afterAttach.end(flags);
    }
};
__decorate$p([
    bindable,
    __metadata$p("design:type", Object)
], Repeat.prototype, "items", void 0);
Repeat = __decorate$p([
    templateController('repeat'),
    __param$8(0, IRenderLocation),
    __param$8(1, IController),
    __param$8(2, IViewFactory),
    __metadata$p("design:paramtypes", [Object, Object, Object])
], Repeat);
let maxLen = 16;
let prevIndices = new Int32Array(maxLen);
let tailIndices = new Int32Array(maxLen);
// Based on inferno's lis_algorithm @ https://github.com/infernojs/inferno/blob/master/packages/inferno/src/DOM/patching.ts#L732
// with some tweaks to make it just a bit faster + account for IndexMap (and some names changes for readability)
/** @internal */
function longestIncreasingSubsequence(indexMap) {
    const len = indexMap.length;
    if (len > maxLen) {
        maxLen = len;
        prevIndices = new Int32Array(len);
        tailIndices = new Int32Array(len);
    }
    let cursor = 0;
    let cur = 0;
    let prev = 0;
    let i = 0;
    let j = 0;
    let low = 0;
    let high = 0;
    let mid = 0;
    for (; i < len; i++) {
        cur = indexMap[i];
        if (cur !== -2) {
            j = prevIndices[cursor];
            prev = indexMap[j];
            if (prev !== -2 && prev < cur) {
                tailIndices[i] = j;
                prevIndices[++cursor] = i;
                continue;
            }
            low = 0;
            high = cursor;
            while (low < high) {
                mid = (low + high) >> 1;
                prev = indexMap[prevIndices[mid]];
                if (prev !== -2 && prev < cur) {
                    low = mid + 1;
                }
                else {
                    high = mid;
                }
            }
            prev = indexMap[prevIndices[low]];
            if (cur < prev || prev === -2) {
                if (low > 0) {
                    tailIndices[i] = prevIndices[low - 1];
                }
                prevIndices[low] = i;
            }
        }
    }
    i = ++cursor;
    const result = new Int32Array(i);
    cur = prevIndices[cursor - 1];
    while (cursor-- > 0) {
        result[cursor] = cur;
        cur = tailIndices[cur];
    }
    while (i-- > 0)
        prevIndices[i] = 0;
    return result;
}
function setContextualProperties(oc, index, length) {
    const isFirst = index === 0;
    const isLast = index === length - 1;
    const isEven = index % 2 === 0;
    oc.$index = index;
    oc.$first = isFirst;
    oc.$last = isLast;
    oc.$middle = !isFirst && !isLast;
    oc.$even = isEven;
    oc.$odd = !isEven;
    oc.$length = length;
}

var __decorate$q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$q = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$9 = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let Replaceable = class Replaceable {
    constructor(factory, location) {
        this.factory = factory;
        this.location = location;
        this.id = nextId('au$component');
        this.view = this.factory.create();
        this.view.hold(location, 1 /* insertBefore */);
    }
    beforeBind(flags) {
        this.view.parent = this.$controller;
        return this.view.bind(flags | 67108864 /* allowParentScopeTraversal */, this.$controller.scope, this.factory.name);
    }
    beforeAttach(flags) {
        this.view.attach(flags);
    }
    beforeDetach(flags) {
        this.view.detach(flags);
    }
    beforeUnbind(flags) {
        const task = this.view.unbind(flags);
        this.view.parent = void 0;
        return task;
    }
};
Replaceable = __decorate$q([
    templateController('replaceable'),
    __param$9(0, IViewFactory),
    __param$9(1, IRenderLocation),
    __metadata$q("design:paramtypes", [Object, Object])
], Replaceable);

var __decorate$r = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$r = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$a = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let With = class With {
    constructor(factory, location) {
        this.factory = factory;
        this.location = location;
        this.id = nextId('au$component');
        this.id = nextId('au$component');
        this.view = this.factory.create();
        this.view.hold(location, 1 /* insertBefore */);
    }
    valueChanged(newValue, oldValue, flags) {
        if ((this.$controller.state & 5 /* isBoundOrBinding */) > 0) {
            this.bindChild(4096 /* fromBind */);
        }
    }
    beforeBind(flags) {
        this.view.parent = this.$controller;
        this.bindChild(flags);
    }
    beforeAttach(flags) {
        this.view.attach(flags);
    }
    beforeDetach(flags) {
        this.view.detach(flags);
    }
    beforeUnbind(flags) {
        this.view.unbind(flags);
        this.view.parent = void 0;
    }
    bindChild(flags) {
        const scope = Scope.fromParent(flags, this.$controller.scope, this.value === void 0 ? {} : this.value);
        this.view.bind(flags, scope, this.$controller.part);
    }
};
__decorate$r([
    bindable,
    __metadata$r("design:type", Object)
], With.prototype, "value", void 0);
With = __decorate$r([
    templateController('with'),
    __param$a(0, IViewFactory),
    __param$a(1, IRenderLocation),
    __metadata$r("design:paramtypes", [Object, Object])
], With);

var __decorate$s = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$s = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ChildrenObserver_1;
function children(configOrTarget, prop) {
    let config;
    function decorator($target, $prop) {
        if (arguments.length > 1) {
            // Non invocation:
            // - @children
            // Invocation with or w/o opts:
            // - @children()
            // - @children({...opts})
            config.property = $prop;
        }
        Metadata.define(Children.name, ChildrenDefinition.create($prop, config), $target.constructor, $prop);
        Protocol.annotation.appendTo($target.constructor, Children.keyFrom($prop));
    }
    if (arguments.length > 1) {
        // Non invocation:
        // - @children
        config = {};
        decorator(configOrTarget, prop);
        return;
    }
    else if (typeof configOrTarget === 'string') {
        // ClassDecorator
        // - @children('bar')
        // Direct call:
        // - @children('bar')(Foo)
        config = {};
        return decorator;
    }
    // Invocation with or w/o opts:
    // - @children()
    // - @children({...opts})
    config = configOrTarget === void 0 ? {} : configOrTarget;
    return decorator;
}
function isChildrenObserverAnnotation(key) {
    return key.startsWith(Children.name);
}
const Children = {
    name: Protocol.annotation.keyFor('children-observer'),
    keyFrom(name) {
        return `${Children.name}:${name}`;
    },
    from(...childrenObserverLists) {
        const childrenObservers = {};
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const isArray = Array.isArray;
        function addName(name) {
            childrenObservers[name] = ChildrenDefinition.create(name);
        }
        function addDescription(name, def) {
            childrenObservers[name] = ChildrenDefinition.create(name, def);
        }
        function addList(maybeList) {
            if (isArray(maybeList)) {
                maybeList.forEach(addName);
            }
            else if (maybeList instanceof ChildrenDefinition) {
                childrenObservers[maybeList.property] = maybeList;
            }
            else if (maybeList !== void 0) {
                Object.keys(maybeList).forEach(name => addDescription(name, maybeList));
            }
        }
        childrenObserverLists.forEach(addList);
        return childrenObservers;
    },
    getAll(Type) {
        const propStart = Children.name.length + 1;
        const defs = [];
        const prototypeChain = getPrototypeChain(Type);
        let iProto = prototypeChain.length;
        let iDefs = 0;
        let keys;
        let keysLen;
        let Class;
        while (--iProto >= 0) {
            Class = prototypeChain[iProto];
            keys = Protocol.annotation.getKeys(Class).filter(isChildrenObserverAnnotation);
            keysLen = keys.length;
            for (let i = 0; i < keysLen; ++i) {
                defs[iDefs++] = Metadata.getOwn(Children.name, Class, keys[i].slice(propStart));
            }
        }
        return defs;
    },
};
class ChildrenDefinition {
    constructor(callback, property, options, query, filter, map) {
        this.callback = callback;
        this.property = property;
        this.options = options;
        this.query = query;
        this.filter = filter;
        this.map = map;
    }
    static create(prop, def = {}) {
        return new ChildrenDefinition(firstDefined(def.callback, `${prop}Changed`), firstDefined(def.property, prop), def.options, def.query, def.filter, def.map);
    }
}
/** @internal */
let ChildrenObserver = ChildrenObserver_1 = class ChildrenObserver {
    constructor(controller, obj, flags, propertyKey, cbName, query = defaultChildQuery, filter = defaultChildFilter, map = defaultChildMap, options) {
        this.controller = controller;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.query = query;
        this.filter = filter;
        this.map = map;
        this.options = options;
        this.observing = false;
        this.children = (void 0);
        this.callback = obj[cbName];
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        this.createGetterSetter();
    }
    getValue() {
        this.tryStartObserving();
        return this.children;
    }
    setValue(newValue) { }
    subscribe(subscriber) {
        this.tryStartObserving();
        this.addSubscriber(subscriber);
    }
    tryStartObserving() {
        if (!this.observing) {
            this.observing = true;
            const projector = this.controller.projector;
            this.children = filterChildren(projector, this.query, this.filter, this.map);
            projector.subscribeToChildrenChange(() => { this.onChildrenChanged(); }, this.options);
        }
    }
    onChildrenChanged() {
        this.children = filterChildren(this.controller.projector, this.query, this.filter, this.map);
        if (this.callback !== void 0) {
            this.callback.call(this.obj);
        }
        this.callSubscribers(this.children, undefined, this.persistentFlags | 16 /* updateTargetInstance */);
    }
    createGetterSetter() {
        if (!Reflect.defineProperty(this.obj, this.propertyKey, {
            enumerable: true,
            configurable: true,
            get: () => this.getValue(),
            set: () => { return; },
        })) {
            Reporter.write(1, this.propertyKey, this.obj);
        }
    }
};
ChildrenObserver = ChildrenObserver_1 = __decorate$s([
    subscriberCollection(),
    __metadata$s("design:paramtypes", [Object, Object, Number, String, String, Object, Object, Object, Object])
], ChildrenObserver);
function defaultChildQuery(projector) {
    return projector.children;
}
function defaultChildFilter(node, controller, viewModel) {
    return !!viewModel;
}
function defaultChildMap(node, controller, viewModel) {
    return viewModel;
}
/** @internal */
function filterChildren(projector, query, filter, map) {
    const nodes = query(projector);
    const children = [];
    for (let i = 0, ii = nodes.length; i < ii; ++i) {
        const node = nodes[i];
        const controller = CustomElement.for(node);
        const viewModel = controller ? controller.viewModel : null;
        if (filter(node, controller, viewModel)) {
            children.push(map(node, controller, viewModel));
        }
    }
    return children;
}

function customElement(nameOrDef) {
    return function (target) {
        return CustomElement.define(nameOrDef, target);
    };
}
function useShadowDOM(targetOrOptions) {
    if (targetOrOptions === void 0) {
        return function ($target) {
            CustomElement.annotate($target, 'shadowOptions', { mode: 'open' });
        };
    }
    if (typeof targetOrOptions !== 'function') {
        return function ($target) {
            CustomElement.annotate($target, 'shadowOptions', targetOrOptions);
        };
    }
    CustomElement.annotate(targetOrOptions, 'shadowOptions', { mode: 'open' });
}
function containerless(target) {
    if (target === void 0) {
        return function ($target) {
            CustomElement.annotate($target, 'containerless', true);
        };
    }
    CustomElement.annotate(target, 'containerless', true);
}
const definitionLookup = new WeakMap();
class CustomElementDefinition {
    constructor(Type, name, aliases, key, cache, template, instructions, dependencies, injectable, needsCompile, surrogates, bindables, childrenObservers, containerless, isStrictBinding, shadowOptions, hasSlots, strategy, hooks, scopeParts) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.cache = cache;
        this.template = template;
        this.instructions = instructions;
        this.dependencies = dependencies;
        this.injectable = injectable;
        this.needsCompile = needsCompile;
        this.surrogates = surrogates;
        this.bindables = bindables;
        this.childrenObservers = childrenObservers;
        this.containerless = containerless;
        this.isStrictBinding = isStrictBinding;
        this.shadowOptions = shadowOptions;
        this.hasSlots = hasSlots;
        this.strategy = strategy;
        this.hooks = hooks;
        this.scopeParts = scopeParts;
    }
    static create(nameOrDef, Type = null) {
        if (Type === null) {
            const def = nameOrDef;
            if (typeof def === 'string') {
                throw new Error(`Cannot create a custom element definition with only a name and no type: ${nameOrDef}`);
            }
            // eslint-disable-next-line @typescript-eslint/unbound-method
            const name = fromDefinitionOrDefault('name', def, CustomElement.generateName);
            if (typeof def.Type === 'function') {
                // This needs to be a clone (it will usually be the compiler calling this signature)
                // TODO: we need to make sure it's documented that passing in the type via the definition (while passing in null
                // as the "Type" parameter) effectively skips type analysis, so it should only be used this way for cloning purposes.
                Type = def.Type;
            }
            else {
                Type = CustomElement.generateType(pascalCase(name));
            }
            return new CustomElementDefinition(Type, name, mergeArrays(def.aliases), fromDefinitionOrDefault('key', def, () => CustomElement.keyFrom(name)), fromDefinitionOrDefault('cache', def, () => 0), fromDefinitionOrDefault('template', def, () => null), mergeArrays(def.instructions), mergeArrays(def.dependencies), fromDefinitionOrDefault('injectable', def, () => null), fromDefinitionOrDefault('needsCompile', def, () => true), mergeArrays(def.surrogates), Bindable.from(def.bindables), Children.from(def.childrenObservers), fromDefinitionOrDefault('containerless', def, () => false), fromDefinitionOrDefault('isStrictBinding', def, () => false), fromDefinitionOrDefault('shadowOptions', def, () => null), fromDefinitionOrDefault('hasSlots', def, () => false), fromDefinitionOrDefault('strategy', def, () => 1 /* getterSetter */), fromDefinitionOrDefault('hooks', def, () => HooksDefinition.none), mergeArrays(def.scopeParts));
        }
        // If a type is passed in, we ignore the Type property on the definition if it exists.
        // TODO: document this behavior
        if (typeof nameOrDef === 'string') {
            return new CustomElementDefinition(Type, nameOrDef, mergeArrays(CustomElement.getAnnotation(Type, 'aliases'), Type.aliases), CustomElement.keyFrom(nameOrDef), fromAnnotationOrTypeOrDefault('cache', Type, () => 0), fromAnnotationOrTypeOrDefault('template', Type, () => null), mergeArrays(CustomElement.getAnnotation(Type, 'instructions'), Type.instructions), mergeArrays(CustomElement.getAnnotation(Type, 'dependencies'), Type.dependencies), fromAnnotationOrTypeOrDefault('injectable', Type, () => null), fromAnnotationOrTypeOrDefault('needsCompile', Type, () => true), mergeArrays(CustomElement.getAnnotation(Type, 'surrogates'), Type.surrogates), Bindable.from(...Bindable.getAll(Type), CustomElement.getAnnotation(Type, 'bindables'), Type.bindables), Children.from(...Children.getAll(Type), CustomElement.getAnnotation(Type, 'childrenObservers'), Type.childrenObservers), fromAnnotationOrTypeOrDefault('containerless', Type, () => false), fromAnnotationOrTypeOrDefault('isStrictBinding', Type, () => false), fromAnnotationOrTypeOrDefault('shadowOptions', Type, () => null), fromAnnotationOrTypeOrDefault('hasSlots', Type, () => false), fromAnnotationOrTypeOrDefault('strategy', Type, () => 1 /* getterSetter */), 
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            fromAnnotationOrTypeOrDefault('hooks', Type, () => new HooksDefinition(Type.prototype)), mergeArrays(CustomElement.getAnnotation(Type, 'scopeParts'), Type.scopeParts));
        }
        // This is the typical default behavior, e.g. from regular CustomElement.define invocations or from @customElement deco
        // The ViewValueConverter also uses this signature and passes in a definition where everything except for the 'hooks'
        // property needs to be copied. So we have that exception for 'hooks', but we may need to revisit that default behavior
        // if this turns out to be too opinionated.
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const name = fromDefinitionOrDefault('name', nameOrDef, CustomElement.generateName);
        return new CustomElementDefinition(Type, name, mergeArrays(CustomElement.getAnnotation(Type, 'aliases'), nameOrDef.aliases, Type.aliases), CustomElement.keyFrom(name), fromAnnotationOrDefinitionOrTypeOrDefault('cache', nameOrDef, Type, () => 0), fromAnnotationOrDefinitionOrTypeOrDefault('template', nameOrDef, Type, () => null), mergeArrays(CustomElement.getAnnotation(Type, 'instructions'), nameOrDef.instructions, Type.instructions), mergeArrays(CustomElement.getAnnotation(Type, 'dependencies'), nameOrDef.dependencies, Type.dependencies), fromAnnotationOrDefinitionOrTypeOrDefault('injectable', nameOrDef, Type, () => null), fromAnnotationOrDefinitionOrTypeOrDefault('needsCompile', nameOrDef, Type, () => true), mergeArrays(CustomElement.getAnnotation(Type, 'surrogates'), nameOrDef.surrogates, Type.surrogates), Bindable.from(...Bindable.getAll(Type), CustomElement.getAnnotation(Type, 'bindables'), Type.bindables, nameOrDef.bindables), Children.from(...Children.getAll(Type), CustomElement.getAnnotation(Type, 'childrenObservers'), Type.childrenObservers, nameOrDef.childrenObservers), fromAnnotationOrDefinitionOrTypeOrDefault('containerless', nameOrDef, Type, () => false), fromAnnotationOrDefinitionOrTypeOrDefault('isStrictBinding', nameOrDef, Type, () => false), fromAnnotationOrDefinitionOrTypeOrDefault('shadowOptions', nameOrDef, Type, () => null), fromAnnotationOrDefinitionOrTypeOrDefault('hasSlots', nameOrDef, Type, () => false), fromAnnotationOrDefinitionOrTypeOrDefault('strategy', nameOrDef, Type, () => 1 /* getterSetter */), 
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        fromAnnotationOrTypeOrDefault('hooks', Type, () => new HooksDefinition(Type.prototype)), mergeArrays(CustomElement.getAnnotation(Type, 'scopeParts'), nameOrDef.scopeParts, Type.scopeParts));
    }
    static getOrCreate(partialDefinition) {
        if (partialDefinition instanceof CustomElementDefinition) {
            return partialDefinition;
        }
        if (definitionLookup.has(partialDefinition)) {
            return definitionLookup.get(partialDefinition);
        }
        const definition = CustomElementDefinition.create(partialDefinition);
        definitionLookup.set(partialDefinition, definition);
        // Make sure the full definition can be retrieved from dynamically created classes as well
        Metadata.define(CustomElement.name, definition, definition.Type);
        return definition;
    }
    register(container) {
        const { Type, key, aliases } = this;
        Registration.transient(key, Type).register(container);
        Registration.aliasTo(key, Type).register(container);
        registerAliases(aliases, CustomElement, key, container);
    }
}
const CustomElement = {
    name: Protocol.resource.keyFor('custom-element'),
    keyFrom(name) {
        return `${CustomElement.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && Metadata.hasOwn(CustomElement.name, value);
    },
    for(node, nameOrSearchParents, searchParents) {
        if (nameOrSearchParents === void 0) {
            return Metadata.getOwn(CustomElement.name, node);
        }
        if (typeof nameOrSearchParents === 'string') {
            if (searchParents !== true) {
                const controller = Metadata.getOwn(CustomElement.name, node);
                if (controller === void 0) {
                    return (void 0);
                }
                if (controller.is(nameOrSearchParents)) {
                    return controller;
                }
                return (void 0);
            }
            let cur = node;
            while (cur !== null) {
                const controller = Metadata.getOwn(CustomElement.name, cur);
                if (controller !== void 0 && controller.is(nameOrSearchParents)) {
                    return controller;
                }
                cur = DOM.getEffectiveParentNode(cur);
            }
            return (void 0);
        }
        let cur = node;
        while (cur !== null) {
            const controller = Metadata.getOwn(CustomElement.name, cur);
            if (controller !== void 0) {
                return controller;
            }
            cur = DOM.getEffectiveParentNode(cur);
        }
        return (void 0);
    },
    define(nameOrDef, Type) {
        const definition = CustomElementDefinition.create(nameOrDef, Type);
        Metadata.define(CustomElement.name, definition, definition.Type);
        Metadata.define(CustomElement.name, definition, definition);
        Protocol.resource.appendTo(definition.Type, CustomElement.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = Metadata.getOwn(CustomElement.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        Metadata.define(Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return Metadata.getOwn(Protocol.annotation.keyFor(prop), Type);
    },
    generateName: (function () {
        let id = 0;
        return function () {
            return `unnamed-${++id}`;
        };
    })(),
    createInjectable() {
        const $injectable = function (target, property, index) {
            const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
            annotationParamtypes[index] = $injectable;
            return target;
        };
        $injectable.register = function (container) {
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
            return {
                resolve(container, requestor) {
                    if (requestor.has($injectable, true)) {
                        return requestor.get($injectable);
                    }
                    else {
                        return null;
                    }
                },
            };
        };
        return $injectable;
    },
    generateType: (function () {
        const nameDescriptor = {
            value: '',
            writable: false,
            enumerable: false,
            configurable: true,
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const defaultProto = {};
        return function (name, proto = defaultProto) {
            // Anonymous class ensures that minification cannot cause unintended side-effects, and keeps the class
            // looking similarly from the outside (when inspected via debugger, etc).
            const Type = class {
            };
            // Define the name property so that Type.name can be used by end users / plugin authors if they really need to,
            // even when minified.
            nameDescriptor.value = name;
            Reflect.defineProperty(Type, 'name', nameDescriptor);
            // Assign anything from the prototype that was passed in
            if (proto !== defaultProto) {
                Object.assign(Type.prototype, proto);
            }
            return Type;
        };
    })(),
};
const IProjectorLocator = DI.createInterface('IProjectorLocator').noDefault();

var __decorate$t = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$t = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$b = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
const ISanitizer = DI.createInterface('ISanitizer').withDefault(x => x.singleton(class {
    sanitize(input) {
        return input.replace(SCRIPT_REGEX, '');
    }
}));
/**
 * Simple html sanitization converter to preserve whitelisted elements and attributes on a bound property containing html.
 */
let SanitizeValueConverter = class SanitizeValueConverter {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * Process the provided markup that flows to the view.
     *
     * @param untrustedMarkup - The untrusted markup to be sanitized.
     */
    toView(untrustedMarkup) {
        if (untrustedMarkup == null) {
            return null;
        }
        return this.sanitizer.sanitize(untrustedMarkup);
    }
};
SanitizeValueConverter = __decorate$t([
    valueConverter('sanitize'),
    __param$b(0, ISanitizer),
    __metadata$t("design:paramtypes", [Object])
], SanitizeValueConverter);

var __decorate$u = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$u = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$c = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const ITemplateCompiler = DI.createInterface('ITemplateCompiler').noDefault();
const IInstructionRenderer = DI.createInterface('IInstructionRenderer').noDefault();
const IRenderer = DI.createInterface('IRenderer').noDefault();
function instructionRenderer(instructionType) {
    return function decorator(target) {
        // wrap the constructor to set the instructionType to the instance (for better performance than when set on the prototype)
        const decoratedTarget = function (...args) {
            const instance = new target(...args);
            instance.instructionType = instructionType;
            return instance;
        };
        // make sure we register the decorated constructor with DI
        decoratedTarget.register = function register(container) {
            Registration.singleton(IInstructionRenderer, decoratedTarget).register(container);
        };
        // copy over any metadata such as annotations (set by preceding decorators) as well as static properties set by the user
        // also copy the name, to be less confusing to users (so they can still use constructor.name for whatever reason)
        // the length (number of ctor arguments) is copied for the same reason
        const metadataKeys = Metadata.getOwnKeys(target);
        for (const key of metadataKeys) {
            Metadata.define(key, Metadata.getOwn(key, target), decoratedTarget);
        }
        const ownProperties = Object.getOwnPropertyDescriptors(target);
        Object.keys(ownProperties).filter(prop => prop !== 'prototype').forEach(prop => {
            Reflect.defineProperty(decoratedTarget, prop, ownProperties[prop]);
        });
        return decoratedTarget;
    };
}
/* @internal */
let Renderer = class Renderer {
    constructor(instructionRenderers) {
        const record = this.instructionRenderers = {};
        instructionRenderers.forEach(item => {
            // Binding the functions to the renderer instances and calling the functions directly,
            // prevents the `render` call sites from going megamorphic.
            // Consumes slightly more memory but significantly less CPU.
            record[item.instructionType] = item.render.bind(item);
        });
    }
    static register(container) {
        return Registration.singleton(IRenderer, this).register(container);
    }
    render(flags, context, controller, targets, definition, host, parts) {
        const targetInstructions = definition.instructions;
        if (targets.length !== targetInstructions.length) {
            throw new Error(`The compiled template is not aligned with the render instructions. There are ${targets.length} targets and ${targetInstructions.length} instructions.`);
        }
        for (let i = 0, ii = targets.length; i < ii; ++i) {
            this.renderInstructions(
            /* flags        */ flags, 
            /* context      */ context, 
            /* instructions */ targetInstructions[i], 
            /* controller   */ controller, 
            /* target       */ targets[i], 
            /* parts        */ parts);
        }
        if (host !== void 0 && host !== null) {
            this.renderInstructions(
            /* flags        */ flags, 
            /* context      */ context, 
            /* instructions */ definition.surrogates, 
            /* controller   */ controller, 
            /* target       */ host, 
            /* parts        */ parts);
        }
    }
    renderInstructions(flags, context, instructions, controller, target, parts) {
        const instructionRenderers = this.instructionRenderers;
        let current;
        for (let i = 0, ii = instructions.length; i < ii; ++i) {
            current = instructions[i];
            instructionRenderers[current.type](flags, context, controller, target, current, parts);
        }
    }
};
Renderer = __decorate$u([
    __param$c(0, all(IInstructionRenderer)),
    __metadata$u("design:paramtypes", [Array])
], Renderer);
function ensureExpression(parser, srcOrExpr, bindingType) {
    if (typeof srcOrExpr === 'string') {
        return parser.parse(srcOrExpr, bindingType);
    }
    return srcOrExpr;
}
function getTarget(potentialTarget) {
    if (potentialTarget.bindingContext !== void 0) {
        return potentialTarget.bindingContext;
    }
    return potentialTarget;
}
function getRefTarget(refHost, refTargetName) {
    if (refTargetName === 'element') {
        return refHost;
    }
    switch (refTargetName) {
        case 'controller':
            // this means it supports returning undefined
            return CustomElement.for(refHost);
        case 'view':
            // todo: returns node sequences for fun?
            throw new Error('Not supported API');
        case 'view-model':
            // this means it supports returning undefined
            return CustomElement.for(refHost).viewModel;
        default: {
            const caController = CustomAttribute.for(refHost, refTargetName);
            if (caController !== void 0) {
                return caController.viewModel;
            }
            const ceController = CustomElement.for(refHost, refTargetName);
            if (ceController === void 0) {
                throw new Error(`Attempted to reference "${refTargetName}", but it was not found amongst the target's API.`);
            }
            return ceController.viewModel;
        }
    }
}
let SetPropertyRenderer = 
/** @internal */
class SetPropertyRenderer {
    render(flags, context, controller, target, instruction) {
        const obj = getTarget(target);
        if (obj.$observers !== void 0 && obj.$observers[instruction.to] !== void 0) {
            obj.$observers[instruction.to].setValue(instruction.value, 4096 /* fromBind */);
        }
        else {
            obj[instruction.to] = instruction.value;
        }
    }
};
SetPropertyRenderer = __decorate$u([
    instructionRenderer("re" /* setProperty */)
    /** @internal */
], SetPropertyRenderer);
let CustomElementRenderer = 
/** @internal */
class CustomElementRenderer {
    render(flags, context, controller, target, instruction, parts) {
        parts = mergeParts(parts, instruction.parts);
        const factory = context.getComponentFactory(
        /* parentController */ controller, 
        /* host             */ target, 
        /* instruction      */ instruction, 
        /* viewFactory      */ void 0, 
        /* location         */ target);
        const key = CustomElement.keyFrom(instruction.res);
        const component = factory.createComponent(key);
        const lifecycle = context.get(ILifecycle);
        const childController = Controller.forCustomElement(
        /* viewModel       */ component, 
        /* lifecycle       */ lifecycle, 
        /* host            */ target, 
        /* parentContainer */ context, 
        /* parts           */ parts, 
        /* flags           */ flags);
        flags = childController.flags;
        Metadata.define(key, childController, target);
        context.renderInstructions(
        /* flags        */ flags, 
        /* instructions */ instruction.instructions, 
        /* controller   */ controller, 
        /* target       */ childController, 
        /* parts        */ parts);
        controller.addController(childController);
        factory.dispose();
    }
};
CustomElementRenderer = __decorate$u([
    instructionRenderer("ra" /* hydrateElement */)
    /** @internal */
], CustomElementRenderer);
let CustomAttributeRenderer = 
/** @internal */
class CustomAttributeRenderer {
    render(flags, context, controller, target, instruction, parts) {
        const factory = context.getComponentFactory(
        /* parentController */ controller, 
        /* host             */ target, 
        /* instruction      */ instruction, 
        /* viewFactory      */ void 0, 
        /* location         */ void 0);
        const key = CustomAttribute.keyFrom(instruction.res);
        const component = factory.createComponent(key);
        const lifecycle = context.get(ILifecycle);
        const childController = Controller.forCustomAttribute(
        /* viewModel */ component, 
        /* lifecycle */ lifecycle, 
        /* host      */ target, 
        /* flags     */ flags);
        Metadata.define(key, childController, target);
        context.renderInstructions(
        /* flags        */ flags, 
        /* instructions */ instruction.instructions, 
        /* controller   */ controller, 
        /* target       */ childController, 
        /* parts        */ parts);
        controller.addController(childController);
        factory.dispose();
    }
};
CustomAttributeRenderer = __decorate$u([
    instructionRenderer("rb" /* hydrateAttribute */)
    /** @internal */
], CustomAttributeRenderer);
let TemplateControllerRenderer = 
/** @internal */
class TemplateControllerRenderer {
    render(flags, parentContext, controller, target, instruction, parts) {
        parts = mergeParts(parts, instruction.parts);
        const viewFactory = getRenderContext(instruction.def, parentContext, parts).getViewFactory();
        const renderLocation = parentContext.dom.convertToRenderLocation(target);
        const componentFactory = parentContext.getComponentFactory(
        /* parentController */ controller, 
        /* host             */ target, 
        /* instruction      */ instruction, 
        /* viewFactory      */ viewFactory, 
        /* location         */ renderLocation);
        const key = CustomAttribute.keyFrom(instruction.res);
        const component = componentFactory.createComponent(key);
        const lifecycle = parentContext.get(ILifecycle);
        const childController = Controller.forCustomAttribute(
        /* viewModel */ component, 
        /* lifecycle */ lifecycle, 
        /* host      */ target, 
        /* flags     */ flags);
        Metadata.define(key, childController, renderLocation);
        if (instruction.link) {
            const controllers = controller.controllers;
            component.link(controllers[controllers.length - 1]);
        }
        parentContext.renderInstructions(
        /* flags        */ flags, 
        /* instructions */ instruction.instructions, 
        /* controller   */ controller, 
        /* target       */ childController, 
        /* parts        */ parts);
        controller.addController(childController);
        componentFactory.dispose();
    }
};
TemplateControllerRenderer = __decorate$u([
    instructionRenderer("rc" /* hydrateTemplateController */)
    /** @internal */
], TemplateControllerRenderer);
let LetElementRenderer = 
/** @internal */
class LetElementRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        context.dom.remove(target);
        const childInstructions = instruction.instructions;
        const toBindingContext = instruction.toBindingContext;
        let childInstruction;
        let expr;
        let binding;
        for (let i = 0, ii = childInstructions.length; i < ii; ++i) {
            childInstruction = childInstructions[i];
            expr = ensureExpression(this.parser, childInstruction.from, 48 /* IsPropertyCommand */);
            binding = applyBindingBehavior(new LetBinding(expr, childInstruction.to, this.observerLocator, context, toBindingContext), expr, context);
            controller.addBinding(binding);
        }
    }
};
LetElementRenderer = __decorate$u([
    instructionRenderer("rd" /* hydrateLetElement */)
    /** @internal */
    ,
    __param$c(0, IExpressionParser),
    __param$c(1, IObserverLocator),
    __metadata$u("design:paramtypes", [Object, Object])
], LetElementRenderer);
let CallBindingRenderer = 
/** @internal */
class CallBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 153 /* CallCommand */);
        const binding = applyBindingBehavior(new CallBinding(expr, getTarget(target), instruction.to, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
CallBindingRenderer = __decorate$u([
    instructionRenderer("rh" /* callBinding */)
    /** @internal */
    ,
    __param$c(0, IExpressionParser),
    __param$c(1, IObserverLocator),
    __metadata$u("design:paramtypes", [Object, Object])
], CallBindingRenderer);
let RefBindingRenderer = 
/** @internal */
class RefBindingRenderer {
    constructor(parser) {
        this.parser = parser;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 5376 /* IsRef */);
        const binding = applyBindingBehavior(new RefBinding(expr, getRefTarget(target, instruction.to), context), expr, context);
        controller.addBinding(binding);
    }
};
RefBindingRenderer = __decorate$u([
    instructionRenderer("rj" /* refBinding */)
    /** @internal */
    ,
    __param$c(0, IExpressionParser),
    __metadata$u("design:paramtypes", [Object])
], RefBindingRenderer);
let InterpolationBindingRenderer = 
/** @internal */
class InterpolationBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        let binding;
        const expr = ensureExpression(this.parser, instruction.from, 2048 /* Interpolation */);
        if (expr.isMulti) {
            binding = applyBindingBehavior(new MultiInterpolationBinding(this.observerLocator, expr, getTarget(target), instruction.to, BindingMode.toView, context), expr, context);
        }
        else {
            binding = applyBindingBehavior(new InterpolationBinding(expr.firstExpression, expr, getTarget(target), instruction.to, BindingMode.toView, this.observerLocator, context, true), expr, context);
        }
        controller.addBinding(binding);
    }
};
InterpolationBindingRenderer = __decorate$u([
    instructionRenderer("rf" /* interpolation */)
    /** @internal */
    ,
    __param$c(0, IExpressionParser),
    __param$c(1, IObserverLocator),
    __metadata$u("design:paramtypes", [Object, Object])
], InterpolationBindingRenderer);
let PropertyBindingRenderer = 
/** @internal */
class PropertyBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 48 /* IsPropertyCommand */ | instruction.mode);
        const binding = applyBindingBehavior(new PropertyBinding(expr, getTarget(target), instruction.to, instruction.mode, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
PropertyBindingRenderer = __decorate$u([
    instructionRenderer("rg" /* propertyBinding */)
    /** @internal */
    ,
    __param$c(0, IExpressionParser),
    __param$c(1, IObserverLocator),
    __metadata$u("design:paramtypes", [Object, Object])
], PropertyBindingRenderer);
let IteratorBindingRenderer = 
/** @internal */
class IteratorBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 539 /* ForCommand */);
        const binding = applyBindingBehavior(new PropertyBinding(expr, getTarget(target), instruction.to, BindingMode.toView, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
IteratorBindingRenderer = __decorate$u([
    instructionRenderer("rk" /* iteratorBinding */)
    /** @internal */
    ,
    __param$c(0, IExpressionParser),
    __param$c(1, IObserverLocator),
    __metadata$u("design:paramtypes", [Object, Object])
], IteratorBindingRenderer);
let behaviorExpressionIndex = 0;
const behaviorExpressions = [];
function applyBindingBehavior(binding, expression, locator) {
    while (expression instanceof BindingBehaviorExpression) {
        behaviorExpressions[behaviorExpressionIndex++] = expression;
        expression = expression.expression;
    }
    while (behaviorExpressionIndex > 0) {
        const behaviorExpression = behaviorExpressions[--behaviorExpressionIndex];
        const behaviorOrFactory = locator.get(behaviorExpression.behaviorKey);
        if (behaviorOrFactory instanceof BindingBehaviorFactory) {
            binding = behaviorOrFactory.construct(binding, behaviorExpression);
        }
    }
    behaviorExpressions.length = 0;
    return binding;
}

const definitionContainerLookup = new WeakMap();
const definitionContainerPartsLookup = new WeakMap();
const fragmentCache = new WeakMap();
function isRenderContext(value) {
    return value instanceof RenderContext;
}
function getRenderContext(partialDefinition, parentContainer, parts) {
    const definition = CustomElementDefinition.getOrCreate(partialDefinition);
    if (isRenderContext(parentContainer)) {
        parts = mergeParts(parentContainer.parts, parts);
    }
    // injectable completely prevents caching, ensuring that each instance gets a new render context
    if (definition.injectable !== null) {
        return new RenderContext(definition, parentContainer, parts);
    }
    if (parts === void 0) {
        let containerLookup = definitionContainerLookup.get(definition);
        if (containerLookup === void 0) {
            definitionContainerLookup.set(definition, containerLookup = new WeakMap());
        }
        let context = containerLookup.get(parentContainer);
        if (context === void 0) {
            containerLookup.set(parentContainer, context = new RenderContext(definition, parentContainer, parts));
        }
        return context;
    }
    let containerPartsLookup = definitionContainerPartsLookup.get(definition);
    if (containerPartsLookup === void 0) {
        definitionContainerPartsLookup.set(definition, containerPartsLookup = new WeakMap());
    }
    let partsLookup = containerPartsLookup.get(parentContainer);
    if (partsLookup === void 0) {
        containerPartsLookup.set(parentContainer, partsLookup = new WeakMap());
    }
    let context = partsLookup.get(parts);
    if (context === void 0) {
        partsLookup.set(parts, context = new RenderContext(definition, parentContainer, parts));
    }
    return context;
}
class RenderContext {
    constructor(definition, parentContainer, parts) {
        this.definition = definition;
        this.parentContainer = parentContainer;
        this.parts = parts;
        this.viewModelProvider = void 0;
        this.fragment = null;
        this.factory = void 0;
        this.isCompiled = false;
        this.compiledDefinition = (void 0);
        const container = this.container = parentContainer.createChild();
        this.renderer = container.get(IRenderer);
        container.registerResolver(IViewFactory, this.factoryProvider = new ViewFactoryProvider(), true);
        container.registerResolver(IController, this.parentControllerProvider = new InstanceProvider(), true);
        container.registerResolver(ITargetedInstruction, this.instructionProvider = new InstanceProvider(), true);
        container.registerResolver(IRenderLocation, this.renderLocationProvider = new InstanceProvider(), true);
        (this.dom = container.get(IDOM)).registerElementResolver(container, this.elementProvider = new InstanceProvider());
        container.register(...definition.dependencies);
    }
    // #region IServiceLocator api
    has(key, searchAncestors) {
        return this.container.has(key, searchAncestors);
    }
    get(key) {
        return this.container.get(key);
    }
    getAll(key) {
        return this.container.getAll(key);
    }
    // #endregion
    // #region IContainer api
    register(...params) {
        return this.container.register(...params);
    }
    registerResolver(key, resolver) {
        return this.container.registerResolver(key, resolver);
    }
    registerTransformer(key, transformer) {
        return this.container.registerTransformer(key, transformer);
    }
    getResolver(key, autoRegister) {
        return this.container.getResolver(key, autoRegister);
    }
    getFactory(key) {
        return this.container.getFactory(key);
    }
    createChild() {
        return this.container.createChild();
    }
    disposeResolvers() {
        this.container.disposeResolvers();
    }
    // #endregion
    // #region IRenderContext api
    compile() {
        let compiledDefinition;
        if (this.isCompiled) {
            return this;
        }
        this.isCompiled = true;
        const definition = this.definition;
        if (definition.needsCompile) {
            const container = this.container;
            const compiler = container.get(ITemplateCompiler);
            compiledDefinition = this.compiledDefinition = compiler.compile(definition, container);
        }
        else {
            compiledDefinition = this.compiledDefinition = definition;
        }
        // Support Recursive Components by adding self to own context
        compiledDefinition.register(this);
        if (fragmentCache.has(compiledDefinition)) {
            this.fragment = fragmentCache.get(compiledDefinition);
        }
        else {
            const template = compiledDefinition.template;
            if (template === null) {
                fragmentCache.set(compiledDefinition, null);
            }
            else {
                fragmentCache.set(compiledDefinition, this.fragment = this.dom.createDocumentFragment(template));
            }
        }
        return this;
    }
    getViewFactory(name) {
        let factory = this.factory;
        if (factory === void 0) {
            if (name === void 0) {
                name = this.definition.name;
            }
            const lifecycle = this.parentContainer.get(ILifecycle);
            factory = this.factory = new ViewFactory(name, this, lifecycle, this.parts);
        }
        return factory;
    }
    beginChildComponentOperation(instance) {
        const definition = this.definition;
        if (definition.injectable !== null) {
            if (this.viewModelProvider === void 0) {
                this.container.registerResolver(definition.injectable, this.viewModelProvider = new InstanceProvider());
            }
            this.viewModelProvider.prepare(instance);
        }
        return this;
    }
    // #endregion
    // #region ICompiledRenderContext api
    createNodes() {
        return this.dom.createNodeSequence(this.fragment);
    }
    // TODO: split up into 2 methods? getComponentFactory + getSyntheticFactory or something
    getComponentFactory(parentController, host, instruction, viewFactory, location) {
        if (parentController !== void 0) {
            this.parentControllerProvider.prepare(parentController);
        }
        if (host !== void 0) {
            // TODO: fix provider input type, Key is probably not a good constraint
            this.elementProvider.prepare(host);
        }
        if (instruction !== void 0) {
            this.instructionProvider.prepare(instruction);
        }
        if (location !== void 0) {
            this.renderLocationProvider.prepare(location);
        }
        if (viewFactory !== void 0) {
            this.factoryProvider.prepare(viewFactory);
        }
        return this;
    }
    // #endregion
    // #region IComponentFactory api
    createComponent(resourceKey) {
        return this.container.get(resourceKey);
    }
    render(flags, controller, targets, templateDefinition, host, parts) {
        this.renderer.render(flags, this, controller, targets, templateDefinition, host, parts);
    }
    renderInstructions(flags, instructions, controller, target, parts) {
        this.renderer.renderInstructions(flags, this, instructions, controller, target, parts);
    }
    dispose() {
        this.elementProvider.dispose();
        this.container.disposeResolvers();
    }
}
/** @internal */
class ViewFactoryProvider {
    constructor() {
        this.factory = null;
    }
    prepare(factory) {
        this.factory = factory;
    }
    get $isResolver() { return true; }
    resolve(handler, requestor) {
        const factory = this.factory;
        if (factory === null) { // unmet precondition: call prepare
            throw Reporter.error(50); // TODO: organize error codes
        }
        if (typeof factory.name !== 'string' || factory.name.length === 0) { // unmet invariant: factory must have a name
            throw Reporter.error(51); // TODO: organize error codes
        }
        return factory.resolve(requestor);
    }
    dispose() {
        this.factory = null;
    }
}

const controllerLookup = new WeakMap();
class Controller {
    constructor(vmKind, flags, lifecycle, hooks, 
    /**
     * The viewFactory. Only present for synthetic views.
     */
    viewFactory, 
    /**
     * The backing viewModel. This is never a proxy. Only present for custom attributes and elements.
     */
    viewModel, 
    /**
     * The binding context. This may be a proxy. If it is not, then it is the same instance as the viewModel. Only present for custom attributes and elements.
     */
    bindingContext, 
    /**
     * The physical host dom node. Only present for custom elements.
     */
    host) {
        this.vmKind = vmKind;
        this.flags = flags;
        this.lifecycle = lifecycle;
        this.hooks = hooks;
        this.viewFactory = viewFactory;
        this.viewModel = viewModel;
        this.bindingContext = bindingContext;
        this.host = host;
        this.id = nextId('au$component');
        this.nextBound = void 0;
        this.nextUnbound = void 0;
        this.prevBound = void 0;
        this.prevUnbound = void 0;
        this.nextAttached = void 0;
        this.nextDetached = void 0;
        this.prevAttached = void 0;
        this.prevDetached = void 0;
        this.nextMount = void 0;
        this.nextUnmount = void 0;
        this.prevMount = void 0;
        this.prevUnmount = void 0;
        this.parent = void 0;
        this.bindings = void 0;
        this.controllers = void 0;
        this.state = 0 /* none */;
        this.scopeParts = void 0;
        this.isStrictBinding = false;
        this.scope = void 0;
        this.part = void 0;
        this.projector = void 0;
        this.nodes = void 0;
        this.context = void 0;
        this.location = void 0;
        this.mountStrategy = 1 /* insertBefore */;
    }
    static getCached(viewModel) {
        return controllerLookup.get(viewModel);
    }
    static getCachedOrThrow(viewModel) {
        const controller = Controller.getCached(viewModel);
        if (controller === void 0) {
            throw new Error(`There is no cached controller for the provided ViewModel: ${String(viewModel)}`);
        }
        return controller;
    }
    static forCustomElement(viewModel, lifecycle, host, parentContainer, parts, flags = 0 /* none */) {
        if (controllerLookup.has(viewModel)) {
            return controllerLookup.get(viewModel);
        }
        const definition = CustomElement.getDefinition(viewModel.constructor);
        flags |= definition.strategy;
        const controller = new Controller(0 /* customElement */, 
        /* flags          */ flags, 
        /* lifecycle      */ lifecycle, 
        /* hooks          */ definition.hooks, 
        /* viewFactory    */ void 0, 
        /* viewModel      */ viewModel, 
        /* bindingContext */ getBindingContext(flags, viewModel), 
        /* host           */ host);
        controllerLookup.set(viewModel, controller);
        controller.hydrateCustomElement(definition, parentContainer, parts);
        return controller;
    }
    static forCustomAttribute(viewModel, lifecycle, host, flags = 0 /* none */) {
        if (controllerLookup.has(viewModel)) {
            return controllerLookup.get(viewModel);
        }
        const definition = CustomAttribute.getDefinition(viewModel.constructor);
        flags |= definition.strategy;
        const controller = new Controller(1 /* customAttribute */, 
        /* flags          */ flags, 
        /* lifecycle      */ lifecycle, 
        /* hooks          */ definition.hooks, 
        /* viewFactory    */ void 0, 
        /* viewModel      */ viewModel, 
        /* bindingContext */ getBindingContext(flags, viewModel), 
        /* host           */ host);
        controllerLookup.set(viewModel, controller);
        controller.hydrateCustomAttribute(definition);
        return controller;
    }
    static forSyntheticView(viewFactory, lifecycle, context, flags = 0 /* none */) {
        const controller = new Controller(2 /* synthetic */, 
        /* flags          */ flags, 
        /* lifecycle      */ lifecycle, 
        /* hooks          */ HooksDefinition.none, 
        /* viewFactory    */ viewFactory, 
        /* viewModel      */ void 0, 
        /* bindingContext */ void 0, 
        /* host           */ void 0);
        controller.hydrateSynthetic(context, viewFactory.parts);
        return controller;
    }
    hydrateCustomElement(definition, parentContainer, parts) {
        const flags = this.flags |= definition.strategy;
        const instance = this.viewModel;
        createObservers(this.lifecycle, definition, flags, instance);
        createChildrenObservers(this, definition, flags, instance);
        this.scope = Scope.create(flags, this.bindingContext, null);
        const hooks = this.hooks;
        if (hooks.hasCreate) {
            const result = instance.create(
            /* controller      */ this, 
            /* parentContainer */ parentContainer, 
            /* definition      */ definition, 
            /* parts           */ parts);
            if (result !== void 0 && result !== definition) {
                definition = CustomElementDefinition.getOrCreate(result);
            }
        }
        const context = this.context = getRenderContext(definition, parentContainer, parts);
        // Support Recursive Components by adding self to own context
        definition.register(context);
        if (definition.injectable !== null) {
            // If the element is registered as injectable, support injecting the instance into children
            context.beginChildComponentOperation(instance);
        }
        if (hooks.hasBeforeCompile) {
            instance.beforeCompile(this);
        }
        const compiledContext = context.compile();
        const compiledDefinition = compiledContext.compiledDefinition;
        this.scopeParts = compiledDefinition.scopeParts;
        this.isStrictBinding = compiledDefinition.isStrictBinding;
        const projectorLocator = parentContainer.get(IProjectorLocator);
        this.projector = projectorLocator.getElementProjector(context.dom, this, this.host, compiledDefinition);
        instance.$controller = this;
        const nodes = this.nodes = compiledContext.createNodes();
        if (hooks.hasAfterCompile) {
            instance.afterCompile(this);
        }
        const targets = nodes.findTargets();
        compiledContext.render(
        /* flags      */ this.flags, 
        /* controller */ this, 
        /* targets    */ targets, 
        /* definition */ compiledDefinition, 
        /* host       */ this.host, 
        /* parts      */ parts);
        if (hooks.hasAfterCompileChildren) {
            instance.afterCompileChildren(this);
        }
    }
    hydrateCustomAttribute(definition) {
        const flags = this.flags | definition.strategy;
        const instance = this.viewModel;
        createObservers(this.lifecycle, definition, flags, instance);
        instance.$controller = this;
    }
    hydrateSynthetic(context, parts) {
        this.context = context;
        const compiledContext = context.compile();
        const compiledDefinition = compiledContext.compiledDefinition;
        this.scopeParts = compiledDefinition.scopeParts;
        this.isStrictBinding = compiledDefinition.isStrictBinding;
        const nodes = this.nodes = compiledContext.createNodes();
        const targets = nodes.findTargets();
        compiledContext.render(
        /* flags      */ this.flags, 
        /* controller */ this, 
        /* targets    */ targets, 
        /* definition */ compiledDefinition, 
        /* host       */ void 0, 
        /* parts      */ parts);
    }
    addBinding(binding) {
        if (this.bindings === void 0) {
            this.bindings = [binding];
        }
        else {
            this.bindings[this.bindings.length] = binding;
        }
    }
    addController(controller) {
        if (this.controllers === void 0) {
            this.controllers = [controller];
        }
        else {
            this.controllers[this.controllers.length] = controller;
        }
    }
    is(name) {
        switch (this.vmKind) {
            case 1 /* customAttribute */: {
                const def = CustomAttribute.getDefinition(this.viewModel.constructor);
                return def.name === name;
            }
            case 0 /* customElement */: {
                const def = CustomElement.getDefinition(this.viewModel.constructor);
                return def.name === name;
            }
            case 2 /* synthetic */:
                return this.viewFactory.name === name;
        }
    }
    lockScope(scope) {
        this.scope = scope;
        this.state |= 256 /* hasLockedScope */;
    }
    hold(location, mountStrategy) {
        this.state = (this.state | 512 /* canBeCached */) ^ 512 /* canBeCached */;
        this.location = location;
        this.mountStrategy = mountStrategy;
    }
    release(flags) {
        this.state |= 512 /* canBeCached */;
        if ((this.state & 32 /* isAttached */) > 0) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return this.viewFactory.canReturnToCache(this); // non-null is implied by the hook
        }
        return this.unmountSynthetic(flags);
    }
    bind(flags, scope, part) {
        this.part = part;
        // TODO: benchmark which of these techniques is fastest:
        // - the current one (enum with switch)
        // - set the name of the method in the constructor, e.g. this.bindMethod = 'bindCustomElement'
        //    and then doing this[this.bindMethod](flags, scope) instead of switch (eliminates branching
        //    but computed property access might be harmful to browser optimizations)
        // - make bind() a property and set it to one of the 3 methods in the constructor,
        //    e.g. this.bind = this.bindCustomElement (eliminates branching + reduces call stack depth by 1,
        //    but might make the call site megamorphic)
        flags |= 4096 /* fromBind */;
        switch (this.vmKind) {
            case 0 /* customElement */:
                return this.bindCustomElement(flags, scope);
            case 1 /* customAttribute */:
                return this.bindCustomAttribute(flags, scope);
            case 2 /* synthetic */:
                return this.bindSynthetic(flags, scope);
        }
    }
    unbind(flags) {
        flags |= 8192 /* fromUnbind */;
        switch (this.vmKind) {
            case 0 /* customElement */:
                return this.unbindCustomElement(flags);
            case 1 /* customAttribute */:
                return this.unbindCustomAttribute(flags);
            case 2 /* synthetic */:
                return this.unbindSynthetic(flags);
        }
    }
    afterBind(flags) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.bindingContext.afterBind(flags); // non-null is implied by the hook
    }
    afterUnbind(flags) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.bindingContext.afterUnbind(flags); // non-null is implied by the hook
    }
    attach(flags) {
        if ((this.state & 40 /* isAttachedOrAttaching */) > 0 && (flags & 33554432 /* reorderNodes */) === 0) {
            return;
        }
        flags |= 16384 /* fromAttach */;
        switch (this.vmKind) {
            case 0 /* customElement */:
                this.attachCustomElement(flags);
                break;
            case 1 /* customAttribute */:
                this.attachCustomAttribute(flags);
                break;
            case 2 /* synthetic */:
                this.attachSynthetic(flags);
        }
    }
    detach(flags) {
        if ((this.state & 40 /* isAttachedOrAttaching */) === 0) {
            return;
        }
        flags |= 32768 /* fromDetach */;
        switch (this.vmKind) {
            case 0 /* customElement */:
                this.detachCustomElement(flags);
                break;
            case 1 /* customAttribute */:
                this.detachCustomAttribute(flags);
                break;
            case 2 /* synthetic */:
                this.detachSynthetic(flags);
        }
    }
    afterAttach(flags) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.bindingContext.afterAttach(flags); // non-null is implied by the hook
    }
    afterDetach(flags) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.bindingContext.afterDetach(flags); // non-null is implied by the hook
    }
    mount(flags) {
        switch (this.vmKind) {
            case 0 /* customElement */:
                this.mountCustomElement(flags);
                break;
            case 2 /* synthetic */:
                this.mountSynthetic(flags);
        }
    }
    unmount(flags) {
        switch (this.vmKind) {
            case 0 /* customElement */:
                this.unmountCustomElement(flags);
                break;
            case 2 /* synthetic */:
                this.unmountSynthetic(flags);
        }
    }
    cache(flags) {
        switch (this.vmKind) {
            case 0 /* customElement */:
                this.cacheCustomElement(flags);
                break;
            case 1 /* customAttribute */:
                this.cacheCustomAttribute(flags);
                break;
            case 2 /* synthetic */:
                this.cacheSynthetic(flags);
        }
    }
    getTargetAccessor(propertyName) {
        const { bindings } = this;
        if (bindings !== void 0) {
            const binding = bindings.find(b => b.targetProperty === propertyName);
            if (binding !== void 0) {
                return binding.targetObserver;
            }
        }
        return void 0;
    }
    // #region bind/unbind
    bindCustomElement(flags, scope) {
        const $scope = this.scope;
        $scope.parentScope = scope === void 0 ? null : scope;
        $scope.scopeParts = this.scopeParts;
        if ((this.state & 4 /* isBound */) > 0) {
            return LifecycleTask.done;
        }
        flags |= 4096 /* fromBind */;
        this.state |= 1 /* isBinding */;
        this.lifecycle.afterBind.begin();
        if (this.hooks.hasBeforeBind) {
            const ret = this.bindingContext.beforeBind(flags);
            if (hasAsyncWork(ret)) {
                // this.scope could be reassigned during beforeBind so reference that instead of $scope.
                return new ContinuationTask(ret, this.bindBindings, this, flags, this.scope);
            }
        }
        return this.bindBindings(flags, this.scope);
    }
    bindCustomAttribute(flags, scope) {
        if ((this.state & 4 /* isBound */) > 0) {
            if (this.scope === scope) {
                return LifecycleTask.done;
            }
            flags |= 4096 /* fromBind */;
            const task = this.unbind(flags);
            if (!task.done) {
                return new ContinuationTask(task, this.bind, this, flags, scope);
            }
        }
        else {
            flags |= 4096 /* fromBind */;
        }
        this.state |= 1 /* isBinding */;
        this.scope = scope;
        this.lifecycle.afterBind.begin();
        if (this.hooks.hasBeforeBind) {
            const ret = this.bindingContext.beforeBind(flags);
            if (hasAsyncWork(ret)) {
                return new ContinuationTask(ret, this.endBind, this, flags);
            }
        }
        this.endBind(flags);
        return LifecycleTask.done;
    }
    bindSynthetic(flags, scope) {
        if (scope == void 0) {
            throw new Error(`Scope is null or undefined`); // TODO: create error code
        }
        scope.scopeParts = mergeDistinct(scope.scopeParts, this.scopeParts, false);
        if ((this.state & 4 /* isBound */) > 0) {
            if (this.scope === scope || (this.state & 256 /* hasLockedScope */) > 0) {
                return LifecycleTask.done;
            }
            flags |= 4096 /* fromBind */;
            const task = this.unbind(flags);
            if (!task.done) {
                return new ContinuationTask(task, this.bind, this, flags, scope);
            }
        }
        else {
            flags |= 4096 /* fromBind */;
        }
        if ((this.state & 256 /* hasLockedScope */) === 0) {
            this.scope = scope;
        }
        this.state |= 1 /* isBinding */;
        this.lifecycle.afterBind.begin();
        return this.bindBindings(flags, this.scope);
    }
    bindBindings(flags, scope) {
        const { bindings } = this;
        if (bindings !== void 0) {
            const { length } = bindings;
            if (this.isStrictBinding) {
                flags |= 4 /* isStrictBindingStrategy */;
            }
            for (let i = 0; i < length; ++i) {
                bindings[i].$bind(flags, scope, this.part);
            }
        }
        return this.bindControllers(flags, this.scope);
    }
    bindControllers(flags, scope) {
        let tasks = void 0;
        let task;
        const { controllers } = this;
        if (controllers !== void 0) {
            const { length } = controllers;
            for (let i = 0; i < length; ++i) {
                controllers[i].parent = this;
                task = controllers[i].bind(flags, scope, this.part);
                if (!task.done) {
                    if (tasks === void 0) {
                        tasks = [];
                    }
                    tasks.push(task);
                }
            }
        }
        if (tasks === void 0) {
            this.endBind(flags);
            return LifecycleTask.done;
        }
        return new AggregateContinuationTask(tasks, this.endBind, this, flags);
    }
    endBind(flags) {
        if (this.hooks.hasAfterBind) {
            this.lifecycle.afterBind.add(this);
        }
        this.state = this.state ^ 1 /* isBinding */ | 4 /* isBound */;
        this.lifecycle.afterBind.end(flags);
    }
    unbindCustomElement(flags) {
        if ((this.state & 4 /* isBound */) === 0) {
            return LifecycleTask.done;
        }
        this.scope.parentScope = null;
        this.state |= 2 /* isUnbinding */;
        flags |= 8192 /* fromUnbind */;
        this.lifecycle.afterUnbind.begin();
        if (this.hooks.hasBeforeUnbind) {
            const ret = this.bindingContext.beforeUnbind(flags);
            if (hasAsyncWork(ret)) {
                return new ContinuationTask(ret, this.unbindControllers, this, flags);
            }
        }
        return this.unbindControllers(flags);
    }
    unbindCustomAttribute(flags) {
        if ((this.state & 4 /* isBound */) === 0) {
            return LifecycleTask.done;
        }
        this.state |= 2 /* isUnbinding */;
        flags |= 8192 /* fromUnbind */;
        this.lifecycle.afterUnbind.begin();
        if (this.hooks.hasBeforeUnbind) {
            const ret = this.bindingContext.beforeUnbind(flags);
            if (hasAsyncWork(ret)) {
                return new ContinuationTask(ret, this.endUnbind, this, flags);
            }
        }
        this.endUnbind(flags);
        return LifecycleTask.done;
    }
    unbindSynthetic(flags) {
        if ((this.state & 4 /* isBound */) === 0) {
            return LifecycleTask.done;
        }
        this.state |= 2 /* isUnbinding */;
        flags |= 8192 /* fromUnbind */;
        this.lifecycle.afterUnbind.begin();
        return this.unbindControllers(flags);
    }
    unbindBindings(flags) {
        const { bindings } = this;
        if (bindings !== void 0) {
            for (let i = bindings.length - 1; i >= 0; --i) {
                bindings[i].$unbind(flags);
            }
        }
        this.endUnbind(flags);
    }
    unbindControllers(flags) {
        let tasks = void 0;
        let task;
        const { controllers } = this;
        if (controllers !== void 0) {
            for (let i = controllers.length - 1; i >= 0; --i) {
                task = controllers[i].unbind(flags);
                controllers[i].parent = void 0;
                if (!task.done) {
                    if (tasks === void 0) {
                        tasks = [];
                    }
                    tasks.push(task);
                }
            }
        }
        if (tasks === void 0) {
            this.unbindBindings(flags);
            return LifecycleTask.done;
        }
        return new AggregateContinuationTask(tasks, this.unbindBindings, this, flags);
    }
    endUnbind(flags) {
        switch (this.vmKind) {
            case 1 /* customAttribute */:
                this.scope = void 0;
                break;
            case 2 /* synthetic */:
                if ((this.state & 256 /* hasLockedScope */) === 0) {
                    this.scope = void 0;
                }
        }
        if (this.hooks.hasAfterUnbind) {
            this.lifecycle.afterUnbind.add(this);
        }
        this.state = (this.state | 6 /* isBoundOrUnbinding */) ^ 6 /* isBoundOrUnbinding */;
        this.lifecycle.afterUnbind.end(flags);
    }
    // #endregion
    // #region attach/detach
    attachCustomElement(flags) {
        flags |= 16384 /* fromAttach */;
        this.state |= 8 /* isAttaching */;
        this.lifecycle.mount.add(this);
        this.lifecycle.afterAttach.begin();
        if (this.hooks.hasBeforeAttach) {
            this.bindingContext.beforeAttach(flags);
        }
        this.attachControllers(flags);
        if (this.hooks.hasAfterAttach) {
            this.lifecycle.afterAttach.add(this);
        }
        this.state = this.state ^ 8 /* isAttaching */ | 32 /* isAttached */;
        this.lifecycle.afterAttach.end(flags);
    }
    attachCustomAttribute(flags) {
        flags |= 16384 /* fromAttach */;
        this.state |= 8 /* isAttaching */;
        this.lifecycle.afterAttach.begin();
        if (this.hooks.hasBeforeAttach) {
            this.bindingContext.beforeAttach(flags);
        }
        if (this.hooks.hasAfterAttach) {
            this.lifecycle.afterAttach.add(this);
        }
        this.state = this.state ^ 8 /* isAttaching */ | 32 /* isAttached */;
        this.lifecycle.afterAttach.end(flags);
    }
    attachSynthetic(flags) {
        if (((this.state & 32 /* isAttached */) > 0 && flags & 33554432 /* reorderNodes */) > 0) {
            this.lifecycle.mount.add(this);
        }
        else {
            flags |= 16384 /* fromAttach */;
            this.state |= 8 /* isAttaching */;
            this.lifecycle.mount.add(this);
            this.lifecycle.afterAttach.begin();
            this.attachControllers(flags);
            this.state = this.state ^ 8 /* isAttaching */ | 32 /* isAttached */;
            this.lifecycle.afterAttach.end(flags);
        }
    }
    detachCustomElement(flags) {
        flags |= 32768 /* fromDetach */;
        this.state |= 16 /* isDetaching */;
        this.lifecycle.afterDetach.begin();
        this.lifecycle.unmount.add(this);
        if (this.hooks.hasBeforeDetach) {
            this.bindingContext.beforeDetach(flags);
        }
        this.detachControllers(flags);
        if (this.hooks.hasAfterDetach) {
            this.lifecycle.afterDetach.add(this);
        }
        this.state = (this.state | 48 /* isAttachedOrDetaching */) ^ 48 /* isAttachedOrDetaching */;
        this.lifecycle.afterDetach.end(flags);
    }
    detachCustomAttribute(flags) {
        flags |= 32768 /* fromDetach */;
        this.state |= 16 /* isDetaching */;
        this.lifecycle.afterDetach.begin();
        if (this.hooks.hasBeforeDetach) {
            this.bindingContext.beforeDetach(flags);
        }
        if (this.hooks.hasAfterDetach) {
            this.lifecycle.afterDetach.add(this);
        }
        this.state = (this.state | 48 /* isAttachedOrDetaching */) ^ 48 /* isAttachedOrDetaching */;
        this.lifecycle.afterDetach.end(flags);
    }
    detachSynthetic(flags) {
        flags |= 32768 /* fromDetach */;
        this.state |= 16 /* isDetaching */;
        this.lifecycle.afterDetach.begin();
        this.lifecycle.unmount.add(this);
        this.detachControllers(flags);
        this.state = (this.state | 48 /* isAttachedOrDetaching */) ^ 48 /* isAttachedOrDetaching */;
        this.lifecycle.afterDetach.end(flags);
    }
    attachControllers(flags) {
        const { controllers } = this;
        if (controllers !== void 0) {
            const { length } = controllers;
            for (let i = 0; i < length; ++i) {
                controllers[i].attach(flags);
            }
        }
    }
    detachControllers(flags) {
        const { controllers } = this;
        if (controllers !== void 0) {
            for (let i = controllers.length - 1; i >= 0; --i) {
                controllers[i].detach(flags);
            }
        }
    }
    // #endregion
    // #region mount/unmount/cache
    mountCustomElement(flags) {
        if ((this.state & 64 /* isMounted */) > 0) {
            return;
        }
        this.state |= 64 /* isMounted */;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.projector.project(this.nodes); // non-null is implied by the hook
    }
    mountSynthetic(flags) {
        const nodes = this.nodes; // non null is implied by the hook
        const location = this.location; // non null is implied by the hook
        this.state |= 64 /* isMounted */;
        switch (this.mountStrategy) {
            case 2 /* append */:
                nodes.appendTo(location);
                break;
            default:
                nodes.insertBefore(location);
        }
    }
    unmountCustomElement(flags) {
        if ((this.state & 64 /* isMounted */) === 0) {
            return;
        }
        this.state = (this.state | 64 /* isMounted */) ^ 64 /* isMounted */;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.projector.take(this.nodes); // non-null is implied by the hook
    }
    unmountSynthetic(flags) {
        if ((this.state & 64 /* isMounted */) === 0) {
            return false;
        }
        this.state = (this.state | 64 /* isMounted */) ^ 64 /* isMounted */;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.nodes.remove(); // non-null is implied by the hook
        this.nodes.unlink();
        if ((this.state & 512 /* canBeCached */) > 0) {
            this.state = (this.state | 512 /* canBeCached */) ^ 512 /* canBeCached */;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            if (this.viewFactory.tryReturnToCache(this)) { // non-null is implied by the hook
                return true;
            }
        }
        return false;
    }
    cacheCustomElement(flags) {
        flags |= 65536 /* fromCache */;
        if (this.hooks.hasCaching) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.bindingContext.caching(flags); // non-null is implied by the hook
        }
    }
    cacheCustomAttribute(flags) {
        flags |= 65536 /* fromCache */;
        if (this.hooks.hasCaching) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.bindingContext.caching(flags); // non-null is implied by the hook
        }
        const { controllers } = this;
        if (controllers !== void 0) {
            const { length } = controllers;
            for (let i = length - 1; i >= 0; --i) {
                controllers[i].cache(flags);
            }
        }
    }
    cacheSynthetic(flags) {
        const { controllers } = this;
        if (controllers !== void 0) {
            const { length } = controllers;
            for (let i = length - 1; i >= 0; --i) {
                controllers[i].cache(flags);
            }
        }
    }
}
function getBindingContext(flags, instance) {
    if (instance.noProxy === true || (flags & 2 /* proxyStrategy */) === 0) {
        return instance;
    }
    return ProxyObserver.getOrCreate(instance).proxy;
}
function getLookup(instance) {
    let lookup = instance.$observers;
    if (lookup === void 0) {
        Reflect.defineProperty(instance, '$observers', {
            enumerable: false,
            value: lookup = {},
        });
    }
    return lookup;
}
function createObservers(lifecycle, definition, flags, instance) {
    const bindables = definition.bindables;
    const observableNames = Object.getOwnPropertyNames(bindables);
    const length = observableNames.length;
    if (length > 0) {
        let name;
        let bindable;
        if ((flags & 2 /* proxyStrategy */) > 0) {
            for (let i = 0; i < length; ++i) {
                name = observableNames[i];
                bindable = bindables[name];
                new BindableObserver(lifecycle, flags, ProxyObserver.getOrCreate(instance).proxy, name, bindable.callback, bindable.set);
            }
        }
        else {
            const observers = getLookup(instance);
            for (let i = 0; i < length; ++i) {
                name = observableNames[i];
                if (observers[name] === void 0) {
                    bindable = bindables[name];
                    observers[name] = new BindableObserver(lifecycle, flags, instance, name, bindable.callback, bindable.set);
                }
            }
        }
    }
}
function createChildrenObservers(controller, definition, flags, instance) {
    const childrenObservers = definition.childrenObservers;
    const childObserverNames = Object.getOwnPropertyNames(childrenObservers);
    const length = childObserverNames.length;
    if (length > 0) {
        const observers = getLookup(instance);
        let name;
        for (let i = 0; i < length; ++i) {
            name = childObserverNames[i];
            if (observers[name] == void 0) {
                const childrenDescription = childrenObservers[name];
                observers[name] = new ChildrenObserver(controller, instance, flags, name, childrenDescription.callback, childrenDescription.query, childrenDescription.filter, childrenDescription.map, childrenDescription.options);
            }
        }
    }
}

class ViewFactory {
    constructor(name, context, lifecycle, parts) {
        this.name = name;
        this.context = context;
        this.lifecycle = lifecycle;
        this.parts = parts;
        this.isCaching = false;
        this.cache = null;
        this.cacheSize = -1;
    }
    setCacheSize(size, doNotOverrideIfAlreadySet) {
        if (size) {
            if (size === '*') {
                size = ViewFactory.maxCacheSize;
            }
            else if (typeof size === 'string') {
                size = parseInt(size, 10);
            }
            if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {
                this.cacheSize = size;
            }
        }
        if (this.cacheSize > 0) {
            this.cache = [];
        }
        else {
            this.cache = null;
        }
        this.isCaching = this.cacheSize > 0;
    }
    canReturnToCache(controller) {
        return this.cache != null && this.cache.length < this.cacheSize;
    }
    tryReturnToCache(controller) {
        if (this.canReturnToCache(controller)) {
            controller.cache(0 /* none */);
            this.cache.push(controller);
            return true;
        }
        return false;
    }
    create(flags) {
        const cache = this.cache;
        let controller;
        if (cache != null && cache.length > 0) {
            controller = cache.pop();
            return controller;
        }
        controller = Controller.forSyntheticView(this, this.lifecycle, this.context, flags);
        return controller;
    }
    resolve(requestor, parts) {
        parts = mergeParts(this.parts, parts);
        if (parts === void 0) {
            return this;
        }
        const part = parts[this.name];
        if (part === void 0) {
            return this;
        }
        return getRenderContext(part, requestor, parts).getViewFactory(this.name);
    }
}
ViewFactory.maxCacheSize = 0xFFFF;
const seenViews = new WeakSet();
function notYetSeen($view) {
    return !seenViews.has($view);
}
function toCustomElementDefinition($view) {
    seenViews.add($view);
    return CustomElementDefinition.create($view);
}
const Views = {
    name: Protocol.resource.keyFor('views'),
    has(value) {
        return typeof value === 'function' && (Metadata.hasOwn(Views.name, value) || '$views' in value);
    },
    get(value) {
        if (typeof value === 'function' && '$views' in value) {
            // TODO: a `get` operation with side effects is not a good thing. Should refactor this to a proper resource kind.
            const $views = value.$views;
            const definitions = $views.filter(notYetSeen).map(toCustomElementDefinition);
            for (const def of definitions) {
                Views.add(value, def);
            }
        }
        let views = Metadata.getOwn(Views.name, value);
        if (views === void 0) {
            Metadata.define(Views.name, views = [], value);
        }
        return views;
    },
    add(Type, partialDefinition) {
        const definition = CustomElementDefinition.create(partialDefinition);
        let views = Metadata.getOwn(Views.name, Type);
        if (views === void 0) {
            Metadata.define(Views.name, views = [definition], Type);
        }
        else {
            views.push(definition);
        }
        return views;
    },
};
const IViewLocator = DI.createInterface('IViewLocator')
    .noDefault();
class ViewLocator {
    constructor() {
        this.modelInstanceToBoundComponent = new WeakMap();
        this.modelTypeToUnboundComponent = new Map();
    }
    static register(container) {
        return Registration.singleton(IViewLocator, this).register(container);
    }
    getViewComponentForObject(object, viewNameOrSelector) {
        if (object) {
            const availableViews = Views.has(object.constructor) ? Views.get(object.constructor) : [];
            const resolvedViewName = typeof viewNameOrSelector === 'function'
                ? viewNameOrSelector(object, availableViews)
                : this.getViewName(availableViews, viewNameOrSelector);
            return this.getOrCreateBoundComponent(object, availableViews, resolvedViewName);
        }
        return null;
    }
    getOrCreateBoundComponent(object, availableViews, resolvedViewName) {
        let lookup = this.modelInstanceToBoundComponent.get(object);
        let BoundComponent;
        if (lookup === void 0) {
            lookup = {};
            this.modelInstanceToBoundComponent.set(object, lookup);
        }
        else {
            BoundComponent = lookup[resolvedViewName];
        }
        if (BoundComponent === void 0) {
            const UnboundComponent = this.getOrCreateUnboundComponent(object, availableViews, resolvedViewName);
            BoundComponent = CustomElement.define(CustomElement.getDefinition(UnboundComponent), class extends UnboundComponent {
                constructor() {
                    super(object);
                }
            });
            lookup[resolvedViewName] = BoundComponent;
        }
        return BoundComponent;
    }
    getOrCreateUnboundComponent(object, availableViews, resolvedViewName) {
        let lookup = this.modelTypeToUnboundComponent.get(object.constructor);
        let UnboundComponent;
        if (lookup === void 0) {
            lookup = {};
            this.modelTypeToUnboundComponent.set(object.constructor, lookup);
        }
        else {
            UnboundComponent = lookup[resolvedViewName];
        }
        if (UnboundComponent === void 0) {
            UnboundComponent = CustomElement.define(this.getView(availableViews, resolvedViewName), class {
                constructor(viewModel) {
                    this.viewModel = viewModel;
                }
                create(controller, parentContainer, definition, parts) {
                    const vm = this.viewModel;
                    controller.scope = Scope.fromParent(controller.flags, controller.scope, vm);
                    if (vm.create !== void 0) {
                        return vm.create(controller, parentContainer, definition, parts);
                    }
                }
            });
            const proto = UnboundComponent.prototype;
            if ('beforeCompile' in object) {
                proto.beforeCompile = function beforeCompile(controller) {
                    this.viewModel.beforeCompile(controller);
                };
            }
            if ('afterCompile' in object) {
                proto.afterCompile = function afterCompile(controller) {
                    this.viewModel.afterCompile(controller);
                };
            }
            if ('afterCompileChildren' in object) {
                proto.afterCompileChildren = function afterCompileChildren(controller) {
                    this.viewModel.afterCompileChildren(controller);
                };
            }
            if ('beforeBind' in object) {
                proto.beforeBind = function beforeBind(flags) {
                    return this.viewModel.beforeBind(flags);
                };
            }
            if ('afterBind' in object) {
                proto.afterBind = function afterBind(flags) {
                    this.viewModel.afterBind(flags);
                };
            }
            if ('beforeUnbind' in object) {
                proto.beforeUnbind = function beforeUnbind(flags) {
                    return this.viewModel.beforeUnbind(flags);
                };
            }
            if ('afterUnbind' in object) {
                proto.afterUnbind = function afterUnbind(flags) {
                    this.viewModel.afterUnbind(flags);
                };
            }
            if ('beforeAttach' in object) {
                proto.beforeAttach = function beforeAttach(flags) {
                    this.viewModel.beforeAttach(flags);
                };
            }
            if ('afterAttach' in object) {
                proto.afterAttach = function afterAttach(flags) {
                    this.viewModel.afterAttach(flags);
                };
            }
            if ('beforeDetach' in object) {
                proto.beforeDetach = function beforeDetach(flags) {
                    this.viewModel.beforeDetach(flags);
                };
            }
            if ('afterDetach' in object) {
                proto.afterDetach = function afterDetach(flags) {
                    this.viewModel.afterDetach(flags);
                };
            }
            if ('caching' in object) {
                proto.caching = function caching(flags) {
                    this.viewModel.caching(flags);
                };
            }
            lookup[resolvedViewName] = UnboundComponent;
        }
        return UnboundComponent;
    }
    getViewName(views, requestedName) {
        if (requestedName) {
            return requestedName;
        }
        if (views.length === 1) {
            return views[0].name;
        }
        return 'default-view';
    }
    getView(views, name) {
        const v = views.find(x => x.name === name);
        if (v === void 0) {
            // TODO: Use Reporter
            throw new Error(`Could not find view: ${name}`);
        }
        return v;
    }
}

var __decorate$v = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$v = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$d = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let ViewValueConverter = class ViewValueConverter {
    constructor(viewLocator) {
        this.viewLocator = viewLocator;
    }
    toView(object, viewNameOrSelector) {
        return this.viewLocator.getViewComponentForObject(object, viewNameOrSelector);
    }
};
ViewValueConverter = __decorate$v([
    valueConverter('view'),
    __param$d(0, IViewLocator),
    __metadata$v("design:paramtypes", [Object])
], ViewValueConverter);

const IActivator = DI.createInterface('IActivator').withDefault(x => x.singleton(Activator));
/** @internal */
class Activator {
    constructor(taskManager) {
        this.taskManager = taskManager;
    }
    static register(container) {
        return Registration.singleton(IActivator, this).register(container);
    }
    activate(host, component, container, flags = 1024 /* fromStartTask */, parentScope) {
        flags = flags === void 0 ? 0 /* none */ : flags;
        const mgr = this.taskManager;
        let task = mgr.runBeforeRender();
        if (task.done) {
            this.render(host, component, container, flags);
        }
        else {
            task = new ContinuationTask(task, this.render, this, host, component, container, flags);
        }
        if (task.done) {
            task = mgr.runBeforeBind();
        }
        else {
            task = new ContinuationTask(task, mgr.runBeforeBind, mgr);
        }
        if (task.done) {
            task = this.bind(component, flags, parentScope);
        }
        else {
            task = new ContinuationTask(task, this.bind, this, component, flags, parentScope);
        }
        if (task.done) {
            task = mgr.runBeforeAttach();
        }
        else {
            task = new ContinuationTask(task, mgr.runBeforeAttach, mgr);
        }
        if (task.done) {
            this.attach(component, flags);
        }
        else {
            task = new ContinuationTask(task, this.attach, this, component, flags);
        }
        return task;
    }
    deactivate(component, flags = 2048 /* fromStopTask */) {
        const controller = Controller.getCachedOrThrow(component);
        controller.detach(flags | 32768 /* fromDetach */);
        return controller.unbind(flags | 8192 /* fromUnbind */);
    }
    render(host, component, container, flags) {
        const lifecycle = container.get(ILifecycle);
        Controller.forCustomElement(component, lifecycle, host, container, void 0, flags);
    }
    bind(component, flags, parentScope) {
        return Controller.getCachedOrThrow(component).bind(flags | 4096 /* fromBind */, parentScope);
    }
    attach(component, flags) {
        Controller.getCachedOrThrow(component).attach(flags | 16384 /* fromAttach */);
    }
}
Activator.inject = [IStartTaskManager];

class CompositionRoot {
    constructor(config, container) {
        this.config = config;
        if (config.host != void 0) {
            if (container.has(INode, false)) {
                this.container = container.createChild();
            }
            else {
                this.container = container;
            }
            Registration.instance(INode, config.host).register(this.container);
            this.host = config.host;
        }
        else if (container.has(INode, true)) {
            this.container = container;
            this.host = container.get(INode);
        }
        else {
            throw new Error(`No host element found.`);
        }
        this.strategy = config.strategy != void 0 ? config.strategy : 1 /* getterSetter */;
        const initializer = this.container.get(IDOMInitializer);
        this.dom = initializer.initialize(config);
        this.lifecycle = this.container.get(ILifecycle);
        this.activator = this.container.get(IActivator);
        const taskManager = this.container.get(IStartTaskManager);
        const beforeCreateTask = taskManager.runBeforeCreate();
        if (beforeCreateTask.done) {
            this.task = LifecycleTask.done;
            this.create();
        }
        else {
            this.task = new ContinuationTask(beforeCreateTask, this.create, this);
        }
    }
    activate(antecedent) {
        const { task, host, viewModel, container, activator, strategy } = this;
        const flags = strategy | 1024 /* fromStartTask */;
        if (viewModel === void 0) {
            if (this.createTask === void 0) {
                this.createTask = new ContinuationTask(task, this.activate, this, antecedent);
            }
            return this.createTask;
        }
        if (task.done) {
            if (antecedent == void 0 || antecedent.done) {
                this.task = activator.activate(host, viewModel, container, flags, void 0);
            }
            else {
                this.task = new ContinuationTask(antecedent, activator.activate, activator, host, viewModel, container, flags, void 0);
            }
        }
        else {
            if (antecedent == void 0 || antecedent.done) {
                this.task = new ContinuationTask(task, activator.activate, activator, host, viewModel, container, flags, void 0);
            }
            else {
                const combinedAntecedent = new ContinuationTask(task, antecedent.wait, antecedent);
                this.task = new ContinuationTask(combinedAntecedent, activator.activate, activator, host, viewModel, container, flags, void 0);
            }
        }
        return this.task;
    }
    deactivate(antecedent) {
        const { task, viewModel, activator, strategy } = this;
        const flags = strategy | 2048 /* fromStopTask */;
        if (viewModel === void 0) {
            if (this.createTask === void 0) {
                this.createTask = new ContinuationTask(task, this.deactivate, this, antecedent);
            }
            return this.createTask;
        }
        if (task.done) {
            if (antecedent == void 0 || antecedent.done) {
                this.task = activator.deactivate(viewModel, flags);
            }
            else {
                this.task = new ContinuationTask(antecedent, activator.deactivate, activator, viewModel, flags);
            }
        }
        else {
            if (antecedent == void 0 || antecedent.done) {
                this.task = new ContinuationTask(task, activator.deactivate, activator, viewModel, flags);
            }
            else {
                const combinedAntecedent = new ContinuationTask(task, antecedent.wait, antecedent);
                this.task = new ContinuationTask(combinedAntecedent, activator.deactivate, activator, viewModel, flags);
            }
        }
        return this.task;
    }
    create() {
        const config = this.config;
        const instance = this.viewModel = CustomElement.isType(config.component)
            ? this.container.get(config.component)
            : config.component;
        const container = this.container;
        const lifecycle = container.get(ILifecycle);
        this.controller = Controller.forCustomElement(instance, lifecycle, this.host, container, void 0, this.strategy);
    }
}
class Aurelia {
    constructor(container = DI.createContainer()) {
        this.container = container;
        this.task = LifecycleTask.done;
        this._isRunning = false;
        this._isStarting = false;
        this._isStopping = false;
        this._root = void 0;
        this.next = (void 0);
        Registration.instance(Aurelia, this).register(container);
    }
    get isRunning() {
        return this._isRunning;
    }
    get isStarting() {
        return this._isStarting;
    }
    get isStopping() {
        return this._isStopping;
    }
    get root() {
        if (this._root == void 0) {
            if (this.next == void 0) {
                throw new Error(`root is not defined`); // TODO: create error code
            }
            return this.next;
        }
        return this._root;
    }
    register(...params) {
        this.container.register(...params);
        return this;
    }
    app(config) {
        this.next = new CompositionRoot(config, this.container);
        if (this.isRunning) {
            this.start();
        }
        return this;
    }
    start(root = this.next) {
        if (root == void 0) {
            throw new Error(`There is no composition root`); // TODO: create error code
        }
        this.stop(root);
        if (this.task.done) {
            this.onBeforeStart(root);
        }
        else {
            this.task = new ContinuationTask(this.task, this.onBeforeStart, this, root);
        }
        this.task = this.root.activate(this.task);
        if (this.task.done) {
            this.task = this.onAfterStart(root);
        }
        else {
            this.task = new ContinuationTask(this.task, this.onAfterStart, this, root);
        }
        return this.task;
    }
    stop(root = this._root) {
        if (this._isRunning && root != void 0) {
            if (this.task.done) {
                this.onBeforeStop(root);
            }
            else {
                this.task = new ContinuationTask(this.task, this.onBeforeStop, this, root);
            }
            this.task = root.deactivate(this.task);
            if (this.task.done) {
                this.task = this.onAfterStop(root);
            }
            else {
                this.task = new ContinuationTask(this.task, this.onAfterStop, this, root);
            }
        }
        return this.task;
    }
    wait() {
        return this.task.wait();
    }
    onBeforeStart(root) {
        Reflect.set(root.host, '$aurelia', this);
        this._root = root;
        this._isStarting = true;
    }
    onAfterStart(root) {
        this._isRunning = true;
        this._isStarting = false;
        this.dispatchEvent(root, 'aurelia-composed', root.dom);
        this.dispatchEvent(root, 'au-started', root.host);
        return LifecycleTask.done;
    }
    onBeforeStop(root) {
        this._isRunning = false;
        this._isStopping = true;
    }
    onAfterStop(root) {
        Reflect.deleteProperty(root.host, '$aurelia');
        this._root = void 0;
        this._isStopping = false;
        this.dispatchEvent(root, 'au-stopped', root.host);
        return LifecycleTask.done;
    }
    dispatchEvent(root, name, target) {
        target = 'dispatchEvent' in target ? target : root.dom;
        target.dispatchEvent(root.dom.createCustomEvent(name, { detail: this, bubbles: true, cancelable: true }));
    }
}
PLATFORM.global.Aurelia = Aurelia;
const IDOMInitializer = DI.createInterface('IDOMInitializer').noDefault();

const IObserverLocatorRegistration = ObserverLocator;
const ILifecycleRegistration = Lifecycle;
const IRendererRegistration = Renderer;
const IStartTaskManagerRegistration = StartTaskManager;
const IViewLocatorRegistration = ViewLocator;
/**
 * Default implementations for the following interfaces:
 * - `IObserverLocator`
 * - `ILifecycle`
 * - `IRenderer`
 * - `IStartTaskManager`
 * - `IViewLocator`
 * - `IClockRegistration`
 * - `ISchedulerRegistration`
 */
const DefaultComponents = [
    IObserverLocatorRegistration,
    ILifecycleRegistration,
    IRendererRegistration,
    IStartTaskManagerRegistration,
    IViewLocatorRegistration,
    Now,
];
const FrequentMutationsRegistration = FrequentMutations;
const InfrequentMutationsRegistration = InfrequentMutations;
const ObserveShallowRegistration = ObserveShallow;
const IfRegistration = If;
const ElseRegistration = Else;
const RepeatRegistration = Repeat;
const ReplaceableRegistration = Replaceable;
const WithRegistration = With;
const SanitizeValueConverterRegistration = SanitizeValueConverter;
const ViewValueConverterRegistration = ViewValueConverter;
const DebounceBindingBehaviorRegistration = DebounceBindingBehavior;
const OneTimeBindingBehaviorRegistration = OneTimeBindingBehavior;
const ToViewBindingBehaviorRegistration = ToViewBindingBehavior;
const FromViewBindingBehaviorRegistration = FromViewBindingBehavior;
const SignalBindingBehaviorRegistration = SignalBindingBehavior;
const ThrottleBindingBehaviorRegistration = ThrottleBindingBehavior;
const TwoWayBindingBehaviorRegistration = TwoWayBindingBehavior;
/**
 * Default resources:
 * - Template controllers (`if`/`else`, `repeat`, `replaceable`, `with`)
 * - Value Converters (`sanitize`)
 * - Binding Behaviors (`oneTime`, `toView`, `fromView`, `twoWay`, `signal`, `debounce`, `throttle`)
 */
const DefaultResources = [
    FrequentMutationsRegistration,
    InfrequentMutationsRegistration,
    ObserveShallowRegistration,
    IfRegistration,
    ElseRegistration,
    RepeatRegistration,
    ReplaceableRegistration,
    WithRegistration,
    SanitizeValueConverterRegistration,
    ViewValueConverterRegistration,
    DebounceBindingBehaviorRegistration,
    OneTimeBindingBehaviorRegistration,
    ToViewBindingBehaviorRegistration,
    FromViewBindingBehaviorRegistration,
    SignalBindingBehaviorRegistration,
    ThrottleBindingBehaviorRegistration,
    TwoWayBindingBehaviorRegistration
];
const CallBindingRendererRegistration = CallBindingRenderer;
const CustomAttributeRendererRegistration = CustomAttributeRenderer;
const CustomElementRendererRegistration = CustomElementRenderer;
const InterpolationBindingRendererRegistration = InterpolationBindingRenderer;
const IteratorBindingRendererRegistration = IteratorBindingRenderer;
const LetElementRendererRegistration = LetElementRenderer;
const PropertyBindingRendererRegistration = PropertyBindingRenderer;
const RefBindingRendererRegistration = RefBindingRenderer;
const SetPropertyRendererRegistration = SetPropertyRenderer;
const TemplateControllerRendererRegistration = TemplateControllerRenderer;
/**
 * Default renderers for:
 * - PropertyBinding: `bind`, `one-time`, `to-view`, `from-view`, `two-way`
 * - IteratorBinding: `for`
 * - CallBinding: `call`
 * - RefBinding: `ref`
 * - InterpolationBinding: `${}`
 * - SetProperty
 * - `customElement` hydration
 * - `customAttribute` hydration
 * - `templateController` hydration
 * - `let` element hydration
 */
const DefaultRenderers = [
    PropertyBindingRendererRegistration,
    IteratorBindingRendererRegistration,
    CallBindingRendererRegistration,
    RefBindingRendererRegistration,
    InterpolationBindingRendererRegistration,
    SetPropertyRendererRegistration,
    CustomElementRendererRegistration,
    CustomAttributeRendererRegistration,
    TemplateControllerRendererRegistration,
    LetElementRendererRegistration
];
/**
 * A DI configuration object containing environment/runtime-agnostic registrations:
 * - `DefaultComponents`
 * - `DefaultResources`
 * - `DefaultRenderers`
 */
const RuntimeConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        return container.register(...DefaultComponents, ...DefaultResources, ...DefaultRenderers);
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(DI.createContainer());
    }
};

class InterpolationInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rf" /* interpolation */;
    }
}
class OneTimeBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rg" /* propertyBinding */;
        this.mode = BindingMode.oneTime;
        this.oneTime = true;
    }
}
class ToViewBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rg" /* propertyBinding */;
        this.mode = BindingMode.toView;
        this.oneTime = false;
    }
}
class FromViewBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rg" /* propertyBinding */;
        this.mode = BindingMode.fromView;
        this.oneTime = false;
    }
}
class TwoWayBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rg" /* propertyBinding */;
        this.mode = BindingMode.twoWay;
        this.oneTime = false;
    }
}
class IteratorBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rk" /* iteratorBinding */;
    }
}
class CallBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rh" /* callBinding */;
    }
}
class RefBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "rj" /* refBinding */;
        this.type = "rj" /* refBinding */;
    }
}
class SetPropertyInstruction {
    constructor(value, to) {
        this.value = value;
        this.to = to;
        this.type = "re" /* setProperty */;
    }
}
class HydrateElementInstruction {
    constructor(res, instructions, parts) {
        this.res = res;
        this.instructions = instructions;
        this.parts = parts;
        this.type = "ra" /* hydrateElement */;
    }
}
class HydrateAttributeInstruction {
    constructor(res, instructions) {
        this.res = res;
        this.instructions = instructions;
        this.type = "rb" /* hydrateAttribute */;
    }
}
class HydrateTemplateController {
    constructor(def, res, instructions, link, parts) {
        this.def = def;
        this.res = res;
        this.instructions = instructions;
        this.link = link;
        this.parts = parts;
        this.type = "rc" /* hydrateTemplateController */;
    }
}
class LetElementInstruction {
    constructor(instructions, toBindingContext) {
        this.instructions = instructions;
        this.toBindingContext = toBindingContext;
        this.type = "rd" /* hydrateLetElement */;
    }
}
class LetBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "ri" /* letBinding */;
    }
}

const astTypeMap = [
    { type: AccessKeyedExpression, name: 'AccessKeyedExpression' },
    { type: AccessMemberExpression, name: 'AccessMemberExpression' },
    { type: AccessScopeExpression, name: 'AccessScopeExpression' },
    { type: AccessThisExpression, name: 'AccessThisExpression' },
    { type: ArrayBindingPattern, name: 'ArrayBindingPattern' },
    { type: ArrayLiteralExpression, name: 'ArrayLiteralExpression' },
    { type: AssignExpression, name: 'AssignExpression' },
    { type: BinaryExpression, name: 'BinaryExpression' },
    { type: BindingBehaviorExpression, name: 'BindingBehaviorExpression' },
    { type: BindingIdentifier, name: 'BindingIdentifier' },
    { type: CallFunctionExpression, name: 'CallFunctionExpression' },
    { type: CallMemberExpression, name: 'CallMemberExpression' },
    { type: CallScopeExpression, name: 'CallScopeExpression' },
    { type: ConditionalExpression, name: 'ConditionalExpression' },
    { type: ForOfStatement, name: 'ForOfStatement' },
    { type: HtmlLiteralExpression, name: 'HtmlLiteralExpression' },
    { type: Interpolation, name: 'Interpolation' },
    { type: ObjectBindingPattern, name: 'ObjectBindingPattern' },
    { type: ObjectLiteralExpression, name: 'ObjectLiteralExpression' },
    { type: PrimitiveLiteralExpression, name: 'PrimitiveLiteralExpression' },
    { type: TaggedTemplateExpression, name: 'TaggedTemplateExpression' },
    { type: TemplateExpression, name: 'TemplateExpression' },
    { type: UnaryExpression, name: 'UnaryExpression' },
    { type: ValueConverterExpression, name: 'ValueConverterExpression' }
];
function enableImprovedExpressionDebugging() {
    astTypeMap.forEach(x => { adoptDebugMethods(x.type, x.name); });
}
/** @internal */
function adoptDebugMethods($type, name) {
    $type.prototype.toString = function () { return Unparser.unparse(this); };
}
class Unparser {
    constructor() {
        this.text = '';
    }
    static unparse(expr) {
        const visitor = new Unparser();
        expr.accept(visitor);
        return visitor.text;
    }
    visitAccessMember(expr) {
        expr.object.accept(this);
        this.text += `.${expr.name}`;
    }
    visitAccessKeyed(expr) {
        expr.object.accept(this);
        this.text += '[';
        expr.key.accept(this);
        this.text += ']';
    }
    visitAccessThis(expr) {
        if (expr.ancestor === 0) {
            this.text += '$this';
            return;
        }
        this.text += '$parent';
        let i = expr.ancestor - 1;
        while (i--) {
            this.text += '.$parent';
        }
    }
    visitAccessScope(expr) {
        let i = expr.ancestor;
        while (i--) {
            this.text += '$parent.';
        }
        this.text += expr.name;
    }
    visitArrayLiteral(expr) {
        const elements = expr.elements;
        this.text += '[';
        for (let i = 0, length = elements.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            elements[i].accept(this);
        }
        this.text += ']';
    }
    visitObjectLiteral(expr) {
        const keys = expr.keys;
        const values = expr.values;
        this.text += '{';
        for (let i = 0, length = keys.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            this.text += `'${keys[i]}':`;
            values[i].accept(this);
        }
        this.text += '}';
    }
    visitPrimitiveLiteral(expr) {
        this.text += '(';
        if (typeof expr.value === 'string') {
            const escaped = expr.value.replace(/'/g, '\\\'');
            this.text += `'${escaped}'`;
        }
        else {
            this.text += `${expr.value}`;
        }
        this.text += ')';
    }
    visitCallFunction(expr) {
        this.text += '(';
        expr.func.accept(this);
        this.writeArgs(expr.args);
        this.text += ')';
    }
    visitCallMember(expr) {
        this.text += '(';
        expr.object.accept(this);
        this.text += `.${expr.name}`;
        this.writeArgs(expr.args);
        this.text += ')';
    }
    visitCallScope(expr) {
        this.text += '(';
        let i = expr.ancestor;
        while (i--) {
            this.text += '$parent.';
        }
        this.text += expr.name;
        this.writeArgs(expr.args);
        this.text += ')';
    }
    visitTemplate(expr) {
        const { cooked, expressions } = expr;
        const length = expressions.length;
        this.text += '`';
        this.text += cooked[0];
        for (let i = 0; i < length; i++) {
            expressions[i].accept(this);
            this.text += cooked[i + 1];
        }
        this.text += '`';
    }
    visitTaggedTemplate(expr) {
        const { cooked, expressions } = expr;
        const length = expressions.length;
        expr.func.accept(this);
        this.text += '`';
        this.text += cooked[0];
        for (let i = 0; i < length; i++) {
            expressions[i].accept(this);
            this.text += cooked[i + 1];
        }
        this.text += '`';
    }
    visitUnary(expr) {
        this.text += `(${expr.operation}`;
        if (expr.operation.charCodeAt(0) >= /* a */ 97) {
            this.text += ' ';
        }
        expr.expression.accept(this);
        this.text += ')';
    }
    visitBinary(expr) {
        this.text += '(';
        expr.left.accept(this);
        if (expr.operation.charCodeAt(0) === /* i */ 105) {
            this.text += ` ${expr.operation} `;
        }
        else {
            this.text += expr.operation;
        }
        expr.right.accept(this);
        this.text += ')';
    }
    visitConditional(expr) {
        this.text += '(';
        expr.condition.accept(this);
        this.text += '?';
        expr.yes.accept(this);
        this.text += ':';
        expr.no.accept(this);
        this.text += ')';
    }
    visitAssign(expr) {
        this.text += '(';
        expr.target.accept(this);
        this.text += '=';
        expr.value.accept(this);
        this.text += ')';
    }
    visitValueConverter(expr) {
        const args = expr.args;
        expr.expression.accept(this);
        this.text += `|${expr.name}`;
        for (let i = 0, length = args.length; i < length; ++i) {
            this.text += ':';
            args[i].accept(this);
        }
    }
    visitBindingBehavior(expr) {
        const args = expr.args;
        expr.expression.accept(this);
        this.text += `&${expr.name}`;
        for (let i = 0, length = args.length; i < length; ++i) {
            this.text += ':';
            args[i].accept(this);
        }
    }
    visitArrayBindingPattern(expr) {
        const elements = expr.elements;
        this.text += '[';
        for (let i = 0, length = elements.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            elements[i].accept(this);
        }
        this.text += ']';
    }
    visitObjectBindingPattern(expr) {
        const keys = expr.keys;
        const values = expr.values;
        this.text += '{';
        for (let i = 0, length = keys.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            this.text += `'${keys[i]}':`;
            values[i].accept(this);
        }
        this.text += '}';
    }
    visitBindingIdentifier(expr) {
        this.text += expr.name;
    }
    visitHtmlLiteral(expr) { throw new Error('visitHtmlLiteral'); }
    visitForOfStatement(expr) {
        expr.declaration.accept(this);
        this.text += ' of ';
        expr.iterable.accept(this);
    }
    visitInterpolation(expr) {
        const { parts, expressions } = expr;
        const length = expressions.length;
        this.text += '${';
        this.text += parts[0];
        for (let i = 0; i < length; i++) {
            expressions[i].accept(this);
            this.text += parts[i + 1];
        }
        this.text += '}';
    }
    writeArgs(args) {
        this.text += '(';
        for (let i = 0, length = args.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            args[i].accept(this);
        }
        this.text += ')';
    }
}

function applyFormat(message, ...params) {
    while (message.includes('%s')) {
        message = message.replace('%s', String(params.shift()));
    }
    return message;
}
const Reporter$1 = {
    ...Reporter,
    get level() {
        return Reporter.level;
    },
    write(code, ...params) {
        const info = getMessageInfoForCode(code);
        const message = `Code ${code}: ${info.message}`;
        switch (info.level) {
            case 1 /* debug */:
                if (this.level <= 1 /* debug */) {
                    console.debug(message, ...params);
                }
                break;
            case 2 /* info */:
                if (this.level <= 2 /* info */) {
                    console.info(message, ...params);
                }
                break;
            case 3 /* warn */:
                if (this.level <= 3 /* warn */) {
                    console.warn(message, ...params);
                }
                break;
            case 4 /* error */: {
                throw this.error(code, ...params);
            }
        }
    },
    error(code, ...params) {
        const info = getMessageInfoForCode(code);
        const error = new Error(`Code ${code}: ${applyFormat(info.message, ...params)}`);
        error.data = params;
        return error;
    }
};
function getMessageInfoForCode(code) {
    const info = codeLookup[code];
    return info !== undefined ? info : createInvalidCodeMessageInfo(code);
}
function createInvalidCodeMessageInfo(code) {
    return {
        level: 4 /* error */,
        message: `Attempted to report with unknown code ${code}.`
    };
}
const codeLookup = {
    0: {
        level: 3 /* warn */,
        message: 'Cannot add observers to object.'
    },
    1: {
        level: 3 /* warn */,
        message: 'Cannot observe property of object.'
    },
    2: {
        level: 2 /* info */,
        message: 'Starting application in debug mode.'
    },
    3: {
        level: 4 /* error */,
        message: 'Runtime expression compilation is only available when including JIT support.'
    },
    4: {
        level: 4 /* error */,
        message: 'Invalid animation direction.'
    },
    5: {
        level: 4 /* error */,
        message: 'key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?'
    },
    6: {
        level: 4 /* error */,
        message: 'Invalid resolver strategy specified.'
    },
    7: {
        level: 4 /* error */,
        message: 'Constructor Parameter with index cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?'
    },
    8: {
        level: 4 /* error */,
        message: 'Self binding behavior only supports events.'
    },
    9: {
        level: 4 /* error */,
        message: 'The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:\'blur\'">'
    },
    10: {
        level: 4 /* error */,
        message: 'The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.'
    },
    11: {
        level: 4 /* error */,
        message: 'Only property bindings and string interpolation bindings can be signaled. Trigger, delegate and call bindings cannot be signaled.'
    },
    12: {
        level: 4 /* error */,
        message: 'Signal name is required.'
    },
    14: {
        level: 4 /* error */,
        message: 'Property cannot be assigned.'
    },
    15: {
        level: 4 /* error */,
        message: 'Unexpected call context.'
    },
    16: {
        level: 4 /* error */,
        message: 'A dependency registration is missing for the interface %s.'
    },
    17: {
        level: 4 /* error */,
        message: 'You can only define one default implementation for an interface.'
    },
    18: {
        level: 4 /* error */,
        message: 'You cannot observe a setter only property.'
    },
    19: {
        level: 4 /* error */,
        message: 'Value for expression is non-repeatable.'
    },
    20: {
        level: 4 /* error */,
        message: 'No template compiler found with the specified name. JIT support or a custom compiler is required.'
    },
    21: {
        level: 4 /* error */,
        message: 'You cannot combine the containerless custom element option with Shadow DOM.'
    },
    22: {
        level: 4 /* error */,
        message: 'A containerless custom element cannot be the root component of an application.'
    },
    30: {
        level: 4 /* error */,
        message: 'There are more targets than there are target instructions.'
    },
    31: {
        level: 4 /* error */,
        message: 'There are more target instructions than there are targets.'
    },
    100: {
        level: 4 /* error */,
        message: 'Invalid start of expression.'
    },
    101: {
        level: 4 /* error */,
        message: 'Unconsumed token.'
    },
    102: {
        level: 4 /* error */,
        message: 'Double dot and spread operators are not supported.'
    },
    103: {
        level: 4 /* error */,
        message: 'Invalid member expression.'
    },
    104: {
        level: 4 /* error */,
        message: 'Unexpected end of expression.'
    },
    105: {
        level: 4 /* error */,
        message: 'Expected identifier.'
    },
    106: {
        level: 4 /* error */,
        message: 'Invalid BindingIdentifier at left hand side of "of".'
    },
    107: {
        level: 4 /* error */,
        message: 'Invalid or unsupported property definition in object literal.'
    },
    108: {
        level: 4 /* error */,
        message: 'Unterminated quote in string literal.'
    },
    109: {
        level: 4 /* error */,
        message: 'Unterminated template string.'
    },
    110: {
        level: 4 /* error */,
        message: 'Missing expected token.'
    },
    111: {
        level: 4 /* error */,
        message: 'Unexpected character.'
    },
    150: {
        level: 4 /* error */,
        message: 'Left hand side of expression is not assignable.'
    },
    151: {
        level: 4 /* error */,
        message: 'Unexpected keyword "of"'
    },
    401: {
        level: 3 /* warn */,
        message: `AttributePattern is missing a handler for '%s'.`
    },
    402: {
        level: 3 /* warn */,
        message: `AttributePattern handler for '%s' is not a function.`
    },
    800: {
        level: 4 /* error */,
        message: `Property '%s' is being dirty-checked.`
    },
    801: {
        level: 3 /* warn */,
        message: `Property '%s' is being dirty-checked.`
    },
    2000: {
        level: 4 /* error */,
        message: 'Router has not been activated.'
    },
    2001: {
        level: 4 /* error */,
        message: 'Router has already been activated.'
    },
    2002: {
        level: 4 /* error */,
        message: 'Failed to resolve all viewports.'
    },
    2003: {
        level: 4 /* error */,
        message: 'Browser navigation has already been activated.'
    },
    2004: {
        level: 4 /* error */,
        message: 'LinkHandler has already been activated.'
    },
    1001: {
        level: 2 /* info */,
        message: 'DOM already initialized. Destroying and re-initializing..'
    },
    10000: {
        level: 1 /* debug */,
        message: '%s'
    }
};

const marker$1 = {
    objName: 'marker',
    methodName: 'noop',
    params: PLATFORM.emptyArray,
    depth: -1,
    prev: null,
    next: null
};
class TraceInfo {
    constructor(objName, methodName, params) {
        this.objName = objName;
        this.methodName = methodName;
        this.params = params;
        this.objName = objName;
        this.methodName = methodName;
        this.depth = TraceInfo.stack.length;
        this.params = params;
        this.next = marker$1;
        this.prev = TraceInfo.tail;
        TraceInfo.tail.next = this;
        TraceInfo.tail = this;
        TraceInfo.stack.push(this);
    }
    static reset() {
        let current = TraceInfo.head;
        let next = null;
        while (current != null) {
            next = current.next;
            current.next = null;
            current.prev = null;
            current.params = null;
            current = next;
        }
        TraceInfo.head = marker$1;
        TraceInfo.tail = marker$1;
        TraceInfo.stack = [];
    }
    static enter(objName, methodName, params) {
        return new TraceInfo(objName, methodName, params);
    }
    static leave() {
        return TraceInfo.stack.pop();
    }
}
TraceInfo.head = marker$1;
TraceInfo.tail = marker$1;
TraceInfo.stack = [];
const DebugTracer = {
    ...Tracer,
    /**
     * A convenience property for the user to conditionally call the tracer.
     * This saves unnecessary `noop` and `slice` calls in non-AOT scenarios even if debugging is disabled.
     * In AOT these calls will simply be removed entirely.
     *
     * This property **only** turns on tracing if `@aurelia/debug` is included and configured as well.
     */
    enabled: false,
    liveLoggingEnabled: false,
    liveWriter: null,
    /**
     * Call this at the start of a method/function.
     * Each call to `enter` **must** have an accompanying call to `leave` for the tracer to work properly.
     *
     * @param objName - Any human-friendly name to identify the traced object with.
     * @param methodName - Any human-friendly name to identify the traced method with.
     * @param args - Pass in `Array.prototype.slice.call(arguments)` to also trace the parameters, or `null` if this is not needed (to save memory/cpu)
     */
    enter(objName, methodName, args) {
        if (this.enabled) {
            const info = TraceInfo.enter(objName, methodName, args);
            if (this.liveLoggingEnabled) {
                this.liveWriter.write(info);
            }
        }
    },
    /**
     * Call this at the end of a method/function. Pops one trace item off the stack.
     */
    leave() {
        if (this.enabled) {
            TraceInfo.leave();
        }
    },
    /**
     * Writes only the trace info leading up to the current method call.
     *
     * @param writer - An object to write the output to.
     */
    writeStack(writer) {
        let i = 0;
        const stack = TraceInfo.stack;
        const len = stack.length;
        while (i < len) {
            writer.write(stack[i]);
            ++i;
        }
    },
    /**
     * Writes all trace info captured since the previous flushAll operation.
     *
     * @param writer - An object to write the output to. Can be null to simply reset the tracer state.
     */
    flushAll(writer) {
        if (writer != null) {
            let current = TraceInfo.head.next; // skip the marker
            while (current != null && current !== marker$1) {
                writer.write(current);
                current = current.next;
            }
        }
        TraceInfo.reset();
    },
    enableLiveLogging: enableLiveLogging$1,
    /**
     * Stops writing out each trace info item as they are traced.
     */
    disableLiveLogging() {
        this.liveLoggingEnabled = false;
        this.liveWriter = null;
    }
};
const defaultOptions = {
    rendering: true,
    binding: true,
    observation: true,
    beforeAttach: true,
    mounting: true,
    di: true,
    lifecycle: true,
    jit: true
};
function enableLiveLogging$1(optionsOrWriter) {
    this.liveLoggingEnabled = true;
    if (optionsOrWriter && 'write' in optionsOrWriter) {
        this.liveWriter = optionsOrWriter;
    }
    else {
        const options = optionsOrWriter !== undefined ? optionsOrWriter : defaultOptions;
        this.liveWriter = createLiveTraceWriter(options);
    }
}
const toString = Object.prototype.toString;
function flagsText(info, i = 0) {
    if (info.params != null && info.params.length > i) {
        return stringifyLifecycleFlags(info.params[i]);
    }
    return 'none';
}
function _ctorName(obj) {
    let name;
    if (obj === undefined) {
        name = 'undefined';
    }
    else if (obj === null) {
        name = 'null';
    }
    else if (obj.constructor !== undefined) {
        if (obj.constructor.description) {
            name = `Resource{'${obj.constructor.description.name}'}`;
        }
        else {
            name = obj.constructor.name;
        }
    }
    else if (typeof obj === 'string') {
        name = `'${obj}'`;
    }
    else {
        name = toString.call(obj);
    }
    return name;
}
function ctorName(info, i = 0) {
    if (info.params != null && info.params.length > i) {
        return _ctorName(info.params[i]);
    }
    return 'undefined';
}
function scopeText(info, i = 0) {
    let $ctorName;
    if (info.params != null && info.params.length > i) {
        const $scope = info.params[i];
        if ($scope != null && $scope.bindingContext != null) {
            $ctorName = _ctorName($scope.bindingContext);
        }
        else {
            $ctorName = 'undefined';
        }
        return `Scope{${$ctorName}}`;
    }
    return 'undefined';
}
function keyText(info, i = 0) {
    if (info.params != null && info.params.length > i) {
        const $key = info.params[i];
        if (typeof $key === 'string') {
            return `'${$key}'`;
        }
        if ($key !== undefined && Reflect.has($key, 'friendlyName')) {
            return $key['friendlyName'];
        }
        return _ctorName($key);
    }
    return 'undefined';
}
function primitive(info, i = 0) {
    if (info.params != null && info.params.length > i) {
        const $key = info.params[i];
        if (typeof $key === 'string') {
            return `'${$key}'`;
        }
        return $key.toString();
    }
    return 'undefined';
}
const RenderingArgsProcessor = {
    $hydrate(info) {
        return flagsText(info);
    },
    render(info) {
        return `${flagsText(info)},IDOM,IContainer,${ctorName(info, 3)}`;
    },
    addBinding(info) {
        return `${ctorName(info)},${ctorName(info, 1)}`;
    },
    addComponent(info) {
        return `${ctorName(info)},${ctorName(info, 1)}`;
    }
};
const BindingArgsProcessor = {
    $bind(info) {
        return flagsText(info);
    },
    $unbind(info) {
        return flagsText(info);
    },
    connect(info) {
        return flagsText(info);
    },
    // currently only observers trace constructor calls but keep an eye on this if others are added, then we'd need additional filtering
    constructor(info) {
        switch (info.objName) {
            case 'ArrayObserver':
            case 'MapObserver':
            case 'SetObserver':
                return flagsText(info);
            case 'SetterObserver':
            case 'BindableObserver':
                return `${flagsText(info)},${ctorName(info, 1)},${primitive(info, 2)}`;
            case 'ProxyObserver':
                return ctorName(info);
            case 'ProxySubscriberCollection':
            case 'DirtyCheckProperty':
                return `${ctorName(info, 1)},${primitive(info, 2)}`;
            case 'PrimitiveObserver':
            case 'PropertyAccessor':
                return `${ctorName(info)},${primitive(info, 1)}`;
            default:
                return '';
        }
    },
    lockedBind(info) {
        return flagsText(info);
    },
    lockedUnbind(info) {
        return flagsText(info);
    },
    InternalObserversLookup(info) {
        return `${flagsText(info)},${ctorName(info, 1)},${primitive(info, 2)}`;
    },
    BindingContext(info) {
        switch (info.methodName) {
            case 'get':
                return `${scopeText(info)},${primitive(info, 1)},${primitive(info, 2)},${flagsText(info, 3)}`;
            case 'getObservers':
                return flagsText(info);
            default:
                return 'unknown';
        }
    },
    Scope(info) {
        switch (info.methodName) {
            case 'create':
                return `${flagsText(info)},${ctorName(info, 1)},${ctorName(info, 2)}`;
            case 'fromOverride':
                return `${flagsText(info)},${ctorName(info, 1)}`;
            case 'fromParent':
                return `${flagsText(info)},${scopeText(info, 1)},${ctorName(info, 2)}`;
            default:
                return 'unknown';
        }
    },
    OverrideContext(info) {
        switch (info.methodName) {
            case 'create':
                return `${flagsText(info)},${ctorName(info, 1)},${ctorName(info, 2)}`;
            case 'getObservers':
                return '';
            default:
                return 'unknown';
        }
    }
};
const ObservationArgsProcessor = {
    callSource(info) {
        const names = [];
        switch (info.objName) {
            case 'Listener':
                return (info.params[0]).type;
            case 'CallBinding':
                if (info.params != null) {
                    for (let i = 0, ii = info.params.length; i < ii; ++i) {
                        names.push(ctorName(info, i));
                    }
                }
                return names.join(',');
            default:
                return 'unknown';
        }
    },
    setValue(info) {
        let valueText;
        const value = info.params[0];
        switch (typeof value) {
            case 'undefined':
                valueText = 'undefined';
                break;
            case 'object':
                if (value === null) {
                    valueText = 'null';
                }
                else {
                    valueText = _ctorName(value);
                }
                break;
            case 'string':
                valueText = `'${value}'`;
                break;
            case 'number':
                valueText = value.toString();
                break;
            default:
                valueText = _ctorName(value);
        }
        return `${valueText},${flagsText(info, 1)}`;
    },
    flush(info) {
        return flagsText(info);
    },
    handleChange(info) {
        return `${primitive(info)},${primitive(info, 1)},${flagsText(info, 2)}`;
    },
    lockScope(info) {
        return scopeText(info);
    }
};
const AttachingArgsProcessor = {
    $attach(info) {
        return flagsText(info);
    },
    $detach(info) {
        return flagsText(info);
    },
    $cache(info) {
        return flagsText(info);
    },
    hold(info) {
        return `Node{'${(info.params[0]).textContent}'}`;
    },
    release(info) {
        return flagsText(info);
    }
};
const MountingArgsProcessor = {
    $mount(info) {
        return flagsText(info);
    },
    $unmount(info) {
        return flagsText(info);
    },
    project(info) {
        return ctorName(info);
    },
    take(info) {
        return ctorName(info);
    }
};
const DIArgsProcessor = {
    construct(info) {
        return ctorName(info);
    },
    Container(info) {
        const names = [];
        switch (info.methodName) {
            case 'get':
            case 'getAll':
                return keyText(info);
            case 'register':
                if (info.params != null) {
                    for (let i = 0, ii = info.params.length; i < ii; ++i) {
                        names.push(keyText(info, i));
                    }
                }
                return names.join(',');
            case 'createChild':
                return '';
            default:
                return 'unknown';
        }
    }
};
const LifecycleArgsProcessor = {
    Lifecycle(info) {
        switch (info.methodName.slice(0, 3)) {
            case 'beg':
                return '';
            case 'enq':
                return ctorName(info);
            case 'end':
            case 'pro':
                return flagsText(info);
            default:
                return 'unknown';
        }
    },
    CompositionCoordinator(info) {
        switch (info.methodName) {
            case 'enqueue':
                return 'IController';
            case 'swap':
                return `IController,${flagsText(info, 1)}`;
            case 'processNext':
                return '';
            default:
                return 'unknown';
        }
    },
    AggregateLifecycleTask(info) {
        switch (info.methodName) {
            case 'addTask':
            case 'removeTask':
                return ctorName(info);
            case 'complete':
                return `${primitive(info, 2)}`;
            default:
                return 'unknown';
        }
    }
};
const JitArgsProcessor = {
    TemplateBinder(info) {
        return ''; // TODO
    }
};
function createLiveTraceWriter(options) {
    const Processors = {};
    if (options.rendering) {
        Object.assign(Processors, RenderingArgsProcessor);
    }
    if (options.binding) {
        Object.assign(Processors, BindingArgsProcessor);
    }
    if (options.observation) {
        Object.assign(Processors, ObservationArgsProcessor);
    }
    if (options.beforeAttach) {
        Object.assign(Processors, AttachingArgsProcessor);
    }
    if (options.mounting) {
        Object.assign(Processors, MountingArgsProcessor);
    }
    if (options.di) {
        Object.assign(Processors, DIArgsProcessor);
    }
    if (options.lifecycle) {
        Object.assign(Processors, LifecycleArgsProcessor);
    }
    if (options.jit) {
        Object.assign(Processors, JitArgsProcessor);
    }
    return {
        write(info) {
            let output;
            if (Processors[info.methodName] !== undefined) {
                output = Processors[info.methodName](info);
            }
            else if (Processors[info.objName] !== undefined) {
                output = Processors[info.objName](info);
            }
            else {
                return;
            }
            Reporter.write(10000, `${'-'.repeat(info.depth)}${info.objName}.${info.methodName}(${output})`);
        }
    };
}
function stringifyLifecycleFlags(flags) {
    const flagNames = [];
    if (flags & 2097152 /* mustEvaluate */) {
        flagNames.push('mustEvaluate');
    }
    if (flags & 16777216 /* isCollectionMutation */) {
        flagNames.push('isCollectionMutation');
    }
    if (flags & 16 /* updateTargetInstance */) {
        flagNames.push('updateTargetInstance');
    }
    if (flags & 32 /* updateSourceExpression */) {
        flagNames.push('updateSourceExpression');
    }
    if (flags & 64 /* fromAsyncFlush */) {
        flagNames.push('fromAsyncFlush');
    }
    if (flags & 128 /* fromSyncFlush */) {
        flagNames.push('fromSyncFlush');
    }
    if (flags & 256 /* fromTick */) {
        flagNames.push('fromTick');
    }
    if (flags & 1024 /* fromStartTask */) {
        flagNames.push('fromStartTask');
    }
    if (flags & 2048 /* fromStopTask */) {
        flagNames.push('fromStopTask');
    }
    if (flags & 4096 /* fromBind */) {
        flagNames.push('fromBind');
    }
    if (flags & 8192 /* fromUnbind */) {
        flagNames.push('fromUnbind');
    }
    if (flags & 16384 /* fromAttach */) {
        flagNames.push('fromAttach');
    }
    if (flags & 32768 /* fromDetach */) {
        flagNames.push('fromDetach');
    }
    if (flags & 65536 /* fromCache */) {
        flagNames.push('fromCache');
    }
    if (flags & 131072 /* fromDOMEvent */) {
        flagNames.push('fromDOMEvent');
    }
    if (flags & 262144 /* fromLifecycleTask */) {
        flagNames.push('fromLifecycleTask');
    }
    if (flags & 4194304 /* isTraversingParentScope */) {
        flagNames.push('isTraversingParentScope');
    }
    if (flags & 67108864 /* allowParentScopeTraversal */) {
        flagNames.push('allowParentScopeTraversal');
    }
    if (flags & 1 /* getterSetterStrategy */) {
        flagNames.push('getterSetterStrategy');
    }
    if (flags & 2 /* proxyStrategy */) {
        flagNames.push('proxyStrategy');
    }
    if (flags & 1073741824 /* secondaryExpression */) {
        flagNames.push('secondaryExpression');
    }
    if (flagNames.length === 0) {
        return 'none';
    }
    return flagNames.join('|');
}

const DebugConfiguration = {
    register(container) {
        Reporter$1.write(2);
        Object.assign(Reporter, Reporter$1);
        enableImprovedExpressionDebugging();
    }
};
const TraceConfiguration = {
    register(container) {
        Object.assign(Tracer, DebugTracer);
    }
};

class AttrSyntax {
    constructor(rawName, rawValue, target, command) {
        this.rawName = rawName;
        this.rawValue = rawValue;
        this.target = target;
        this.command = command;
    }
}

/** @internal */
class CharSpec {
    constructor(chars, repeat, isSymbol, isInverted) {
        this.chars = chars;
        this.repeat = repeat;
        this.isSymbol = isSymbol;
        this.isInverted = isInverted;
        if (isInverted) {
            switch (chars.length) {
                case 0:
                    this.has = this.hasOfNoneInverse;
                    break;
                case 1:
                    this.has = this.hasOfSingleInverse;
                    break;
                default:
                    this.has = this.hasOfMultipleInverse;
            }
        }
        else {
            switch (chars.length) {
                case 0:
                    this.has = this.hasOfNone;
                    break;
                case 1:
                    this.has = this.hasOfSingle;
                    break;
                default:
                    this.has = this.hasOfMultiple;
            }
        }
    }
    equals(other) {
        return this.chars === other.chars
            && this.repeat === other.repeat
            && this.isSymbol === other.isSymbol
            && this.isInverted === other.isInverted;
    }
    hasOfMultiple(char) {
        return this.chars.includes(char);
    }
    hasOfSingle(char) {
        return this.chars === char;
    }
    hasOfNone(char) {
        return false;
    }
    hasOfMultipleInverse(char) {
        return !this.chars.includes(char);
    }
    hasOfSingleInverse(char) {
        return this.chars !== char;
    }
    hasOfNoneInverse(char) {
        return true;
    }
}
class Interpretation {
    constructor() {
        this.parts = PLATFORM.emptyArray;
        this._pattern = '';
        this.currentRecord = {};
        this.partsRecord = {};
    }
    get pattern() {
        const value = this._pattern;
        if (value === '') {
            return null;
        }
        else {
            return value;
        }
    }
    set pattern(value) {
        if (value == null) {
            this._pattern = '';
            this.parts = PLATFORM.emptyArray;
        }
        else {
            this._pattern = value;
            this.parts = this.partsRecord[value];
        }
    }
    append(pattern, ch) {
        const { currentRecord } = this;
        if (currentRecord[pattern] === undefined) {
            currentRecord[pattern] = ch;
        }
        else {
            currentRecord[pattern] += ch;
        }
    }
    next(pattern) {
        const { currentRecord } = this;
        if (currentRecord[pattern] !== undefined) {
            const { partsRecord } = this;
            if (partsRecord[pattern] === undefined) {
                partsRecord[pattern] = [currentRecord[pattern]];
            }
            else {
                partsRecord[pattern].push(currentRecord[pattern]);
            }
            currentRecord[pattern] = undefined;
        }
    }
}
/** @internal */
class State$1 {
    constructor(charSpec, ...patterns) {
        this.charSpec = charSpec;
        this.nextStates = [];
        this.types = null;
        this.isEndpoint = false;
        this.patterns = patterns;
    }
    get pattern() {
        return this.isEndpoint ? this.patterns[0] : null;
    }
    findChild(charSpec) {
        const nextStates = this.nextStates;
        const len = nextStates.length;
        let child = null;
        for (let i = 0; i < len; ++i) {
            child = nextStates[i];
            if (charSpec.equals(child.charSpec)) {
                return child;
            }
        }
        return null;
    }
    append(charSpec, pattern) {
        const { patterns } = this;
        if (!patterns.includes(pattern)) {
            patterns.push(pattern);
        }
        let state = this.findChild(charSpec);
        if (state == null) {
            state = new State$1(charSpec, pattern);
            this.nextStates.push(state);
            if (charSpec.repeat) {
                state.nextStates.push(state);
            }
        }
        return state;
    }
    findMatches(ch, interpretation) {
        // TODO: reuse preallocated arrays
        const results = [];
        const nextStates = this.nextStates;
        const len = nextStates.length;
        let childLen = 0;
        let child = null;
        let i = 0;
        let j = 0;
        for (; i < len; ++i) {
            child = nextStates[i];
            if (child.charSpec.has(ch)) {
                results.push(child);
                childLen = child.patterns.length;
                j = 0;
                if (child.charSpec.isSymbol) {
                    for (; j < childLen; ++j) {
                        interpretation.next(child.patterns[j]);
                    }
                }
                else {
                    for (; j < childLen; ++j) {
                        interpretation.append(child.patterns[j], ch);
                    }
                }
            }
        }
        return results;
    }
}
/** @internal */
class StaticSegment {
    constructor(text) {
        this.text = text;
        this.text = text;
        const len = this.len = text.length;
        const specs = this.specs = [];
        for (let i = 0; i < len; ++i) {
            specs.push(new CharSpec(text[i], false, false, false));
        }
    }
    eachChar(callback) {
        const { len, specs } = this;
        for (let i = 0; i < len; ++i) {
            callback(specs[i]);
        }
    }
}
/** @internal */
class DynamicSegment {
    constructor(symbols) {
        this.text = 'PART';
        this.spec = new CharSpec(symbols, true, false, true);
    }
    eachChar(callback) {
        callback(this.spec);
    }
}
/** @internal */
class SymbolSegment {
    constructor(text) {
        this.text = text;
        this.spec = new CharSpec(text, false, true, false);
    }
    eachChar(callback) {
        callback(this.spec);
    }
}
/** @internal */
class SegmentTypes {
    constructor() {
        this.statics = 0;
        this.dynamics = 0;
        this.symbols = 0;
    }
}
const ISyntaxInterpreter = DI.createInterface('ISyntaxInterpreter').withDefault(x => x.singleton(SyntaxInterpreter));
/** @internal */
class SyntaxInterpreter {
    constructor() {
        this.rootState = new State$1(null);
        this.initialStates = [this.rootState];
    }
    add(defOrDefs) {
        let i = 0;
        if (Array.isArray(defOrDefs)) {
            const ii = defOrDefs.length;
            for (; i < ii; ++i) {
                this.add(defOrDefs[i]);
            }
            return;
        }
        let currentState = this.rootState;
        const def = defOrDefs;
        const pattern = def.pattern;
        const types = new SegmentTypes();
        const segments = this.parse(def, types);
        const len = segments.length;
        const callback = (ch) => {
            currentState = currentState.append(ch, pattern);
        };
        for (i = 0; i < len; ++i) {
            segments[i].eachChar(callback);
        }
        currentState.types = types;
        currentState.isEndpoint = true;
    }
    interpret(name) {
        const interpretation = new Interpretation();
        let states = this.initialStates;
        const len = name.length;
        for (let i = 0; i < len; ++i) {
            states = this.getNextStates(states, name.charAt(i), interpretation);
            if (states.length === 0) {
                break;
            }
        }
        states.sort((a, b) => {
            if (a.isEndpoint) {
                if (!b.isEndpoint) {
                    return -1;
                }
            }
            else if (b.isEndpoint) {
                return 1;
            }
            else {
                return 0;
            }
            const aTypes = a.types;
            const bTypes = b.types;
            if (aTypes.statics !== bTypes.statics) {
                return bTypes.statics - aTypes.statics;
            }
            if (aTypes.dynamics !== bTypes.dynamics) {
                return bTypes.dynamics - aTypes.dynamics;
            }
            if (aTypes.symbols !== bTypes.symbols) {
                return bTypes.symbols - aTypes.symbols;
            }
            return 0;
        });
        if (states.length > 0) {
            const state = states[0];
            if (!state.charSpec.isSymbol) {
                interpretation.next(state.pattern);
            }
            interpretation.pattern = state.pattern;
        }
        return interpretation;
    }
    getNextStates(states, ch, interpretation) {
        // TODO: reuse preallocated arrays
        const nextStates = [];
        let state = null;
        const len = states.length;
        for (let i = 0; i < len; ++i) {
            state = states[i];
            nextStates.push(...state.findMatches(ch, interpretation));
        }
        return nextStates;
    }
    parse(def, types) {
        const result = [];
        const pattern = def.pattern;
        const len = pattern.length;
        let i = 0;
        let start = 0;
        let c = '';
        while (i < len) {
            c = pattern.charAt(i);
            if (!def.symbols.includes(c)) {
                if (i === start) {
                    if (c === 'P' && pattern.slice(i, i + 4) === 'PART') {
                        start = i = (i + 4);
                        result.push(new DynamicSegment(def.symbols));
                        ++types.dynamics;
                    }
                    else {
                        ++i;
                    }
                }
                else {
                    ++i;
                }
            }
            else if (i !== start) {
                result.push(new StaticSegment(pattern.slice(start, i)));
                ++types.statics;
                start = i;
            }
            else {
                result.push(new SymbolSegment(pattern.slice(start, i + 1)));
                ++types.symbols;
                start = ++i;
            }
        }
        if (start !== i) {
            result.push(new StaticSegment(pattern.slice(start, i)));
            ++types.statics;
        }
        return result;
    }
}
function validatePrototype(handler, patternDefs) {
    for (const def of patternDefs) {
        // note: we're intentionally not throwing here
        if (!(def.pattern in handler)) {
            Reporter.write(401, def.pattern); // TODO: organize error codes
        }
        else if (typeof handler[def.pattern] !== 'function') {
            Reporter.write(402, def.pattern); // TODO: organize error codes
        }
    }
}
const IAttributePattern = DI.createInterface('IAttributePattern').noDefault();
function attributePattern(...patternDefs) {
    return function decorator(target) {
        return AttributePattern.define(patternDefs, target);
    };
}
class AttributePatternResourceDefinition {
    constructor(Type) {
        this.Type = Type;
        this.name = (void 0);
    }
    register(container) {
        Registration.singleton(IAttributePattern, this.Type).register(container);
    }
}
const AttributePattern = Object.freeze({
    name: Protocol.resource.keyFor('attribute-pattern'),
    definitionAnnotationKey: 'attribute-pattern-definitions',
    define(patternDefs, Type) {
        validatePrototype(Type.prototype, patternDefs);
        const definition = new AttributePatternResourceDefinition(Type);
        const { name, definitionAnnotationKey } = AttributePattern;
        Metadata.define(name, definition, Type);
        Protocol.resource.appendTo(Type, name);
        Protocol.annotation.set(Type, definitionAnnotationKey, patternDefs);
        Protocol.annotation.appendTo(Type, definitionAnnotationKey);
        return Type;
    },
    getPatternDefinitions(Type) {
        return Protocol.annotation.get(Type, AttributePattern.definitionAnnotationKey);
    }
});

var __decorate$w = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$w = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$e = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const IAttributeParser = DI.createInterface('IAttributeParser').withDefault(x => x.singleton(AttributeParser));
/** @internal */
let AttributeParser = class AttributeParser {
    constructor(interpreter, attrPatterns) {
        this.interpreter = interpreter;
        this.cache = {};
        this.interpreter = interpreter;
        const patterns = this.patterns = {};
        attrPatterns.forEach(attrPattern => {
            const defs = AttributePattern.getPatternDefinitions(attrPattern.constructor);
            interpreter.add(defs);
            defs.forEach(def => {
                patterns[def.pattern] = attrPattern;
            });
        });
    }
    parse(name, value) {
        let interpretation = this.cache[name];
        if (interpretation == null) {
            interpretation = this.cache[name] = this.interpreter.interpret(name);
        }
        const pattern = interpretation.pattern;
        if (pattern == null) {
            return new AttrSyntax(name, value, name, null);
        }
        else {
            return this.patterns[pattern][pattern](name, value, interpretation.parts);
        }
    }
};
AttributeParser = __decorate$w([
    __param$e(0, ISyntaxInterpreter),
    __param$e(1, all(IAttributePattern)),
    __metadata$w("design:paramtypes", [Object, Array])
], AttributeParser);

var __decorate$x = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
let DotSeparatedAttributePattern = class DotSeparatedAttributePattern {
    ['PART.PART'](rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], parts[1]);
    }
    ['PART.PART.PART'](rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], parts[2]);
    }
};
DotSeparatedAttributePattern = __decorate$x([
    attributePattern({ pattern: 'PART.PART', symbols: '.' }, { pattern: 'PART.PART.PART', symbols: '.' })
], DotSeparatedAttributePattern);
let RefAttributePattern = class RefAttributePattern {
    ['ref'](rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, 'element', 'ref');
    }
    ['PART.ref'](rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], 'ref');
    }
};
RefAttributePattern = __decorate$x([
    attributePattern({ pattern: 'ref', symbols: '' }, { pattern: 'PART.ref', symbols: '.' })
], RefAttributePattern);
let ColonPrefixedBindAttributePattern = class ColonPrefixedBindAttributePattern {
    [':PART'](rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], 'bind');
    }
};
ColonPrefixedBindAttributePattern = __decorate$x([
    attributePattern({ pattern: ':PART', symbols: ':' })
], ColonPrefixedBindAttributePattern);
let AtPrefixedTriggerAttributePattern = class AtPrefixedTriggerAttributePattern {
    ['@PART'](rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], 'trigger');
    }
};
AtPrefixedTriggerAttributePattern = __decorate$x([
    attributePattern({ pattern: '@PART', symbols: '@' })
], AtPrefixedTriggerAttributePattern);

function bindingCommand(nameOrDefinition) {
    return function (target) {
        return BindingCommand.define(nameOrDefinition, target);
    };
}
class BindingCommandDefinition {
    constructor(Type, name, aliases, key, type) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.type = type;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        return new BindingCommandDefinition(Type, firstDefined(BindingCommand.getAnnotation(Type, 'name'), name), mergeArrays(BindingCommand.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), BindingCommand.keyFrom(name), firstDefined(BindingCommand.getAnnotation(Type, 'type'), def.type, Type.type, null));
    }
    register(container) {
        const { Type, key, aliases } = this;
        Registration.singleton(key, Type).register(container);
        Registration.aliasTo(key, Type).register(container);
        registerAliases(aliases, BindingCommand, key, container);
    }
}
const BindingCommand = {
    name: Protocol.resource.keyFor('binding-command'),
    keyFrom(name) {
        return `${BindingCommand.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && Metadata.hasOwn(BindingCommand.name, value);
    },
    define(nameOrDef, Type) {
        const definition = BindingCommandDefinition.create(nameOrDef, Type);
        Metadata.define(BindingCommand.name, definition, definition.Type);
        Metadata.define(BindingCommand.name, definition, definition);
        Protocol.resource.appendTo(Type, BindingCommand.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = Metadata.getOwn(BindingCommand.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        Metadata.define(Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return Metadata.getOwn(Protocol.annotation.keyFor(prop), Type);
    },
};
function getTarget$1(binding, makeCamelCase) {
    if (binding.flags & 256 /* isBinding */) {
        return binding.bindable.propName;
    }
    else if (makeCamelCase) {
        return camelCase(binding.syntax.target);
    }
    else {
        return binding.syntax.target;
    }
}

var SymbolFlags;
(function (SymbolFlags) {
    SymbolFlags[SymbolFlags["type"] = 511] = "type";
    SymbolFlags[SymbolFlags["isTemplateController"] = 1] = "isTemplateController";
    SymbolFlags[SymbolFlags["isReplacePart"] = 2] = "isReplacePart";
    SymbolFlags[SymbolFlags["isCustomAttribute"] = 4] = "isCustomAttribute";
    SymbolFlags[SymbolFlags["isPlainAttribute"] = 8] = "isPlainAttribute";
    SymbolFlags[SymbolFlags["isCustomElement"] = 16] = "isCustomElement";
    SymbolFlags[SymbolFlags["isLetElement"] = 32] = "isLetElement";
    SymbolFlags[SymbolFlags["isPlainElement"] = 64] = "isPlainElement";
    SymbolFlags[SymbolFlags["isText"] = 128] = "isText";
    SymbolFlags[SymbolFlags["isBinding"] = 256] = "isBinding";
    SymbolFlags[SymbolFlags["hasMarker"] = 512] = "hasMarker";
    SymbolFlags[SymbolFlags["hasTemplate"] = 1024] = "hasTemplate";
    SymbolFlags[SymbolFlags["hasAttributes"] = 2048] = "hasAttributes";
    SymbolFlags[SymbolFlags["hasBindings"] = 4096] = "hasBindings";
    SymbolFlags[SymbolFlags["hasChildNodes"] = 8192] = "hasChildNodes";
    SymbolFlags[SymbolFlags["hasParts"] = 16384] = "hasParts";
})(SymbolFlags || (SymbolFlags = {}));
function createMarker(dom) {
    const marker = dom.createElement('au-m');
    dom.makeTarget(marker);
    return marker;
}
/**
 * A html attribute that is associated with a registered resource, specifically a template controller.
 */
class TemplateControllerSymbol {
    constructor(dom, syntax, info, partName, res = info.name) {
        this.syntax = syntax;
        this.info = info;
        this.res = res;
        this.flags = 1 /* isTemplateController */ | 512 /* hasMarker */;
        this.physicalNode = null;
        this.template = null;
        this.templateController = null;
        this._bindings = null;
        this._parts = null;
        this.partName = info.name === 'replaceable' ? partName : null;
        this.marker = createMarker(dom);
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 4096 /* hasBindings */;
        }
        return this._bindings;
    }
    get parts() {
        if (this._parts === null) {
            this._parts = [];
            this.flags |= 16384 /* hasParts */;
        }
        return this._parts;
    }
}
/**
 * Wrapper for an element (with all of its attributes, regardless of the order in which they are declared)
 * that has a replace attribute on it.
 *
 * This element will be lifted from the DOM just like a template controller.
 */
class ReplacePartSymbol {
    constructor(name, physicalNode = null, parent = null, template = null) {
        this.name = name;
        this.physicalNode = physicalNode;
        this.parent = parent;
        this.template = template;
        this.flags = 2 /* isReplacePart */;
    }
}
/**
 * A html attribute that is associated with a registered resource, but not a template controller.
 */
class CustomAttributeSymbol {
    constructor(syntax, info, res = info.name) {
        this.syntax = syntax;
        this.info = info;
        this.res = res;
        this.flags = 4 /* isCustomAttribute */;
        this._bindings = null;
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 4096 /* hasBindings */;
        }
        return this._bindings;
    }
}
/**
 * An attribute, with either a binding command or an interpolation, whose target is the html
 * attribute of the element.
 *
 * This will never target a bindable property of a custom attribute or element;
 */
class PlainAttributeSymbol {
    constructor(syntax, command, expression) {
        this.syntax = syntax;
        this.command = command;
        this.expression = expression;
        this.flags = 8 /* isPlainAttribute */;
    }
}
/**
 * Either an attribute on an custom element that maps to a declared bindable property of that element,
 * a single-value bound custom attribute, or one of several bindables that were extracted from the attribute
 * value of a custom attribute with multiple bindings usage.
 *
 * This will always target a bindable property of a custom attribute or element;
 */
class BindingSymbol {
    constructor(command, bindable, expression, rawValue, target) {
        this.command = command;
        this.bindable = bindable;
        this.expression = expression;
        this.rawValue = rawValue;
        this.target = target;
        this.flags = 256 /* isBinding */;
    }
}
/**
 * A html element that is associated with a registered resource either via its (lowerCase) `nodeName`
 * or the value of its `as-element` attribute.
 */
class CustomElementSymbol {
    constructor(dom, physicalNode, info, res = info.name, bindables = info.bindables) {
        this.physicalNode = physicalNode;
        this.info = info;
        this.res = res;
        this.bindables = bindables;
        this.flags = 16 /* isCustomElement */;
        this.isTarget = true;
        this.templateController = null;
        this._customAttributes = null;
        this._plainAttributes = null;
        this._bindings = null;
        this._childNodes = null;
        this._parts = null;
        if (info.containerless) {
            this.isContainerless = true;
            this.marker = createMarker(dom);
            this.flags |= 512 /* hasMarker */;
        }
        else {
            this.isContainerless = false;
            this.marker = null;
        }
    }
    get customAttributes() {
        if (this._customAttributes === null) {
            this._customAttributes = [];
            this.flags |= 2048 /* hasAttributes */;
        }
        return this._customAttributes;
    }
    get plainAttributes() {
        if (this._plainAttributes === null) {
            this._plainAttributes = [];
            this.flags |= 2048 /* hasAttributes */;
        }
        return this._plainAttributes;
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 4096 /* hasBindings */;
        }
        return this._bindings;
    }
    get childNodes() {
        if (this._childNodes === null) {
            this._childNodes = [];
            this.flags |= 8192 /* hasChildNodes */;
        }
        return this._childNodes;
    }
    get parts() {
        if (this._parts === null) {
            this._parts = [];
            this.flags |= 16384 /* hasParts */;
        }
        return this._parts;
    }
}
class LetElementSymbol {
    constructor(dom, physicalNode, marker = createMarker(dom)) {
        this.physicalNode = physicalNode;
        this.marker = marker;
        this.flags = 32 /* isLetElement */ | 512 /* hasMarker */;
        this.toBindingContext = false;
        this._bindings = null;
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 4096 /* hasBindings */;
        }
        return this._bindings;
    }
}
/**
 * A normal html element that may or may not have attribute behaviors and/or child node behaviors.
 *
 * It is possible for a PlainElementSymbol to not yield any instructions during compilation.
 */
class PlainElementSymbol {
    constructor(dom, physicalNode) {
        this.physicalNode = physicalNode;
        this.flags = 64 /* isPlainElement */;
        this.isTarget = false;
        this.templateController = null;
        this.hasSlots = false;
        this._customAttributes = null;
        this._plainAttributes = null;
        this._childNodes = null;
    }
    get customAttributes() {
        if (this._customAttributes === null) {
            this._customAttributes = [];
            this.flags |= 2048 /* hasAttributes */;
        }
        return this._customAttributes;
    }
    get plainAttributes() {
        if (this._plainAttributes === null) {
            this._plainAttributes = [];
            this.flags |= 2048 /* hasAttributes */;
        }
        return this._plainAttributes;
    }
    get childNodes() {
        if (this._childNodes === null) {
            this._childNodes = [];
            this.flags |= 8192 /* hasChildNodes */;
        }
        return this._childNodes;
    }
}
/**
 * A standalone text node that has an interpolation.
 */
class TextSymbol {
    constructor(dom, physicalNode, interpolation, marker = createMarker(dom)) {
        this.physicalNode = physicalNode;
        this.interpolation = interpolation;
        this.marker = marker;
        this.flags = 128 /* isText */ | 512 /* hasMarker */;
    }
}

var __decorate$y = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
let OneTimeBindingCommand = class OneTimeBindingCommand {
    constructor() {
        this.bindingType = 49 /* OneTimeCommand */;
    }
    compile(binding) {
        return new OneTimeBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
OneTimeBindingCommand = __decorate$y([
    bindingCommand('one-time')
], OneTimeBindingCommand);
let ToViewBindingCommand = class ToViewBindingCommand {
    constructor() {
        this.bindingType = 50 /* ToViewCommand */;
    }
    compile(binding) {
        return new ToViewBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
ToViewBindingCommand = __decorate$y([
    bindingCommand('to-view')
], ToViewBindingCommand);
let FromViewBindingCommand = class FromViewBindingCommand {
    constructor() {
        this.bindingType = 51 /* FromViewCommand */;
    }
    compile(binding) {
        return new FromViewBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
FromViewBindingCommand = __decorate$y([
    bindingCommand('from-view')
], FromViewBindingCommand);
let TwoWayBindingCommand = class TwoWayBindingCommand {
    constructor() {
        this.bindingType = 52 /* TwoWayCommand */;
    }
    compile(binding) {
        return new TwoWayBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
TwoWayBindingCommand = __decorate$y([
    bindingCommand('two-way')
], TwoWayBindingCommand);
let DefaultBindingCommand = class DefaultBindingCommand {
    constructor() {
        this.bindingType = 53 /* BindCommand */;
    }
    compile(binding) {
        let mode = BindingMode.default;
        if (binding instanceof BindingSymbol) {
            mode = binding.bindable.mode;
        }
        else {
            const command = binding.syntax.command;
            switch (command) {
                case 'bind':
                case 'to-view':
                    mode = BindingMode.toView;
                    break;
                case 'one-time':
                    mode = BindingMode.oneTime;
                    break;
                case 'from-view':
                    mode = BindingMode.fromView;
                    break;
                case 'two-way':
                    mode = BindingMode.twoWay;
                    break;
            }
        }
        switch (mode) {
            case BindingMode.default:
            case BindingMode.toView:
                return ToViewBindingCommand.prototype.compile(binding);
            case BindingMode.oneTime:
                return OneTimeBindingCommand.prototype.compile(binding);
            case BindingMode.fromView:
                return FromViewBindingCommand.prototype.compile(binding);
            case BindingMode.twoWay:
                return TwoWayBindingCommand.prototype.compile(binding);
        }
    }
};
DefaultBindingCommand = __decorate$y([
    bindingCommand('bind')
], DefaultBindingCommand);
let CallBindingCommand = class CallBindingCommand {
    constructor() {
        this.bindingType = 153 /* CallCommand */;
    }
    compile(binding) {
        return new CallBindingInstruction(binding.expression, getTarget$1(binding, true));
    }
};
CallBindingCommand = __decorate$y([
    bindingCommand('call')
], CallBindingCommand);
let ForBindingCommand = class ForBindingCommand {
    constructor() {
        this.bindingType = 539 /* ForCommand */;
    }
    compile(binding) {
        return new IteratorBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
ForBindingCommand = __decorate$y([
    bindingCommand('for')
], ForBindingCommand);

function unescapeCode(code) {
    switch (code) {
        case 98 /* LowerB */: return 8 /* Backspace */;
        case 116 /* LowerT */: return 9 /* Tab */;
        case 110 /* LowerN */: return 10 /* LineFeed */;
        case 118 /* LowerV */: return 11 /* VerticalTab */;
        case 102 /* LowerF */: return 12 /* FormFeed */;
        case 114 /* LowerR */: return 13 /* CarriageReturn */;
        case 34 /* DoubleQuote */: return 34 /* DoubleQuote */;
        case 39 /* SingleQuote */: return 39 /* SingleQuote */;
        case 92 /* Backslash */: return 92 /* Backslash */;
        default: return code;
    }
}
var Access;
(function (Access) {
    Access[Access["Reset"] = 0] = "Reset";
    Access[Access["Ancestor"] = 511] = "Ancestor";
    Access[Access["This"] = 512] = "This";
    Access[Access["Scope"] = 1024] = "Scope";
    Access[Access["Member"] = 2048] = "Member";
    Access[Access["Keyed"] = 4096] = "Keyed";
})(Access || (Access = {}));
var Precedence;
(function (Precedence) {
    Precedence[Precedence["Variadic"] = 61] = "Variadic";
    Precedence[Precedence["Assign"] = 62] = "Assign";
    Precedence[Precedence["Conditional"] = 63] = "Conditional";
    Precedence[Precedence["LogicalOR"] = 64] = "LogicalOR";
    Precedence[Precedence["LogicalAND"] = 128] = "LogicalAND";
    Precedence[Precedence["Equality"] = 192] = "Equality";
    Precedence[Precedence["Relational"] = 256] = "Relational";
    Precedence[Precedence["Additive"] = 320] = "Additive";
    Precedence[Precedence["Multiplicative"] = 384] = "Multiplicative";
    Precedence[Precedence["Binary"] = 448] = "Binary";
    Precedence[Precedence["LeftHandSide"] = 449] = "LeftHandSide";
    Precedence[Precedence["Primary"] = 450] = "Primary";
    Precedence[Precedence["Unary"] = 451] = "Unary";
})(Precedence || (Precedence = {}));
/** @internal */
var Token;
(function (Token) {
    Token[Token["EOF"] = 1572864] = "EOF";
    Token[Token["ExpressionTerminal"] = 1048576] = "ExpressionTerminal";
    Token[Token["AccessScopeTerminal"] = 524288] = "AccessScopeTerminal";
    Token[Token["ClosingToken"] = 262144] = "ClosingToken";
    Token[Token["OpeningToken"] = 131072] = "OpeningToken";
    Token[Token["BinaryOp"] = 65536] = "BinaryOp";
    Token[Token["UnaryOp"] = 32768] = "UnaryOp";
    Token[Token["LeftHandSide"] = 16384] = "LeftHandSide";
    Token[Token["StringOrNumericLiteral"] = 12288] = "StringOrNumericLiteral";
    Token[Token["NumericLiteral"] = 8192] = "NumericLiteral";
    Token[Token["StringLiteral"] = 4096] = "StringLiteral";
    Token[Token["IdentifierName"] = 3072] = "IdentifierName";
    Token[Token["Keyword"] = 2048] = "Keyword";
    Token[Token["Identifier"] = 1024] = "Identifier";
    Token[Token["Contextual"] = 512] = "Contextual";
    Token[Token["Precedence"] = 448] = "Precedence";
    Token[Token["Type"] = 63] = "Type";
    Token[Token["FalseKeyword"] = 2048] = "FalseKeyword";
    Token[Token["TrueKeyword"] = 2049] = "TrueKeyword";
    Token[Token["NullKeyword"] = 2050] = "NullKeyword";
    Token[Token["UndefinedKeyword"] = 2051] = "UndefinedKeyword";
    Token[Token["ThisScope"] = 3076] = "ThisScope";
    Token[Token["ParentScope"] = 3077] = "ParentScope";
    Token[Token["OpenParen"] = 671750] = "OpenParen";
    Token[Token["OpenBrace"] = 131079] = "OpenBrace";
    Token[Token["Dot"] = 16392] = "Dot";
    Token[Token["CloseBrace"] = 1835017] = "CloseBrace";
    Token[Token["CloseParen"] = 1835018] = "CloseParen";
    Token[Token["Comma"] = 1572875] = "Comma";
    Token[Token["OpenBracket"] = 671756] = "OpenBracket";
    Token[Token["CloseBracket"] = 1835021] = "CloseBracket";
    Token[Token["Colon"] = 1572878] = "Colon";
    Token[Token["Question"] = 1572879] = "Question";
    Token[Token["Ampersand"] = 1572880] = "Ampersand";
    Token[Token["Bar"] = 1572883] = "Bar";
    Token[Token["BarBar"] = 1638548] = "BarBar";
    Token[Token["AmpersandAmpersand"] = 1638613] = "AmpersandAmpersand";
    Token[Token["EqualsEquals"] = 1638678] = "EqualsEquals";
    Token[Token["ExclamationEquals"] = 1638679] = "ExclamationEquals";
    Token[Token["EqualsEqualsEquals"] = 1638680] = "EqualsEqualsEquals";
    Token[Token["ExclamationEqualsEquals"] = 1638681] = "ExclamationEqualsEquals";
    Token[Token["LessThan"] = 1638746] = "LessThan";
    Token[Token["GreaterThan"] = 1638747] = "GreaterThan";
    Token[Token["LessThanEquals"] = 1638748] = "LessThanEquals";
    Token[Token["GreaterThanEquals"] = 1638749] = "GreaterThanEquals";
    Token[Token["InKeyword"] = 1640798] = "InKeyword";
    Token[Token["InstanceOfKeyword"] = 1640799] = "InstanceOfKeyword";
    Token[Token["Plus"] = 623008] = "Plus";
    Token[Token["Minus"] = 623009] = "Minus";
    Token[Token["TypeofKeyword"] = 34850] = "TypeofKeyword";
    Token[Token["VoidKeyword"] = 34851] = "VoidKeyword";
    Token[Token["Asterisk"] = 1638884] = "Asterisk";
    Token[Token["Percent"] = 1638885] = "Percent";
    Token[Token["Slash"] = 1638886] = "Slash";
    Token[Token["Equals"] = 1048615] = "Equals";
    Token[Token["Exclamation"] = 32808] = "Exclamation";
    Token[Token["TemplateTail"] = 540713] = "TemplateTail";
    Token[Token["TemplateContinuation"] = 540714] = "TemplateContinuation";
    Token[Token["OfKeyword"] = 1051179] = "OfKeyword";
})(Token || (Token = {}));
var Char;
(function (Char) {
    Char[Char["Null"] = 0] = "Null";
    Char[Char["Backspace"] = 8] = "Backspace";
    Char[Char["Tab"] = 9] = "Tab";
    Char[Char["LineFeed"] = 10] = "LineFeed";
    Char[Char["VerticalTab"] = 11] = "VerticalTab";
    Char[Char["FormFeed"] = 12] = "FormFeed";
    Char[Char["CarriageReturn"] = 13] = "CarriageReturn";
    Char[Char["Space"] = 32] = "Space";
    Char[Char["Exclamation"] = 33] = "Exclamation";
    Char[Char["DoubleQuote"] = 34] = "DoubleQuote";
    Char[Char["Dollar"] = 36] = "Dollar";
    Char[Char["Percent"] = 37] = "Percent";
    Char[Char["Ampersand"] = 38] = "Ampersand";
    Char[Char["SingleQuote"] = 39] = "SingleQuote";
    Char[Char["OpenParen"] = 40] = "OpenParen";
    Char[Char["CloseParen"] = 41] = "CloseParen";
    Char[Char["Asterisk"] = 42] = "Asterisk";
    Char[Char["Plus"] = 43] = "Plus";
    Char[Char["Comma"] = 44] = "Comma";
    Char[Char["Minus"] = 45] = "Minus";
    Char[Char["Dot"] = 46] = "Dot";
    Char[Char["Slash"] = 47] = "Slash";
    Char[Char["Semicolon"] = 59] = "Semicolon";
    Char[Char["Backtick"] = 96] = "Backtick";
    Char[Char["OpenBracket"] = 91] = "OpenBracket";
    Char[Char["Backslash"] = 92] = "Backslash";
    Char[Char["CloseBracket"] = 93] = "CloseBracket";
    Char[Char["Caret"] = 94] = "Caret";
    Char[Char["Underscore"] = 95] = "Underscore";
    Char[Char["OpenBrace"] = 123] = "OpenBrace";
    Char[Char["Bar"] = 124] = "Bar";
    Char[Char["CloseBrace"] = 125] = "CloseBrace";
    Char[Char["Colon"] = 58] = "Colon";
    Char[Char["LessThan"] = 60] = "LessThan";
    Char[Char["Equals"] = 61] = "Equals";
    Char[Char["GreaterThan"] = 62] = "GreaterThan";
    Char[Char["Question"] = 63] = "Question";
    Char[Char["Zero"] = 48] = "Zero";
    Char[Char["One"] = 49] = "One";
    Char[Char["Two"] = 50] = "Two";
    Char[Char["Three"] = 51] = "Three";
    Char[Char["Four"] = 52] = "Four";
    Char[Char["Five"] = 53] = "Five";
    Char[Char["Six"] = 54] = "Six";
    Char[Char["Seven"] = 55] = "Seven";
    Char[Char["Eight"] = 56] = "Eight";
    Char[Char["Nine"] = 57] = "Nine";
    Char[Char["UpperA"] = 65] = "UpperA";
    Char[Char["UpperB"] = 66] = "UpperB";
    Char[Char["UpperC"] = 67] = "UpperC";
    Char[Char["UpperD"] = 68] = "UpperD";
    Char[Char["UpperE"] = 69] = "UpperE";
    Char[Char["UpperF"] = 70] = "UpperF";
    Char[Char["UpperG"] = 71] = "UpperG";
    Char[Char["UpperH"] = 72] = "UpperH";
    Char[Char["UpperI"] = 73] = "UpperI";
    Char[Char["UpperJ"] = 74] = "UpperJ";
    Char[Char["UpperK"] = 75] = "UpperK";
    Char[Char["UpperL"] = 76] = "UpperL";
    Char[Char["UpperM"] = 77] = "UpperM";
    Char[Char["UpperN"] = 78] = "UpperN";
    Char[Char["UpperO"] = 79] = "UpperO";
    Char[Char["UpperP"] = 80] = "UpperP";
    Char[Char["UpperQ"] = 81] = "UpperQ";
    Char[Char["UpperR"] = 82] = "UpperR";
    Char[Char["UpperS"] = 83] = "UpperS";
    Char[Char["UpperT"] = 84] = "UpperT";
    Char[Char["UpperU"] = 85] = "UpperU";
    Char[Char["UpperV"] = 86] = "UpperV";
    Char[Char["UpperW"] = 87] = "UpperW";
    Char[Char["UpperX"] = 88] = "UpperX";
    Char[Char["UpperY"] = 89] = "UpperY";
    Char[Char["UpperZ"] = 90] = "UpperZ";
    Char[Char["LowerA"] = 97] = "LowerA";
    Char[Char["LowerB"] = 98] = "LowerB";
    Char[Char["LowerC"] = 99] = "LowerC";
    Char[Char["LowerD"] = 100] = "LowerD";
    Char[Char["LowerE"] = 101] = "LowerE";
    Char[Char["LowerF"] = 102] = "LowerF";
    Char[Char["LowerG"] = 103] = "LowerG";
    Char[Char["LowerH"] = 104] = "LowerH";
    Char[Char["LowerI"] = 105] = "LowerI";
    Char[Char["LowerJ"] = 106] = "LowerJ";
    Char[Char["LowerK"] = 107] = "LowerK";
    Char[Char["LowerL"] = 108] = "LowerL";
    Char[Char["LowerM"] = 109] = "LowerM";
    Char[Char["LowerN"] = 110] = "LowerN";
    Char[Char["LowerO"] = 111] = "LowerO";
    Char[Char["LowerP"] = 112] = "LowerP";
    Char[Char["LowerQ"] = 113] = "LowerQ";
    Char[Char["LowerR"] = 114] = "LowerR";
    Char[Char["LowerS"] = 115] = "LowerS";
    Char[Char["LowerT"] = 116] = "LowerT";
    Char[Char["LowerU"] = 117] = "LowerU";
    Char[Char["LowerV"] = 118] = "LowerV";
    Char[Char["LowerW"] = 119] = "LowerW";
    Char[Char["LowerX"] = 120] = "LowerX";
    Char[Char["LowerY"] = 121] = "LowerY";
    Char[Char["LowerZ"] = 122] = "LowerZ";
})(Char || (Char = {}));

const $false = PrimitiveLiteralExpression.$false;
const $true = PrimitiveLiteralExpression.$true;
const $null = PrimitiveLiteralExpression.$null;
const $undefined = PrimitiveLiteralExpression.$undefined;
const $this = AccessThisExpression.$this;
const $parent = AccessThisExpression.$parent;
/** @internal */
class ParserState {
    constructor(input) {
        this.input = input;
        this.index = 0;
        this.startIndex = 0;
        this.lastIndex = 0;
        this.currentToken = 1572864 /* EOF */;
        this.tokenValue = '';
        this.assignable = true;
        this.length = input.length;
        this.currentChar = input.charCodeAt(0);
    }
    get tokenRaw() {
        return this.input.slice(this.startIndex, this.index);
    }
}
const $state = new ParserState('');
var SyntaxError;
(function (SyntaxError) {
    SyntaxError[SyntaxError["InvalidExpressionStart"] = 100] = "InvalidExpressionStart";
    SyntaxError[SyntaxError["UnconsumedToken"] = 101] = "UnconsumedToken";
    SyntaxError[SyntaxError["DoubleDot"] = 102] = "DoubleDot";
    SyntaxError[SyntaxError["InvalidMemberExpression"] = 103] = "InvalidMemberExpression";
    SyntaxError[SyntaxError["UnexpectedEndOfExpression"] = 104] = "UnexpectedEndOfExpression";
    SyntaxError[SyntaxError["ExpectedIdentifier"] = 105] = "ExpectedIdentifier";
    SyntaxError[SyntaxError["InvalidForDeclaration"] = 106] = "InvalidForDeclaration";
    SyntaxError[SyntaxError["InvalidObjectLiteralPropertyDefinition"] = 107] = "InvalidObjectLiteralPropertyDefinition";
    SyntaxError[SyntaxError["UnterminatedQuote"] = 108] = "UnterminatedQuote";
    SyntaxError[SyntaxError["UnterminatedTemplate"] = 109] = "UnterminatedTemplate";
    SyntaxError[SyntaxError["MissingExpectedToken"] = 110] = "MissingExpectedToken";
    SyntaxError[SyntaxError["UnexpectedCharacter"] = 111] = "UnexpectedCharacter";
    SyntaxError[SyntaxError["MissingValueConverter"] = 112] = "MissingValueConverter";
    SyntaxError[SyntaxError["MissingBindingBehavior"] = 113] = "MissingBindingBehavior";
})(SyntaxError || (SyntaxError = {}));
var SemanticError;
(function (SemanticError) {
    SemanticError[SemanticError["NotAssignable"] = 150] = "NotAssignable";
    SemanticError[SemanticError["UnexpectedForOf"] = 151] = "UnexpectedForOf";
})(SemanticError || (SemanticError = {}));
function parseExpression(input, bindingType) {
    $state.input = input;
    $state.length = input.length;
    $state.index = 0;
    $state.currentChar = input.charCodeAt(0);
    return parse($state, 0 /* Reset */, 61 /* Variadic */, bindingType === void 0 ? 53 /* BindCommand */ : bindingType);
}
/** @internal */
// JUSTIFICATION: This is performance-critical code which follows a subset of the well-known ES spec.
// Knowing the spec, or parsers in general, will help with understanding this code and it is therefore not the
// single source of information for being able to figure it out.
// It generally does not need to change unless the spec changes or spec violations are found, or optimization
// opportunities are found (which would likely not fix these warnings in any case).
// It's therefore not considered to have any tangible impact on the maintainability of the code base.
// For reference, most of the parsing logic is based on: https://tc39.github.io/ecma262/#sec-ecmascript-language-expressions
// eslint-disable-next-line max-lines-per-function
function parse(state, access, minPrecedence, bindingType) {
    if (bindingType === 284 /* CustomCommand */) {
        return new CustomExpression(state.input);
    }
    if (state.index === 0) {
        if (bindingType & 2048 /* Interpolation */) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return parseInterpolation(state);
        }
        nextToken(state);
        if (state.currentToken & 1048576 /* ExpressionTerminal */) {
            throw Reporter.error(100 /* InvalidExpressionStart */, { state });
        }
    }
    state.assignable = 448 /* Binary */ > minPrecedence;
    let result = void 0;
    if (state.currentToken & 32768 /* UnaryOp */) {
        /** parseUnaryExpression
         * https://tc39.github.io/ecma262/#sec-unary-operators
         *
         * UnaryExpression :
         * 1. LeftHandSideExpression
         * 2. void UnaryExpression
         * 3. typeof UnaryExpression
         * 4. + UnaryExpression
         * 5. - UnaryExpression
         * 6. ! UnaryExpression
         *
         * IsValidAssignmentTarget
         * 2,3,4,5,6 = false
         * 1 = see parseLeftHandSideExpression
         *
         * Note: technically we should throw on ++ / -- / +++ / ---, but there's nothing to gain from that
         */
        const op = TokenValues[state.currentToken & 63 /* Type */];
        nextToken(state);
        result = new UnaryExpression(op, parse(state, access, 449 /* LeftHandSide */, bindingType));
        state.assignable = false;
    }
    else {
        /** parsePrimaryExpression
         * https://tc39.github.io/ecma262/#sec-primary-expression
         *
         * PrimaryExpression :
         * 1. this
         * 2. IdentifierName
         * 3. Literal
         * 4. ArrayLiteralExpression
         * 5. ObjectLiteralExpression
         * 6. TemplateLiteral
         * 7. ParenthesizedExpression
         *
         * Literal :
         * NullLiteral
         * BooleanLiteral
         * NumericLiteral
         * StringLiteral
         *
         * ParenthesizedExpression :
         * ( AssignmentExpression )
         *
         * IsValidAssignmentTarget
         * 1,3,4,5,6,7 = false
         * 2 = true
         */
        primary: switch (state.currentToken) {
            case 3077 /* ParentScope */: // $parent
                state.assignable = false;
                do {
                    nextToken(state);
                    access++; // ancestor
                    if (consumeOpt(state, 16392 /* Dot */)) {
                        if (state.currentToken === 16392 /* Dot */) {
                            throw Reporter.error(102 /* DoubleDot */, { state });
                        }
                        else if (state.currentToken === 1572864 /* EOF */) {
                            throw Reporter.error(105 /* ExpectedIdentifier */, { state });
                        }
                    }
                    else if (state.currentToken & 524288 /* AccessScopeTerminal */) {
                        const ancestor = access & 511 /* Ancestor */;
                        result = ancestor === 0 ? $this : ancestor === 1 ? $parent : new AccessThisExpression(ancestor);
                        access = 512 /* This */;
                        break primary;
                    }
                    else {
                        throw Reporter.error(103 /* InvalidMemberExpression */, { state });
                    }
                } while (state.currentToken === 3077 /* ParentScope */);
            // falls through
            case 1024 /* Identifier */: // identifier
                if (bindingType & 512 /* IsIterator */) {
                    result = new BindingIdentifier(state.tokenValue);
                }
                else {
                    result = new AccessScopeExpression(state.tokenValue, access & 511 /* Ancestor */);
                    access = 1024 /* Scope */;
                }
                state.assignable = true;
                nextToken(state);
                break;
            case 3076 /* ThisScope */: // $this
                state.assignable = false;
                nextToken(state);
                result = $this;
                access = 512 /* This */;
                break;
            case 671750 /* OpenParen */: // parenthesized expression
                nextToken(state);
                result = parse(state, 0 /* Reset */, 62 /* Assign */, bindingType);
                consume(state, 1835018 /* CloseParen */);
                access = 0 /* Reset */;
                break;
            case 671756 /* OpenBracket */:
                result = parseArrayLiteralExpression(state, access, bindingType);
                access = 0 /* Reset */;
                break;
            case 131079 /* OpenBrace */:
                result = parseObjectLiteralExpression(state, bindingType);
                access = 0 /* Reset */;
                break;
            case 540713 /* TemplateTail */:
                result = new TemplateExpression([state.tokenValue]);
                state.assignable = false;
                nextToken(state);
                access = 0 /* Reset */;
                break;
            case 540714 /* TemplateContinuation */:
                result = parseTemplate(state, access, bindingType, result, false);
                access = 0 /* Reset */;
                break;
            case 4096 /* StringLiteral */:
            case 8192 /* NumericLiteral */:
                result = new PrimitiveLiteralExpression(state.tokenValue);
                state.assignable = false;
                nextToken(state);
                access = 0 /* Reset */;
                break;
            case 2050 /* NullKeyword */:
            case 2051 /* UndefinedKeyword */:
            case 2049 /* TrueKeyword */:
            case 2048 /* FalseKeyword */:
                result = TokenValues[state.currentToken & 63 /* Type */];
                state.assignable = false;
                nextToken(state);
                access = 0 /* Reset */;
                break;
            default:
                if (state.index >= state.length) {
                    throw Reporter.error(104 /* UnexpectedEndOfExpression */, { state });
                }
                else {
                    throw Reporter.error(101 /* UnconsumedToken */, { state });
                }
        }
        if (bindingType & 512 /* IsIterator */) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return parseForOfStatement(state, result);
        }
        if (449 /* LeftHandSide */ < minPrecedence) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return result;
        }
        /** parseMemberExpression (Token.Dot, Token.OpenBracket, Token.TemplateContinuation)
         * MemberExpression :
         * 1. PrimaryExpression
         * 2. MemberExpression [ AssignmentExpression ]
         * 3. MemberExpression . IdentifierName
         * 4. MemberExpression TemplateLiteral
         *
         * IsValidAssignmentTarget
         * 1,4 = false
         * 2,3 = true
         *
         *
         * parseCallExpression (Token.OpenParen)
         * CallExpression :
         * 1. MemberExpression Arguments
         * 2. CallExpression Arguments
         * 3. CallExpression [ AssignmentExpression ]
         * 4. CallExpression . IdentifierName
         * 5. CallExpression TemplateLiteral
         *
         * IsValidAssignmentTarget
         * 1,2,5 = false
         * 3,4 = true
         */
        let name = state.tokenValue;
        while ((state.currentToken & 16384 /* LeftHandSide */) > 0) {
            const args = [];
            let strings;
            switch (state.currentToken) {
                case 16392 /* Dot */:
                    state.assignable = true;
                    nextToken(state);
                    if ((state.currentToken & 3072 /* IdentifierName */) === 0) {
                        throw Reporter.error(105 /* ExpectedIdentifier */, { state });
                    }
                    name = state.tokenValue;
                    nextToken(state);
                    // Change $This to $Scope, change $Scope to $Member, keep $Member as-is, change $Keyed to $Member, disregard other flags
                    access = ((access & (512 /* This */ | 1024 /* Scope */)) << 1) | (access & 2048 /* Member */) | ((access & 4096 /* Keyed */) >> 1);
                    if (state.currentToken === 671750 /* OpenParen */) {
                        if (access === 0 /* Reset */) { // if the left hand side is a literal, make sure we parse a CallMemberExpression
                            access = 2048 /* Member */;
                        }
                        continue;
                    }
                    if (access & 1024 /* Scope */) {
                        result = new AccessScopeExpression(name, result.ancestor);
                    }
                    else { // if it's not $Scope, it's $Member
                        result = new AccessMemberExpression(result, name);
                    }
                    continue;
                case 671756 /* OpenBracket */:
                    state.assignable = true;
                    nextToken(state);
                    access = 4096 /* Keyed */;
                    result = new AccessKeyedExpression(result, parse(state, 0 /* Reset */, 62 /* Assign */, bindingType));
                    consume(state, 1835021 /* CloseBracket */);
                    break;
                case 671750 /* OpenParen */:
                    state.assignable = false;
                    nextToken(state);
                    while (state.currentToken !== 1835018 /* CloseParen */) {
                        args.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType));
                        if (!consumeOpt(state, 1572875 /* Comma */)) {
                            break;
                        }
                    }
                    consume(state, 1835018 /* CloseParen */);
                    if (access & 1024 /* Scope */) {
                        result = new CallScopeExpression(name, args, result.ancestor);
                    }
                    else if (access & 2048 /* Member */) {
                        result = new CallMemberExpression(result, name, args);
                    }
                    else {
                        result = new CallFunctionExpression(result, args);
                    }
                    access = 0;
                    break;
                case 540713 /* TemplateTail */:
                    state.assignable = false;
                    strings = [state.tokenValue];
                    result = new TaggedTemplateExpression(strings, strings, result);
                    nextToken(state);
                    break;
                case 540714 /* TemplateContinuation */:
                    result = parseTemplate(state, access, bindingType, result, true);
            }
        }
    }
    if (448 /* Binary */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /** parseBinaryExpression
     * https://tc39.github.io/ecma262/#sec-multiplicative-operators
     *
     * MultiplicativeExpression : (local precedence 6)
     * UnaryExpression
     * MultiplicativeExpression * / % UnaryExpression
     *
     * AdditiveExpression : (local precedence 5)
     * MultiplicativeExpression
     * AdditiveExpression + - MultiplicativeExpression
     *
     * RelationalExpression : (local precedence 4)
     * AdditiveExpression
     * RelationalExpression < > <= >= instanceof in AdditiveExpression
     *
     * EqualityExpression : (local precedence 3)
     * RelationalExpression
     * EqualityExpression == != === !== RelationalExpression
     *
     * LogicalANDExpression : (local precedence 2)
     * EqualityExpression
     * LogicalANDExpression && EqualityExpression
     *
     * LogicalORExpression : (local precedence 1)
     * LogicalANDExpression
     * LogicalORExpression || LogicalANDExpression
     */
    while ((state.currentToken & 65536 /* BinaryOp */) > 0) {
        const opToken = state.currentToken;
        if ((opToken & 448 /* Precedence */) <= minPrecedence) {
            break;
        }
        nextToken(state);
        result = new BinaryExpression(TokenValues[opToken & 63 /* Type */], result, parse(state, access, opToken & 448 /* Precedence */, bindingType));
        state.assignable = false;
    }
    if (63 /* Conditional */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /**
     * parseConditionalExpression
     * https://tc39.github.io/ecma262/#prod-ConditionalExpression
     *
     * ConditionalExpression :
     * 1. BinaryExpression
     * 2. BinaryExpression ? AssignmentExpression : AssignmentExpression
     *
     * IsValidAssignmentTarget
     * 1,2 = false
     */
    if (consumeOpt(state, 1572879 /* Question */)) {
        const yes = parse(state, access, 62 /* Assign */, bindingType);
        consume(state, 1572878 /* Colon */);
        result = new ConditionalExpression(result, yes, parse(state, access, 62 /* Assign */, bindingType));
        state.assignable = false;
    }
    if (62 /* Assign */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /** parseAssignmentExpression
     * https://tc39.github.io/ecma262/#prod-AssignmentExpression
     * Note: AssignmentExpression here is equivalent to ES Expression because we don't parse the comma operator
     *
     * AssignmentExpression :
     * 1. ConditionalExpression
     * 2. LeftHandSideExpression = AssignmentExpression
     *
     * IsValidAssignmentTarget
     * 1,2 = false
     */
    if (consumeOpt(state, 1048615 /* Equals */)) {
        if (!state.assignable) {
            throw Reporter.error(150 /* NotAssignable */, { state });
        }
        result = new AssignExpression(result, parse(state, access, 62 /* Assign */, bindingType));
    }
    if (61 /* Variadic */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /** parseValueConverter
     */
    while (consumeOpt(state, 1572883 /* Bar */)) {
        if (state.currentToken === 1572864 /* EOF */) {
            throw Reporter.error(112);
        }
        const name = state.tokenValue;
        nextToken(state);
        const args = new Array();
        while (consumeOpt(state, 1572878 /* Colon */)) {
            args.push(parse(state, access, 62 /* Assign */, bindingType));
        }
        result = new ValueConverterExpression(result, name, args);
    }
    /** parseBindingBehavior
     */
    while (consumeOpt(state, 1572880 /* Ampersand */)) {
        if (state.currentToken === 1572864 /* EOF */) {
            throw Reporter.error(113);
        }
        const name = state.tokenValue;
        nextToken(state);
        const args = new Array();
        while (consumeOpt(state, 1572878 /* Colon */)) {
            args.push(parse(state, access, 62 /* Assign */, bindingType));
        }
        result = new BindingBehaviorExpression(result, name, args);
    }
    if (state.currentToken !== 1572864 /* EOF */) {
        if (bindingType & 2048 /* Interpolation */) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return result;
        }
        if (state.tokenRaw === 'of') {
            throw Reporter.error(151 /* UnexpectedForOf */, { state });
        }
        throw Reporter.error(101 /* UnconsumedToken */, { state });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return result;
}
/**
 * parseArrayLiteralExpression
 * https://tc39.github.io/ecma262/#prod-ArrayLiteralExpression
 *
 * ArrayLiteralExpression :
 * [ Elision(opt) ]
 * [ ElementList ]
 * [ ElementList, Elision(opt) ]
 *
 * ElementList :
 * Elision(opt) AssignmentExpression
 * ElementList, Elision(opt) AssignmentExpression
 *
 * Elision :
 * ,
 * Elision ,
 */
function parseArrayLiteralExpression(state, access, bindingType) {
    nextToken(state);
    const elements = new Array();
    while (state.currentToken !== 1835021 /* CloseBracket */) {
        if (consumeOpt(state, 1572875 /* Comma */)) {
            elements.push($undefined);
            if (state.currentToken === 1835021 /* CloseBracket */) {
                break;
            }
        }
        else {
            elements.push(parse(state, access, 62 /* Assign */, bindingType & ~512 /* IsIterator */));
            if (consumeOpt(state, 1572875 /* Comma */)) {
                if (state.currentToken === 1835021 /* CloseBracket */) {
                    break;
                }
            }
            else {
                break;
            }
        }
    }
    consume(state, 1835021 /* CloseBracket */);
    if (bindingType & 512 /* IsIterator */) {
        return new ArrayBindingPattern(elements);
    }
    else {
        state.assignable = false;
        return new ArrayLiteralExpression(elements);
    }
}
function parseForOfStatement(state, result) {
    if ((result.$kind & 65536 /* IsForDeclaration */) === 0) {
        throw Reporter.error(106 /* InvalidForDeclaration */, { state });
    }
    if (state.currentToken !== 1051179 /* OfKeyword */) {
        throw Reporter.error(106 /* InvalidForDeclaration */, { state });
    }
    nextToken(state);
    const declaration = result;
    const statement = parse(state, 0 /* Reset */, 61 /* Variadic */, 0 /* None */);
    return new ForOfStatement(declaration, statement);
}
/**
 * parseObjectLiteralExpression
 * https://tc39.github.io/ecma262/#prod-Literal
 *
 * ObjectLiteralExpression :
 * { }
 * { PropertyDefinitionList }
 *
 * PropertyDefinitionList :
 * PropertyDefinition
 * PropertyDefinitionList, PropertyDefinition
 *
 * PropertyDefinition :
 * IdentifierName
 * PropertyName : AssignmentExpression
 *
 * PropertyName :
 * IdentifierName
 * StringLiteral
 * NumericLiteral
 */
function parseObjectLiteralExpression(state, bindingType) {
    const keys = new Array();
    const values = new Array();
    nextToken(state);
    while (state.currentToken !== 1835017 /* CloseBrace */) {
        keys.push(state.tokenValue);
        // Literal = mandatory colon
        if (state.currentToken & 12288 /* StringOrNumericLiteral */) {
            nextToken(state);
            consume(state, 1572878 /* Colon */);
            values.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType & ~512 /* IsIterator */));
        }
        else if (state.currentToken & 3072 /* IdentifierName */) {
            // IdentifierName = optional colon
            const { currentChar, currentToken, index } = state;
            nextToken(state);
            if (consumeOpt(state, 1572878 /* Colon */)) {
                values.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType & ~512 /* IsIterator */));
            }
            else {
                // Shorthand
                state.currentChar = currentChar;
                state.currentToken = currentToken;
                state.index = index;
                values.push(parse(state, 0 /* Reset */, 450 /* Primary */, bindingType & ~512 /* IsIterator */));
            }
        }
        else {
            throw Reporter.error(107 /* InvalidObjectLiteralPropertyDefinition */, { state });
        }
        if (state.currentToken !== 1835017 /* CloseBrace */) {
            consume(state, 1572875 /* Comma */);
        }
    }
    consume(state, 1835017 /* CloseBrace */);
    if (bindingType & 512 /* IsIterator */) {
        return new ObjectBindingPattern(keys, values);
    }
    else {
        state.assignable = false;
        return new ObjectLiteralExpression(keys, values);
    }
}
function parseInterpolation(state) {
    const parts = [];
    const expressions = [];
    const length = state.length;
    let result = '';
    while (state.index < length) {
        switch (state.currentChar) {
            case 36 /* Dollar */:
                if (state.input.charCodeAt(state.index + 1) === 123 /* OpenBrace */) {
                    parts.push(result);
                    result = '';
                    state.index += 2;
                    state.currentChar = state.input.charCodeAt(state.index);
                    nextToken(state);
                    const expression = parse(state, 0 /* Reset */, 61 /* Variadic */, 2048 /* Interpolation */);
                    expressions.push(expression);
                    continue;
                }
                else {
                    result += '$';
                }
                break;
            case 92 /* Backslash */:
                result += String.fromCharCode(unescapeCode(nextChar(state)));
                break;
            default:
                result += String.fromCharCode(state.currentChar);
        }
        nextChar(state);
    }
    if (expressions.length) {
        parts.push(result);
        return new Interpolation(parts, expressions);
    }
    return null;
}
/**
 * parseTemplateLiteralExpression
 * https://tc39.github.io/ecma262/#prod-Literal
 *
 * TemplateExpression :
 * NoSubstitutionTemplate
 * TemplateHead
 *
 * NoSubstitutionTemplate :
 * ` TemplateCharacters(opt) `
 *
 * TemplateHead :
 * ` TemplateCharacters(opt) ${
 *
 * TemplateSubstitutionTail :
 * TemplateMiddle
 * TemplateTail
 *
 * TemplateMiddle :
 * } TemplateCharacters(opt) ${
 *
 * TemplateTail :
 * } TemplateCharacters(opt) `
 *
 * TemplateCharacters :
 * TemplateCharacter TemplateCharacters(opt)
 *
 * TemplateCharacter :
 * $ [lookahead ≠ {]
 * \ EscapeSequence
 * SourceCharacter (but not one of ` or \ or $)
 */
function parseTemplate(state, access, bindingType, result, tagged) {
    const cooked = [state.tokenValue];
    // TODO: properly implement raw parts / decide whether we want this
    consume(state, 540714 /* TemplateContinuation */);
    const expressions = [parse(state, access, 62 /* Assign */, bindingType)];
    while ((state.currentToken = scanTemplateTail(state)) !== 540713 /* TemplateTail */) {
        cooked.push(state.tokenValue);
        consume(state, 540714 /* TemplateContinuation */);
        expressions.push(parse(state, access, 62 /* Assign */, bindingType));
    }
    cooked.push(state.tokenValue);
    state.assignable = false;
    if (tagged) {
        nextToken(state);
        return new TaggedTemplateExpression(cooked, cooked, result, expressions);
    }
    else {
        nextToken(state);
        return new TemplateExpression(cooked, expressions);
    }
}
function nextToken(state) {
    while (state.index < state.length) {
        state.startIndex = state.index;
        if ((state.currentToken = (CharScanners[state.currentChar](state))) != null) { // a null token means the character must be skipped
            return;
        }
    }
    state.currentToken = 1572864 /* EOF */;
}
function nextChar(state) {
    return state.currentChar = state.input.charCodeAt(++state.index);
}
function scanIdentifier(state) {
    // run to the next non-idPart
    while (IdParts[nextChar(state)])
        ;
    const token = KeywordLookup[state.tokenValue = state.tokenRaw];
    return token === undefined ? 1024 /* Identifier */ : token;
}
function scanNumber(state, isFloat) {
    let char = state.currentChar;
    if (isFloat === false) {
        do {
            char = nextChar(state);
        } while (char <= 57 /* Nine */ && char >= 48 /* Zero */);
        if (char !== 46 /* Dot */) {
            state.tokenValue = parseInt(state.tokenRaw, 10);
            return 8192 /* NumericLiteral */;
        }
        // past this point it's always a float
        char = nextChar(state);
        if (state.index >= state.length) {
            // unless the number ends with a dot - that behaves a little different in native ES expressions
            // but in our AST that behavior has no effect because numbers are always stored in variables
            state.tokenValue = parseInt(state.tokenRaw.slice(0, -1), 10);
            return 8192 /* NumericLiteral */;
        }
    }
    if (char <= 57 /* Nine */ && char >= 48 /* Zero */) {
        do {
            char = nextChar(state);
        } while (char <= 57 /* Nine */ && char >= 48 /* Zero */);
    }
    else {
        state.currentChar = state.input.charCodeAt(--state.index);
    }
    state.tokenValue = parseFloat(state.tokenRaw);
    return 8192 /* NumericLiteral */;
}
function scanString(state) {
    const quote = state.currentChar;
    nextChar(state); // Skip initial quote.
    let unescaped = 0;
    const buffer = new Array();
    let marker = state.index;
    while (state.currentChar !== quote) {
        if (state.currentChar === 92 /* Backslash */) {
            buffer.push(state.input.slice(marker, state.index));
            nextChar(state);
            unescaped = unescapeCode(state.currentChar);
            nextChar(state);
            buffer.push(String.fromCharCode(unescaped));
            marker = state.index;
        }
        else if (state.index >= state.length) {
            throw Reporter.error(108 /* UnterminatedQuote */, { state });
        }
        else {
            nextChar(state);
        }
    }
    const last = state.input.slice(marker, state.index);
    nextChar(state); // Skip terminating quote.
    // Compute the unescaped string value.
    buffer.push(last);
    const unescapedStr = buffer.join('');
    state.tokenValue = unescapedStr;
    return 4096 /* StringLiteral */;
}
function scanTemplate(state) {
    let tail = true;
    let result = '';
    while (nextChar(state) !== 96 /* Backtick */) {
        if (state.currentChar === 36 /* Dollar */) {
            if ((state.index + 1) < state.length && state.input.charCodeAt(state.index + 1) === 123 /* OpenBrace */) {
                state.index++;
                tail = false;
                break;
            }
            else {
                result += '$';
            }
        }
        else if (state.currentChar === 92 /* Backslash */) {
            result += String.fromCharCode(unescapeCode(nextChar(state)));
        }
        else {
            if (state.index >= state.length) {
                throw Reporter.error(109 /* UnterminatedTemplate */, { state });
            }
            result += String.fromCharCode(state.currentChar);
        }
    }
    nextChar(state);
    state.tokenValue = result;
    if (tail) {
        return 540713 /* TemplateTail */;
    }
    return 540714 /* TemplateContinuation */;
}
function scanTemplateTail(state) {
    if (state.index >= state.length) {
        throw Reporter.error(109 /* UnterminatedTemplate */, { state });
    }
    state.index--;
    return scanTemplate(state);
}
function consumeOpt(state, token) {
    if (state.currentToken === token) {
        nextToken(state);
        return true;
    }
    return false;
}
function consume(state, token) {
    if (state.currentToken === token) {
        nextToken(state);
    }
    else {
        throw Reporter.error(110 /* MissingExpectedToken */, { state, expected: token });
    }
}
/**
 * Array for mapping tokens to token values. The indices of the values
 * correspond to the token bits 0-38.
 * For this to work properly, the values in the array must be kept in
 * the same order as the token bits.
 * Usage: TokenValues[token & Token.Type]
 */
const TokenValues = [
    $false, $true, $null, $undefined, '$this', '$parent',
    '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\'', '"',
    '&', '|', '||', '&&', '==', '!=', '===', '!==', '<', '>',
    '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!',
    540713 /* TemplateTail */, 540714 /* TemplateContinuation */,
    'of'
];
const KeywordLookup = Object.create(null);
KeywordLookup.true = 2049 /* TrueKeyword */;
KeywordLookup.null = 2050 /* NullKeyword */;
KeywordLookup.false = 2048 /* FalseKeyword */;
KeywordLookup.undefined = 2051 /* UndefinedKeyword */;
KeywordLookup.$this = 3076 /* ThisScope */;
KeywordLookup.$parent = 3077 /* ParentScope */;
KeywordLookup.in = 1640798 /* InKeyword */;
KeywordLookup.instanceof = 1640799 /* InstanceOfKeyword */;
KeywordLookup.typeof = 34850 /* TypeofKeyword */;
KeywordLookup.void = 34851 /* VoidKeyword */;
KeywordLookup.of = 1051179 /* OfKeyword */;
/**
 * Ranges of code points in pairs of 2 (eg 0x41-0x5B, 0x61-0x7B, ...) where the second value is not inclusive (5-7 means 5 and 6)
 * Single values are denoted by the second value being a 0
 *
 * Copied from output generated with "node build/generate-unicode.js"
 *
 * See also: https://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF
 */
const codes = {
    /* [$0-9A-Za_a-z] */
    AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],
    IdStart: /* IdentifierStart */ [0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],
    Digit: /* DecimalNumber */ [0x30, 0x3A],
    Skip: /* Skippable */ [0, 0x21, 0x7F, 0xA1]
};
/**
 * Decompress the ranges into an array of numbers so that the char code
 * can be used as an index to the lookup
 */
function decompress(lookup, $set, compressed, value) {
    const rangeCount = compressed.length;
    for (let i = 0; i < rangeCount; i += 2) {
        const start = compressed[i];
        let end = compressed[i + 1];
        end = end > 0 ? end : start + 1;
        if (lookup) {
            lookup.fill(value, start, end);
        }
        if ($set) {
            for (let ch = start; ch < end; ch++) {
                $set.add(ch);
            }
        }
    }
}
// CharFuncLookup functions
function returnToken(token) {
    return s => {
        nextChar(s);
        return token;
    };
}
const unexpectedCharacter = s => {
    throw Reporter.error(111 /* UnexpectedCharacter */, { state: s });
};
unexpectedCharacter.notMapped = true;
// ASCII IdentifierPart lookup
const AsciiIdParts = new Set();
decompress(null, AsciiIdParts, codes.AsciiIdPart, true);
// IdentifierPart lookup
const IdParts = new Uint8Array(0xFFFF);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
decompress(IdParts, null, codes.IdStart, 1);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
decompress(IdParts, null, codes.Digit, 1);
// Character scanning function lookup
const CharScanners = new Array(0xFFFF);
CharScanners.fill(unexpectedCharacter, 0, 0xFFFF);
decompress(CharScanners, null, codes.Skip, s => {
    nextChar(s);
    return null;
});
decompress(CharScanners, null, codes.IdStart, scanIdentifier);
decompress(CharScanners, null, codes.Digit, s => scanNumber(s, false));
CharScanners[34 /* DoubleQuote */] =
    CharScanners[39 /* SingleQuote */] = s => {
        return scanString(s);
    };
CharScanners[96 /* Backtick */] = s => {
    return scanTemplate(s);
};
// !, !=, !==
CharScanners[33 /* Exclamation */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 32808 /* Exclamation */;
    }
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638679 /* ExclamationEquals */;
    }
    nextChar(s);
    return 1638681 /* ExclamationEqualsEquals */;
};
// =, ==, ===
CharScanners[61 /* Equals */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 1048615 /* Equals */;
    }
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638678 /* EqualsEquals */;
    }
    nextChar(s);
    return 1638680 /* EqualsEqualsEquals */;
};
// &, &&
CharScanners[38 /* Ampersand */] = s => {
    if (nextChar(s) !== 38 /* Ampersand */) {
        return 1572880 /* Ampersand */;
    }
    nextChar(s);
    return 1638613 /* AmpersandAmpersand */;
};
// |, ||
CharScanners[124 /* Bar */] = s => {
    if (nextChar(s) !== 124 /* Bar */) {
        return 1572883 /* Bar */;
    }
    nextChar(s);
    return 1638548 /* BarBar */;
};
// .
CharScanners[46 /* Dot */] = s => {
    if (nextChar(s) <= 57 /* Nine */ && s.currentChar >= 48 /* Zero */) {
        return scanNumber(s, true);
    }
    return 16392 /* Dot */;
};
// <, <=
CharScanners[60 /* LessThan */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638746 /* LessThan */;
    }
    nextChar(s);
    return 1638748 /* LessThanEquals */;
};
// >, >=
CharScanners[62 /* GreaterThan */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638747 /* GreaterThan */;
    }
    nextChar(s);
    return 1638749 /* GreaterThanEquals */;
};
CharScanners[37 /* Percent */] = returnToken(1638885 /* Percent */);
CharScanners[40 /* OpenParen */] = returnToken(671750 /* OpenParen */);
CharScanners[41 /* CloseParen */] = returnToken(1835018 /* CloseParen */);
CharScanners[42 /* Asterisk */] = returnToken(1638884 /* Asterisk */);
CharScanners[43 /* Plus */] = returnToken(623008 /* Plus */);
CharScanners[44 /* Comma */] = returnToken(1572875 /* Comma */);
CharScanners[45 /* Minus */] = returnToken(623009 /* Minus */);
CharScanners[47 /* Slash */] = returnToken(1638886 /* Slash */);
CharScanners[58 /* Colon */] = returnToken(1572878 /* Colon */);
CharScanners[63 /* Question */] = returnToken(1572879 /* Question */);
CharScanners[91 /* OpenBracket */] = returnToken(671756 /* OpenBracket */);
CharScanners[93 /* CloseBracket */] = returnToken(1835021 /* CloseBracket */);
CharScanners[123 /* OpenBrace */] = returnToken(131079 /* OpenBrace */);
CharScanners[125 /* CloseBrace */] = returnToken(1835017 /* CloseBrace */);

const IExpressionParserRegistration = {
    register(container) {
        container.registerTransformer(IExpressionParser, parser => {
            Reflect.set(parser, 'parseCore', parseExpression);
            return parser;
        });
    }
};
/**
 * Default runtime/environment-agnostic implementations for the following interfaces:
 * - `IExpressionParser`
 */
const DefaultComponents$1 = [
    IExpressionParserRegistration
];
const AtPrefixedTriggerAttributePatternRegistration = AtPrefixedTriggerAttributePattern;
const ColonPrefixedBindAttributePatternRegistration = ColonPrefixedBindAttributePattern;
const RefAttributePatternRegistration = RefAttributePattern;
const DotSeparatedAttributePatternRegistration = DotSeparatedAttributePattern;
/**
 * Default binding syntax for the following attribute name patterns:
 * - `ref`
 * - `target.command` (dot-separated)
 */
const DefaultBindingSyntax = [
    RefAttributePatternRegistration,
    DotSeparatedAttributePatternRegistration
];
/**
 * Binding syntax for short-hand attribute name patterns:
 * - `@target` (short-hand for `target.trigger`)
 * - `:target` (short-hand for `target.bind`)
 */
const ShortHandBindingSyntax = [
    AtPrefixedTriggerAttributePatternRegistration,
    ColonPrefixedBindAttributePatternRegistration
];
const CallBindingCommandRegistration = CallBindingCommand;
const DefaultBindingCommandRegistration = DefaultBindingCommand;
const ForBindingCommandRegistration = ForBindingCommand;
const FromViewBindingCommandRegistration = FromViewBindingCommand;
const OneTimeBindingCommandRegistration = OneTimeBindingCommand;
const ToViewBindingCommandRegistration = ToViewBindingCommand;
const TwoWayBindingCommandRegistration = TwoWayBindingCommand;
/**
 * Default runtime/environment-agnostic binding commands:
 * - Property observation: `.bind`, `.one-time`, `.from-view`, `.to-view`, `.two-way`
 * - Function call: `.call`
 * - Collection observation: `.for`
 */
const DefaultBindingLanguage = [
    DefaultBindingCommandRegistration,
    OneTimeBindingCommandRegistration,
    FromViewBindingCommandRegistration,
    ToViewBindingCommandRegistration,
    TwoWayBindingCommandRegistration,
    CallBindingCommandRegistration,
    ForBindingCommandRegistration
];

/**
 * A pre-processed piece of information about a defined bindable property on a custom
 * element or attribute, optimized for consumption by the template compiler.
 */
class BindableInfo {
    constructor(
    /**
     * The pre-processed *property* (not attribute) name of the bindable, which is
     * (in order of priority):
     *
     * 1. The `property` from the description (if defined)
     * 2. The name of the property of the bindable itself
     */
    propName, 
    /**
     * The pre-processed (default) bindingMode of the bindable, which is (in order of priority):
     *
     * 1. The `mode` from the bindable (if defined and not bindingMode.default)
     * 2. The `defaultBindingMode` (if it's an attribute, defined, and not bindingMode.default)
     * 3. `bindingMode.toView`
     */
    mode) {
        this.propName = propName;
        this.mode = mode;
    }
}
/**
 * Pre-processed information about a custom element resource, optimized
 * for consumption by the template compiler.
 */
class ElementInfo {
    constructor(name, containerless) {
        this.name = name;
        this.containerless = containerless;
        /**
         * A lookup of the bindables of this element, indexed by the (pre-processed)
         * attribute names as they would be found in parsed markup.
         */
        this.bindables = Object.create(null);
    }
    static from(def) {
        const info = new ElementInfo(def.name, def.containerless);
        const bindables = def.bindables;
        const defaultBindingMode = BindingMode.toView;
        let bindable;
        let prop;
        let attr;
        let mode;
        for (prop in bindables) {
            bindable = bindables[prop];
            // explicitly provided property name has priority over the implicit property name
            if (bindable.property !== void 0) {
                prop = bindable.property;
            }
            // explicitly provided attribute name has priority over the derived implicit attribute name
            if (bindable.attribute !== void 0) {
                attr = bindable.attribute;
            }
            else {
                // derive the attribute name from the resolved property name
                attr = kebabCase(prop);
            }
            if (bindable.mode !== void 0 && bindable.mode !== BindingMode.default) {
                mode = bindable.mode;
            }
            else {
                mode = defaultBindingMode;
            }
            info.bindables[attr] = new BindableInfo(prop, mode);
        }
        return info;
    }
}
/**
 * Pre-processed information about a custom attribute resource, optimized
 * for consumption by the template compiler.
 */
class AttrInfo {
    constructor(name, isTemplateController, noMultiBindings) {
        this.name = name;
        this.isTemplateController = isTemplateController;
        this.noMultiBindings = noMultiBindings;
        /**
         * A lookup of the bindables of this attribute, indexed by the (pre-processed)
         * bindable names as they would be found in the attribute value.
         *
         * Only applicable to multi attribute bindings (semicolon-separated).
         */
        this.bindables = Object.create(null);
        /**
         * The single or first bindable of this attribute, or a default 'value'
         * bindable if no bindables were defined on the attribute.
         *
         * Only applicable to single attribute bindings (where the attribute value
         * contains no semicolons)
         */
        this.bindable = null;
    }
    static from(def) {
        const info = new AttrInfo(def.name, def.isTemplateController, def.noMultiBindings);
        const bindables = def.bindables;
        const defaultBindingMode = def.defaultBindingMode !== void 0 && def.defaultBindingMode !== BindingMode.default
            ? def.defaultBindingMode
            : BindingMode.toView;
        let bindable;
        let prop;
        let mode;
        let hasPrimary = false;
        let isPrimary = false;
        let bindableInfo;
        for (prop in bindables) {
            bindable = bindables[prop];
            // explicitly provided property name has priority over the implicit property name
            if (bindable.property !== void 0) {
                prop = bindable.property;
            }
            if (bindable.mode !== void 0 && bindable.mode !== BindingMode.default) {
                mode = bindable.mode;
            }
            else {
                mode = defaultBindingMode;
            }
            isPrimary = bindable.primary === true;
            bindableInfo = info.bindables[prop] = new BindableInfo(prop, mode);
            if (isPrimary) {
                if (hasPrimary) {
                    throw new Error('primary already exists');
                }
                hasPrimary = true;
                info.bindable = bindableInfo;
            }
            // set to first bindable by convention
            if (info.bindable === null) {
                info.bindable = bindableInfo;
            }
        }
        // if no bindables are present, default to "value"
        if (info.bindable === null) {
            info.bindable = new BindableInfo('value', defaultBindingMode);
        }
        return info;
    }
}
const contextLookup = new WeakMap();
/**
 * A pre-processed piece of information about declared custom elements, attributes and
 * binding commands, optimized for consumption by the template compiler.
 */
class ResourceModel {
    constructor(container) {
        this.elementLookup = Object.create(null);
        this.attributeLookup = Object.create(null);
        this.commandLookup = Object.create(null);
        // Note: don't do this sort of thing elsewhere, this is purely for perf reasons
        this.container = container;
        const rootContainer = container.root;
        this.resourceResolvers = container.resourceResolvers;
        this.rootResourceResolvers = rootContainer.resourceResolvers;
    }
    static getOrCreate(context) {
        let model = contextLookup.get(context);
        if (model === void 0) {
            contextLookup.set(context, model = new ResourceModel(context));
        }
        return model;
    }
    /**
     * Retrieve information about a custom element resource.
     *
     * @param element - The original DOM element.
     *
     * @returns The resource information if the element exists, or `null` if it does not exist.
     */
    getElementInfo(name) {
        let result = this.elementLookup[name];
        if (result === void 0) {
            const def = this.find(CustomElement, name);
            this.elementLookup[name] = result = def === null ? null : ElementInfo.from(def);
        }
        return result;
    }
    /**
     * Retrieve information about a custom attribute resource.
     *
     * @param syntax - The parsed `AttrSyntax`
     *
     * @returns The resource information if the attribute exists, or `null` if it does not exist.
     */
    getAttributeInfo(syntax) {
        let result = this.attributeLookup[syntax.target];
        if (result === void 0) {
            const def = this.find(CustomAttribute, syntax.target);
            this.attributeLookup[syntax.target] = result = def === null ? null : AttrInfo.from(def);
        }
        return result;
    }
    /**
     * Retrieve a binding command resource.
     *
     * @param name - The parsed `AttrSyntax`
     *
     * @returns An instance of the command if it exists, or `null` if it does not exist.
     */
    getBindingCommand(syntax, optional) {
        const name = syntax.command;
        if (name === null) {
            return null;
        }
        let result = this.commandLookup[name];
        if (result === void 0) {
            result = this.create(BindingCommand, name);
            if (result === null) {
                if (optional) {
                    return null;
                }
                throw new Error(`Unknown binding command: ${name}`);
            }
            this.commandLookup[name] = result;
        }
        return result;
    }
    find(kind, name) {
        const key = kind.keyFrom(name);
        let resolver = this.resourceResolvers[key];
        if (resolver === void 0) {
            resolver = this.rootResourceResolvers[key];
            if (resolver === void 0) {
                return null;
            }
        }
        if (resolver === null) {
            return null;
        }
        if (typeof resolver.getFactory === 'function') {
            const factory = resolver.getFactory(this.container);
            if (factory === null || factory === void 0) {
                return null;
            }
            const definition = Metadata.getOwn(kind.name, factory.Type);
            if (definition === void 0) {
                // TODO: we may want to log a warning here, or even throw. This would happen if a dependency is registered with a resource-like key
                // but does not actually have a definition associated via the type's metadata. That *should* generally not happen.
                return null;
            }
            return definition;
        }
        return null;
    }
    create(kind, name) {
        const key = kind.keyFrom(name);
        let resolver = this.resourceResolvers[key];
        if (resolver === void 0) {
            resolver = this.rootResourceResolvers[key];
            if (resolver === void 0) {
                return null;
            }
        }
        if (resolver === null) {
            return null;
        }
        const instance = resolver.resolve(this.container, this.container);
        if (instance === void 0) {
            return null;
        }
        return instance;
    }
}

const IAttrSyntaxTransformer = DI
    .createInterface('IAttrSyntaxTransformer')
    .noDefault();

/**
 * Listener binding. Handle event binding between view and view model
 */
class Listener {
    constructor(dom, targetEvent, delegationStrategy, sourceExpression, target, preventDefault, eventManager, locator) {
        this.dom = dom;
        this.targetEvent = targetEvent;
        this.delegationStrategy = delegationStrategy;
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.preventDefault = preventDefault;
        this.eventManager = eventManager;
        this.locator = locator;
        this.interceptor = this;
        this.$state = 0 /* none */;
    }
    callSource(event) {
        const overrideContext = this.$scope.overrideContext;
        overrideContext.$event = event;
        const result = this.sourceExpression.evaluate(2097152 /* mustEvaluate */, this.$scope, this.locator, this.part);
        Reflect.deleteProperty(overrideContext, '$event');
        if (result !== true && this.preventDefault) {
            event.preventDefault();
        }
        return result;
    }
    handleEvent(event) {
        this.interceptor.callSource(event);
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 4096 /* fromBind */);
        }
        // add isBinding flag
        this.$state |= 1 /* isBinding */;
        this.$scope = scope;
        this.part = part;
        const sourceExpression = this.sourceExpression;
        if (hasBind(sourceExpression)) {
            sourceExpression.bind(flags, scope, this.interceptor);
        }
        this.handler = this.eventManager.addEventListener(this.dom, this.target, this.targetEvent, this, this.delegationStrategy);
        // add isBound flag and remove isBinding flag
        this.$state |= 4 /* isBound */;
        this.$state &= ~1 /* isBinding */;
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        // add isUnbinding flag
        this.$state |= 2 /* isUnbinding */;
        const sourceExpression = this.sourceExpression;
        if (hasUnbind(sourceExpression)) {
            sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        this.$scope = null;
        this.handler.dispose();
        this.handler = null;
        // remove isBound and isUnbinding flags
        this.$state &= ~(4 /* isBound */ | 2 /* isUnbinding */);
    }
    observeProperty(flags, obj, propertyName) {
        return;
    }
    handleChange(newValue, previousValue, flags) {
        return;
    }
}

var __decorate$z = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$x = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Observer for handling two-way binding with attributes
 * Has different strategy for class/style and normal attributes
 * TODO: handle SVG/attributes with namespace
 */
let AttributeObserver = class AttributeObserver {
    constructor(scheduler, flags, observerLocator, obj, propertyKey, targetAttribute) {
        this.scheduler = scheduler;
        this.observerLocator = observerLocator;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.targetAttribute = targetAttribute;
        this.currentValue = null;
        this.oldValue = null;
        this.hasChanges = false;
        this.task = null;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue } = this;
            this.oldValue = currentValue;
            switch (this.targetAttribute) {
                case 'class': {
                    // Why is class attribute observer setValue look different with class attribute accessor?
                    // ==============
                    // For class list
                    // newValue is simply checked if truthy or falsy
                    // and toggle the class accordingly
                    // -- the rule of this is quite different to normal attribute
                    //
                    // for class attribute, observer is different in a way that it only observe a particular class at a time
                    // this also comes from syntax, where it would typically be my-class.class="someProperty"
                    //
                    // so there is no need for separating class by space and add all of them like class accessor
                    if (!!currentValue) {
                        this.obj.classList.add(this.propertyKey);
                    }
                    else {
                        this.obj.classList.remove(this.propertyKey);
                    }
                    break;
                }
                case 'style': {
                    let priority = '';
                    let newValue = currentValue;
                    if (typeof newValue === 'string' && newValue.includes('!important')) {
                        priority = 'important';
                        newValue = newValue.replace('!important', '');
                    }
                    this.obj.style.setProperty(this.propertyKey, newValue, priority);
                }
            }
        }
    }
    handleMutation(mutationRecords) {
        let shouldProcess = false;
        for (let i = 0, ii = mutationRecords.length; ii > i; ++i) {
            const record = mutationRecords[i];
            if (record.type === 'attributes' && record.attributeName === this.propertyKey) {
                shouldProcess = true;
                break;
            }
        }
        if (shouldProcess) {
            let newValue;
            switch (this.targetAttribute) {
                case 'class':
                    newValue = this.obj.classList.contains(this.propertyKey);
                    break;
                case 'style':
                    newValue = this.obj.style.getPropertyValue(this.propertyKey);
                    break;
                default:
                    throw new Error(`Unsupported targetAttribute: ${this.targetAttribute}`);
            }
            if (newValue !== this.currentValue) {
                const { currentValue } = this;
                this.currentValue = this.oldValue = newValue;
                this.hasChanges = false;
                this.callSubscribers(newValue, currentValue, 131072 /* fromDOMEvent */);
            }
        }
    }
    subscribe(subscriber) {
        if (!this.hasSubscribers()) {
            this.currentValue = this.oldValue = this.obj.getAttribute(this.propertyKey);
            startObservation(this.obj, this);
        }
        this.addSubscriber(subscriber);
    }
    unsubscribe(subscriber) {
        this.removeSubscriber(subscriber);
        if (!this.hasSubscribers()) {
            stopObservation(this.obj, this);
        }
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
};
AttributeObserver = __decorate$z([
    subscriberCollection(),
    __metadata$x("design:paramtypes", [Object, Number, Object, Object, String, String])
], AttributeObserver);
const startObservation = (element, subscription) => {
    if (element.$eMObservers === undefined) {
        element.$eMObservers = new Set();
    }
    if (element.$mObserver === undefined) {
        element.$mObserver = DOM.createNodeObserver(element, handleMutation, { attributes: true });
    }
    element.$eMObservers.add(subscription);
};
const stopObservation = (element, subscription) => {
    const $eMObservers = element.$eMObservers;
    if ($eMObservers && $eMObservers.delete(subscription)) {
        if ($eMObservers.size === 0) {
            element.$mObserver.disconnect();
            element.$mObserver = undefined;
        }
        return true;
    }
    return false;
};
const handleMutation = (mutationRecords) => {
    mutationRecords[0].target.$eMObservers.forEach(invokeHandleMutation, mutationRecords);
};
function invokeHandleMutation(s) {
    s.handleMutation(this);
}

var __decorate$A = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$y = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// BindingMode is not a const enum (and therefore not inlined), so assigning them to a variable to save a member accessor is a minor perf tweak
const { oneTime: oneTime$2, toView: toView$2, fromView: fromView$1 } = BindingMode;
// pre-combining flags for bitwise checks is a minor perf tweak
const toViewOrOneTime$1 = toView$2 | oneTime$2;
/**
 * Attribute binding. Handle attribute binding betwen view/view model. Understand Html special attributes
 */
let AttributeBinding = class AttributeBinding {
    constructor(sourceExpression, target, 
    // some attributes may have inner structure
    // such as class -> collection of class names
    // such as style -> collection of style rules
    //
    // for normal attributes, targetAttribute and targetProperty are the same and can be ignore
    targetAttribute, targetProperty, mode, observerLocator, locator) {
        this.sourceExpression = sourceExpression;
        this.targetAttribute = targetAttribute;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.interceptor = this;
        this.$state = 0 /* none */;
        this.$scope = null;
        this.persistentFlags = 0 /* none */;
        this.target = target;
        connectable.assignIdTo(this);
        this.$scheduler = locator.get(IScheduler);
    }
    updateTarget(value, flags) {
        flags |= this.persistentFlags;
        this.targetObserver.setValue(value, flags | 16 /* updateTargetInstance */);
    }
    updateSource(value, flags) {
        flags |= this.persistentFlags;
        this.sourceExpression.assign(flags | 32 /* updateSourceExpression */, this.$scope, this.locator, value);
    }
    handleChange(newValue, _previousValue, flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        flags |= this.persistentFlags;
        if (this.mode === BindingMode.fromView) {
            flags &= ~16 /* updateTargetInstance */;
            flags |= 32 /* updateSourceExpression */;
        }
        if (flags & 16 /* updateTargetInstance */) {
            const previousValue = this.targetObserver.getValue();
            // if the only observable is an AccessScope then we can assume the passed-in newValue is the correct and latest value
            if (this.sourceExpression.$kind !== 10082 /* AccessScope */ || this.observerSlots > 1) {
                newValue = this.sourceExpression.evaluate(flags, this.$scope, this.locator, this.part);
            }
            if (newValue !== previousValue) {
                this.interceptor.updateTarget(newValue, flags);
            }
            if ((this.mode & oneTime$2) === 0) {
                this.version++;
                this.sourceExpression.connect(flags, this.$scope, this.interceptor, this.part);
                this.interceptor.unobserve(false);
            }
            return;
        }
        if (flags & 32 /* updateSourceExpression */) {
            if (newValue !== this.sourceExpression.evaluate(flags, this.$scope, this.locator, this.part)) {
                this.interceptor.updateSource(newValue, flags);
            }
            return;
        }
        throw Reporter.error(15, flags);
    }
    $bind(flags, scope, part) {
        if (this.$state & 4 /* isBound */) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 4096 /* fromBind */);
        }
        // add isBinding flag
        this.$state |= 1 /* isBinding */;
        // Store flags which we can only receive during $bind and need to pass on
        // to the AST during evaluate/connect/assign
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        this.$scope = scope;
        this.part = part;
        let sourceExpression = this.sourceExpression;
        if (hasBind(sourceExpression)) {
            sourceExpression.bind(flags, scope, this.interceptor);
        }
        let targetObserver = this.targetObserver;
        if (!targetObserver) {
            targetObserver = this.targetObserver = new AttributeObserver(this.$scheduler, flags, this.observerLocator, this.target, this.targetProperty, this.targetAttribute);
        }
        if (targetObserver.bind) {
            targetObserver.bind(flags);
        }
        // during bind, binding behavior might have changed sourceExpression
        sourceExpression = this.sourceExpression;
        if (this.mode & toViewOrOneTime$1) {
            this.interceptor.updateTarget(sourceExpression.evaluate(flags, scope, this.locator, part), flags);
        }
        if (this.mode & toView$2) {
            sourceExpression.connect(flags, scope, this, part);
        }
        if (this.mode & fromView$1) {
            targetObserver[this.id] |= 32 /* updateSourceExpression */;
            targetObserver.subscribe(this.interceptor);
        }
        // add isBound flag and remove isBinding flag
        this.$state |= 4 /* isBound */;
        this.$state &= ~1 /* isBinding */;
    }
    $unbind(flags) {
        if (!(this.$state & 4 /* isBound */)) {
            return;
        }
        // add isUnbinding flag
        this.$state |= 2 /* isUnbinding */;
        // clear persistent flags
        this.persistentFlags = 0 /* none */;
        if (hasUnbind(this.sourceExpression)) {
            this.sourceExpression.unbind(flags, this.$scope, this.interceptor);
        }
        this.$scope = null;
        if (this.targetObserver.unbind) {
            this.targetObserver.unbind(flags);
        }
        if (this.targetObserver.unsubscribe) {
            this.targetObserver.unsubscribe(this.interceptor);
            this.targetObserver[this.id] &= ~32 /* updateSourceExpression */;
        }
        this.interceptor.unobserve(true);
        // remove isBound and isUnbinding flags
        this.$state &= ~(4 /* isBound */ | 2 /* isUnbinding */);
    }
    connect(flags) {
        if (this.$state & 4 /* isBound */) {
            flags |= this.persistentFlags;
            this.sourceExpression.connect(flags | 2097152 /* mustEvaluate */, this.$scope, this.interceptor, this.part); // why do we have a connect method here in the first place? will this be called after bind?
        }
    }
};
AttributeBinding = __decorate$A([
    connectable(),
    __metadata$y("design:paramtypes", [Object, Object, String, String, Number, Object, Object])
], AttributeBinding);

/**
 * Attribute accessor in a XML document/element that can be accessed via a namespace.
 * Wraps [`getAttributeNS`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS).
 */
class AttributeNSAccessor {
    constructor(scheduler, flags, obj, propertyKey, namespace) {
        this.scheduler = scheduler;
        this.propertyKey = propertyKey;
        this.namespace = namespace;
        this.currentValue = null;
        this.oldValue = null;
        this.hasChanges = false;
        this.task = null;
        this.obj = obj;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue } = this;
            this.oldValue = currentValue;
            if (currentValue == void 0) {
                this.obj.removeAttributeNS(this.namespace, this.propertyKey);
            }
            else {
                this.obj.setAttributeNS(this.namespace, this.propertyKey, currentValue);
            }
        }
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
        this.currentValue = this.oldValue = this.obj.getAttributeNS(this.namespace, this.propertyKey);
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
}

var __decorate$B = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$z = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const toStringTag$3 = Object.prototype.toString;
function defaultMatcher(a, b) {
    return a === b;
}
let CheckedObserver = class CheckedObserver {
    constructor(scheduler, flags, lifecycle, handler, obj) {
        this.scheduler = scheduler;
        this.lifecycle = lifecycle;
        this.handler = handler;
        this.obj = obj;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.hasChanges = false;
        this.task = null;
        this.collectionObserver = void 0;
        this.valueObserver = void 0;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) === 4096 /* fromBind */ || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const currentValue = this.oldValue = this.currentValue;
            if (this.valueObserver === void 0) {
                if (this.obj.$observers !== void 0) {
                    if (this.obj.$observers.model !== void 0) {
                        this.valueObserver = this.obj.$observers.model;
                    }
                    else if (this.obj.$observers.value !== void 0) {
                        this.valueObserver = this.obj.$observers.value;
                    }
                }
                if (this.valueObserver !== void 0) {
                    this.valueObserver.subscribe(this);
                }
            }
            if (this.collectionObserver !== void 0) {
                this.collectionObserver.unsubscribeFromCollection(this);
                this.collectionObserver = void 0;
            }
            if (this.obj.type === 'checkbox') {
                this.collectionObserver = getCollectionObserver(flags, this.lifecycle, currentValue);
                if (this.collectionObserver !== void 0) {
                    this.collectionObserver.subscribeToCollection(this);
                }
            }
            this.synchronizeElement();
        }
    }
    handleCollectionChange(indexMap, flags) {
        const { currentValue, oldValue } = this;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.oldValue = currentValue;
            this.synchronizeElement();
        }
        else {
            this.hasChanges = true;
        }
        if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
        this.callSubscribers(currentValue, oldValue, flags);
    }
    handleChange(newValue, previousValue, flags) {
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.synchronizeElement();
        }
        else {
            this.hasChanges = true;
        }
        if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags));
        }
        this.callSubscribers(newValue, previousValue, flags);
    }
    synchronizeElement() {
        const currentValue = this.currentValue;
        const obj = this.obj;
        const elementValue = Object.prototype.hasOwnProperty.call(obj, 'model') ? obj.model : obj.value;
        const isRadio = obj.type === 'radio';
        const matcher = obj.matcher !== void 0 ? obj.matcher : defaultMatcher;
        if (isRadio) {
            obj.checked = !!matcher(currentValue, elementValue);
        }
        else if (currentValue === true) {
            obj.checked = true;
        }
        else {
            let hasMatch = false;
            switch (toStringTag$3.call(currentValue)) {
                case '[object Array]':
                    hasMatch = currentValue.findIndex(item => !!matcher(item, elementValue)) !== -1;
                    break;
                case '[object Set]':
                    for (const v of currentValue) {
                        if (matcher(v, elementValue)) {
                            hasMatch = true;
                            break;
                        }
                    }
                    break;
                case '[object Map]':
                    for (const pair of currentValue) {
                        const existingItem = pair[0];
                        const $isChecked = pair[1];
                        // a potential complain, when only `true` is supported
                        // but it's consistent with array
                        if (matcher(existingItem, elementValue) && $isChecked === true) {
                            hasMatch = true;
                            break;
                        }
                    }
            }
            obj.checked = hasMatch;
        }
    }
    handleEvent() {
        let currentValue = this.oldValue = this.currentValue;
        const obj = this.obj;
        const elementValue = Object.prototype.hasOwnProperty.call(obj, 'model') ? obj.model : obj.value;
        const isChecked = obj.checked;
        const matcher = obj.matcher !== void 0 ? obj.matcher : defaultMatcher;
        if (obj.type === 'checkbox') {
            const toStringRet = toStringTag$3.call(currentValue);
            if (toStringRet === '[object Array]') {
                // Array binding steps on a change event:
                // 1. find corresponding item INDEX in the Set based on current model/value and matcher
                // 2. is the checkbox checked?
                //    2.1. Yes: is the corresponding item in the Array (index === -1)?
                //        2.1.1 No: push the current model/value to the Array
                //    2.2. No: is the corresponding item in the Array (index !== -1)?
                //        2.2.1: Yes: remove the corresponding item
                // =================================================
                const index = currentValue.findIndex(item => !!matcher(item, elementValue));
                // if the checkbox is checkde, and there's no matching value in the existing array
                // add the checkbox model/value to the array
                if (isChecked && index === -1) {
                    currentValue.push(elementValue);
                }
                else if (!isChecked && index !== -1) {
                    // if the checkbox is not checked, and found a matching item in the array
                    // based on the checkbox model/value
                    // remove the existing item
                    currentValue.splice(index, 1);
                }
                // when existing currentValue is an array,
                // do not invoke callback as only the array obj has changed
                return;
            }
            else if (toStringRet === '[object Set]') {
                // Set binding steps on a change event:
                // 1. find corresponding item in the Set based on current model/value and matcher
                // 2. is the checkbox checked?
                //    2.1. Yes: is the corresponding item in the Set?
                //        2.1.1 No: add the current model/value to the Set
                //    2.2. No: is the corresponding item in the Set?
                //        2.2.1: Yes: remove the corresponding item
                // =================================================
                // 1. find corresponding item
                const unset = {};
                let existingItem = unset;
                for (const value of currentValue) {
                    if (matcher(value, elementValue) === true) {
                        existingItem = value;
                        break;
                    }
                }
                // 2.1. Checkbox is checked, is the corresponding item in the Set?
                //
                // if checkbox is checked and there's no value in the existing Set
                // add the checkbox model/value to the Set
                if (isChecked && existingItem === unset) {
                    // 2.1.1. add the current model/value to the Set
                    currentValue.add(elementValue);
                }
                else if (!isChecked && existingItem !== unset) {
                    // 2.2.1 Checkbox is unchecked, corresponding is in the Set
                    //
                    // if checkbox is not checked, and found a matching item in the Set
                    // based on the checkbox model/value
                    // remove the existing item
                    currentValue.delete(existingItem);
                }
                // when existing value is a Set,
                // do not invoke callback as only the Set has been mutated
                return;
            }
            else if (toStringRet === '[object Map]') {
                // Map binding steps on a change event
                // 1. find corresponding item in the Map based on current model/value and matcher
                // 2. Set the value of the corresponding item in the Map based on checked state of the checkbox
                // =================================================
                // 1. find the corresponding item
                let existingItem;
                for (const pair of currentValue) {
                    const currItem = pair[0];
                    if (matcher(currItem, elementValue) === true) {
                        existingItem = currItem;
                        break;
                    }
                }
                // 2. set the value of the corresponding item in the map
                // if checkbox is checked and there's no value in the existing Map
                // add the checkbox model/value to the Map as key,
                // and value will be checked state of the checkbox
                currentValue.set(existingItem, isChecked);
                // when existing value is a Map,
                // do not invoke callback as only the Map has been mutated
                return;
            }
            currentValue = isChecked;
        }
        else if (isChecked) {
            currentValue = elementValue;
        }
        else {
            // if it's a radio and it has been unchecked
            // do nothing, as the radio that was checked will fire change event and it will be handle there
            // a radio cannot be unchecked by user
            return;
        }
        this.currentValue = currentValue;
        this.callSubscribers(this.currentValue, this.oldValue, 131072 /* fromDOMEvent */ | 524288 /* allowPublishRoundtrip */);
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
        this.currentValue = this.obj.checked;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    unbind(flags) {
        if (this.collectionObserver !== void 0) {
            this.collectionObserver.unsubscribeFromCollection(this);
            this.collectionObserver = void 0;
        }
        if (this.valueObserver !== void 0) {
            this.valueObserver.unsubscribe(this);
        }
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
    subscribe(subscriber) {
        if (!this.hasSubscribers()) {
            this.handler.subscribe(this.obj, this);
        }
        this.addSubscriber(subscriber);
    }
    unsubscribe(subscriber) {
        this.removeSubscriber(subscriber);
        if (!this.hasSubscribers()) {
            this.handler.dispose();
        }
    }
};
CheckedObserver = __decorate$B([
    subscriberCollection(),
    __metadata$z("design:paramtypes", [Object, Number, Object, Object, Object])
], CheckedObserver);

class ClassAttributeAccessor {
    constructor(scheduler, flags, obj) {
        this.scheduler = scheduler;
        this.currentValue = '';
        this.oldValue = '';
        this.doNotCache = true;
        this.nameIndex = {};
        this.version = 0;
        this.hasChanges = false;
        this.isActive = false;
        this.task = null;
        this.obj = obj;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue, nameIndex } = this;
            let { version } = this;
            this.oldValue = currentValue;
            const classesToAdd = getClassesToAdd(currentValue);
            // Get strings split on a space not including empties
            if (classesToAdd.length > 0) {
                this.addClassesAndUpdateIndex(classesToAdd);
            }
            this.version += 1;
            // First call to setValue?  We're done.
            if (version === 0) {
                return;
            }
            // Remove classes from previous version.
            version -= 1;
            for (const name in nameIndex) {
                if (!Object.prototype.hasOwnProperty.call(nameIndex, name) || nameIndex[name] !== version) {
                    continue;
                }
                // TODO: this has the side-effect that classes already present which are added again,
                // will be removed if they're not present in the next update.
                // Better would be do have some configurability for this behavior, allowing the user to
                // decide whether initial classes always need to be kept, always removed, or something in between
                this.obj.classList.remove(name);
            }
        }
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
    addClassesAndUpdateIndex(classes) {
        const node = this.obj;
        for (let i = 0, ii = classes.length; i < ii; i++) {
            const className = classes[i];
            if (className.length === 0) {
                continue;
            }
            this.nameIndex[className] = this.version;
            node.classList.add(className);
        }
    }
}
function getClassesToAdd(object) {
    function splitClassString(classString) {
        const matches = classString.match(/\S+/g);
        if (matches === null) {
            return PLATFORM.emptyArray;
        }
        return matches;
    }
    if (typeof object === 'string') {
        return splitClassString(object);
    }
    if (object instanceof Array) {
        const len = object.length;
        if (len > 0) {
            const classes = [];
            for (let i = 0; i < len; ++i) {
                classes.push(...getClassesToAdd(object[i]));
            }
            return classes;
        }
        else {
            return PLATFORM.emptyArray;
        }
    }
    else if (object instanceof Object) {
        const classes = [];
        for (const property in object) {
            // Let non typical values also evaluate true so disable bool check
            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, no-extra-boolean-cast
            if (Boolean(object[property])) {
                // We must do this in case object property has a space in the name which results in two classes
                if (property.includes(' ')) {
                    classes.push(...splitClassString(property));
                }
                else {
                    classes.push(property);
                }
            }
        }
        return classes;
    }
    return PLATFORM.emptyArray;
}

/**
 * Attribute accessor for HTML elements.
 * Note that Aurelia works with properties, so in all case it will try to assign to property instead of attributes.
 * Unless the property falls into a special set, then it will use attribute for it.
 *
 * @see ElementPropertyAccessor
 */
class DataAttributeAccessor {
    constructor(scheduler, flags, obj, propertyKey) {
        this.scheduler = scheduler;
        this.propertyKey = propertyKey;
        this.currentValue = null;
        this.oldValue = null;
        this.hasChanges = false;
        this.task = null;
        this.obj = obj;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue } = this;
            this.oldValue = currentValue;
            if (currentValue == void 0) {
                this.obj.removeAttribute(this.propertyKey);
            }
            else {
                this.obj.setAttribute(this.propertyKey, currentValue);
            }
        }
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
        this.currentValue = this.oldValue = this.obj.getAttribute(this.propertyKey);
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
}

/**
 * Property accessor for HTML Elements.
 * Note that Aurelia works with properties, so in all case it will try to assign to property instead of attributes.
 * Unless the property falls into a special set, then it will use attribute for it.
 *
 * @see DataAttributeAccessor
 */
class ElementPropertyAccessor {
    constructor(scheduler, flags, obj, propertyKey) {
        this.scheduler = scheduler;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.hasChanges = false;
        this.task = null;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue } = this;
            this.oldValue = currentValue;
            this.obj[this.propertyKey] = currentValue;
        }
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
        this.currentValue = this.oldValue = this.obj[this.propertyKey];
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
}

// Note: path and deepPath are designed to handle v0 and v1 shadow dom specs respectively
/** @internal */
function findOriginalEventTarget(event) {
    return (event.composedPath && event.composedPath()[0]) || (event.deepPath && event.deepPath()[0]) || (event.path && event.path[0]) || event.target;
}
function stopPropagation() {
    this.standardStopPropagation();
    this.propagationStopped = true;
}
function handleCapturedEvent(event) {
    event.propagationStopped = false;
    let target = findOriginalEventTarget(event);
    const orderedCallbacks = [];
    /**
     * During capturing phase, event 'bubbles' down from parent. Needs to reorder callback from root down to target
     */
    while (target) {
        if (target.capturedCallbacks) {
            const callback = target.capturedCallbacks[event.type];
            if (callback) {
                if (event.stopPropagation !== stopPropagation) {
                    event.standardStopPropagation = event.stopPropagation;
                    event.stopPropagation = stopPropagation;
                }
                orderedCallbacks.push(callback);
            }
        }
        target = target.parentNode;
    }
    for (let i = orderedCallbacks.length - 1; i >= 0 && !event.propagationStopped; i--) {
        const orderedCallback = orderedCallbacks[i];
        if ('handleEvent' in orderedCallback) {
            orderedCallback.handleEvent(event);
        }
        else {
            orderedCallback(event);
        }
    }
}
function handleDelegatedEvent(event) {
    event.propagationStopped = false;
    let target = findOriginalEventTarget(event);
    while (target && !event.propagationStopped) {
        if (target.delegatedCallbacks) {
            const callback = target.delegatedCallbacks[event.type];
            if (callback) {
                if (event.stopPropagation !== stopPropagation) {
                    event.standardStopPropagation = event.stopPropagation;
                    event.stopPropagation = stopPropagation;
                }
                if ('handleEvent' in callback) {
                    callback.handleEvent(event);
                }
                else {
                    callback(event);
                }
            }
        }
        target = target.parentNode;
    }
}
class ListenerTracker {
    constructor(dom, eventName, listener, capture) {
        this.dom = dom;
        this.eventName = eventName;
        this.listener = listener;
        this.capture = capture;
        this.count = 0;
    }
    increment() {
        this.count++;
        if (this.count === 1) {
            this.dom.addEventListener(this.eventName, this.listener, null, this.capture);
        }
    }
    decrement() {
        this.count--;
        if (this.count === 0) {
            this.dom.removeEventListener(this.eventName, this.listener, null, this.capture);
        }
    }
    /* @internal */
    dispose() {
        if (this.count > 0) {
            this.count = 0;
            this.dom.removeEventListener(this.eventName, this.listener, null, this.capture);
        }
    }
}
/**
 * Enable dispose() pattern for `delegate` & `capture` commands
 */
class DelegateOrCaptureSubscription {
    constructor(entry, lookup, targetEvent, callback) {
        this.entry = entry;
        this.lookup = lookup;
        this.targetEvent = targetEvent;
        lookup[targetEvent] = callback;
    }
    dispose() {
        this.entry.decrement();
        this.lookup[this.targetEvent] = null;
    }
}
/**
 * Enable dispose() pattern for addEventListener for `trigger`
 */
class TriggerSubscription {
    constructor(dom, target, targetEvent, callback) {
        this.dom = dom;
        this.target = target;
        this.targetEvent = targetEvent;
        this.callback = callback;
        dom.addEventListener(targetEvent, callback, target);
    }
    dispose() {
        this.dom.removeEventListener(this.targetEvent, this.callback, this.target);
    }
}
class EventSubscriber {
    constructor(dom, events) {
        this.dom = dom;
        this.events = events;
        this.target = null;
        this.handler = null;
    }
    subscribe(node, callbackOrListener) {
        this.target = node;
        this.handler = callbackOrListener;
        const add = this.dom.addEventListener;
        const events = this.events;
        for (let i = 0, ii = events.length; ii > i; ++i) {
            add(events[i], callbackOrListener, node);
        }
    }
    dispose() {
        const node = this.target;
        const callbackOrListener = this.handler;
        const events = this.events;
        const dom = this.dom;
        for (let i = 0, ii = events.length; ii > i; ++i) {
            dom.removeEventListener(events[i], callbackOrListener, node);
        }
        this.target = this.handler = null;
    }
}
const IEventManager = DI.createInterface('IEventManager').withDefault(x => x.singleton(EventManager));
/** @internal */
class EventManager {
    constructor() {
        this.delegatedHandlers = {};
        this.capturedHandlers = {};
    }
    addEventListener(dom, target, targetEvent, callbackOrListener, strategy) {
        let delegatedHandlers;
        let capturedHandlers;
        let handlerEntry;
        if (strategy === DelegationStrategy.bubbling) {
            delegatedHandlers = this.delegatedHandlers;
            handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new ListenerTracker(dom, targetEvent, handleDelegatedEvent, false));
            handlerEntry.increment();
            const delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});
            return new DelegateOrCaptureSubscription(handlerEntry, delegatedCallbacks, targetEvent, callbackOrListener);
        }
        if (strategy === DelegationStrategy.capturing) {
            capturedHandlers = this.capturedHandlers;
            handlerEntry = capturedHandlers[targetEvent] || (capturedHandlers[targetEvent] = new ListenerTracker(dom, targetEvent, handleCapturedEvent, true));
            handlerEntry.increment();
            const capturedCallbacks = target.capturedCallbacks || (target.capturedCallbacks = {});
            return new DelegateOrCaptureSubscription(handlerEntry, capturedCallbacks, targetEvent, callbackOrListener);
        }
        return new TriggerSubscription(dom, target, targetEvent, callbackOrListener);
    }
    dispose() {
        let key;
        const { delegatedHandlers, capturedHandlers } = this;
        for (key in delegatedHandlers) {
            delegatedHandlers[key].dispose();
        }
        for (key in capturedHandlers) {
            capturedHandlers[key].dispose();
        }
    }
}

var __decorate$C = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$A = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const childObserverOptions = {
    childList: true,
    subtree: true,
    characterData: true
};
function defaultMatcher$1(a, b) {
    return a === b;
}
let SelectValueObserver = class SelectValueObserver {
    constructor(scheduler, flags, observerLocator, dom, handler, obj) {
        this.scheduler = scheduler;
        this.observerLocator = observerLocator;
        this.dom = dom;
        this.handler = handler;
        this.obj = obj;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.hasChanges = false;
        this.task = null;
        this.arrayObserver = void 0;
        this.nodeObserver = void 0;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue } = this;
            this.oldValue = currentValue;
            const isArray = Array.isArray(currentValue);
            if (!isArray && currentValue != void 0 && this.obj.multiple) {
                throw new Error('Only null or Array instances can be bound to a multi-select.');
            }
            if (this.arrayObserver) {
                this.arrayObserver.unsubscribeFromCollection(this);
                this.arrayObserver = void 0;
            }
            if (isArray) {
                this.arrayObserver = this.observerLocator.getArrayObserver(flags, currentValue);
                this.arrayObserver.subscribeToCollection(this);
            }
            this.synchronizeOptions();
            this.notify(flags);
        }
    }
    handleCollectionChange(indexMap, flags) {
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.synchronizeOptions();
        }
        else {
            this.hasChanges = true;
        }
        if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
        this.callSubscribers(this.currentValue, this.oldValue, flags);
    }
    handleChange(newValue, previousValue, flags) {
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.synchronizeOptions();
        }
        else {
            this.hasChanges = true;
        }
        if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
        this.callSubscribers(newValue, previousValue, flags);
    }
    notify(flags) {
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            return;
        }
        const oldValue = this.oldValue;
        const newValue = this.currentValue;
        if (newValue === oldValue) {
            return;
        }
        this.callSubscribers(newValue, oldValue, flags);
    }
    handleEvent() {
        // "from-view" changes are always synchronous now, so immediately sync the value and notify subscribers
        const shouldNotify = this.synchronizeValue();
        if (shouldNotify) {
            this.callSubscribers(this.currentValue, this.oldValue, 131072 /* fromDOMEvent */ | 524288 /* allowPublishRoundtrip */);
        }
    }
    synchronizeOptions(indexMap) {
        const { currentValue, obj } = this;
        const isArray = Array.isArray(currentValue);
        const matcher = obj.matcher !== void 0 ? obj.matcher : defaultMatcher$1;
        const options = obj.options;
        let i = options.length;
        while (i-- > 0) {
            const option = options[i];
            const optionValue = Object.prototype.hasOwnProperty.call(option, 'model') ? option.model : option.value;
            if (isArray) {
                option.selected = currentValue.findIndex(item => !!matcher(optionValue, item)) !== -1;
                continue;
            }
            option.selected = !!matcher(optionValue, currentValue);
        }
    }
    synchronizeValue() {
        // Spec for synchronizing value from `SelectObserver` to `<select/>`
        // When synchronizing value to observed <select/> element, do the following steps:
        // A. If `<select/>` is multiple
        //    1. Check if current value, called `currentValue` is an array
        //      a. If not an array, return true to signal value has changed
        //      b. If is an array:
        //        i. gather all current selected <option/>, in to array called `values`
        //        ii. loop through the `currentValue` array and remove items that are nolonger selected based on matcher
        //        iii. loop through the `values` array and add items that are selected based on matcher
        //        iv. Return false to signal value hasn't changed
        // B. If the select is single
        //    1. Let `value` equal the first selected option, if no option selected, then `value` is `null`
        //    2. assign `this.currentValue` to `this.oldValue`
        //    3. assign `value` to `this.currentValue`
        //    4. return `true` to signal value has changed
        const obj = this.obj;
        const options = obj.options;
        const len = options.length;
        const currentValue = this.currentValue;
        let i = 0;
        if (obj.multiple) {
            // A.
            if (!Array.isArray(currentValue)) {
                // A.1.a
                return true;
            }
            // A.1.b
            // multi select
            let option;
            const matcher = obj.matcher || defaultMatcher$1;
            // A.1.b.i
            const values = [];
            while (i < len) {
                option = options[i];
                if (option.selected) {
                    values.push(Object.prototype.hasOwnProperty.call(option, 'model')
                        ? option.model
                        : option.value);
                }
                ++i;
            }
            // A.1.b.ii
            i = 0;
            while (i < currentValue.length) {
                const a = currentValue[i];
                // Todo: remove arrow fn
                if (values.findIndex(b => !!matcher(a, b)) === -1) {
                    currentValue.splice(i, 1);
                }
                else {
                    ++i;
                }
            }
            // A.1.b.iii
            i = 0;
            while (i < values.length) {
                const a = values[i];
                // Todo: remove arrow fn
                if (currentValue.findIndex(b => !!matcher(a, b)) === -1) {
                    currentValue.push(a);
                }
                ++i;
            }
            // A.1.b.iv
            return false;
        }
        // B. single select
        // B.1
        let value = null;
        while (i < len) {
            const option = options[i];
            if (option.selected) {
                value = Object.prototype.hasOwnProperty.call(option, 'model')
                    ? option.model
                    : option.value;
                break;
            }
            ++i;
        }
        // B.2
        this.oldValue = this.currentValue;
        // B.3
        this.currentValue = value;
        // B.4
        return true;
    }
    bind(flags) {
        this.nodeObserver = this.dom.createNodeObserver(this.obj, this.handleNodeChange, childObserverOptions);
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
    }
    unbind(flags) {
        this.nodeObserver.disconnect();
        this.nodeObserver = null;
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
        if (this.arrayObserver) {
            this.arrayObserver.unsubscribeFromCollection(this);
            this.arrayObserver = null;
        }
    }
    handleNodeChange() {
        this.synchronizeOptions();
        const shouldNotify = this.synchronizeValue();
        if (shouldNotify) {
            this.notify(131072 /* fromDOMEvent */);
        }
    }
    subscribe(subscriber) {
        if (!this.hasSubscribers()) {
            this.handler.subscribe(this.obj, this);
        }
        this.addSubscriber(subscriber);
    }
    unsubscribe(subscriber) {
        this.removeSubscriber(subscriber);
        if (!this.hasSubscribers()) {
            this.handler.dispose();
        }
    }
};
__decorate$C([
    bound,
    __metadata$A("design:type", Function),
    __metadata$A("design:paramtypes", []),
    __metadata$A("design:returntype", void 0)
], SelectValueObserver.prototype, "handleNodeChange", null);
SelectValueObserver = __decorate$C([
    subscriberCollection(),
    __metadata$A("design:paramtypes", [Object, Number, Object, Object, Object, Object])
], SelectValueObserver);

class StyleAttributeAccessor {
    constructor(scheduler, flags, obj) {
        this.scheduler = scheduler;
        this.currentValue = '';
        this.oldValue = '';
        this.styles = {};
        this.version = 0;
        this.hasChanges = false;
        this.task = null;
        this.obj = obj;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.obj.style.cssText;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    getStyleTuplesFromString(currentValue) {
        const styleTuples = [];
        const rx = /\s*([\w-]+)\s*:\s*((?:(?:[\w-]+\(\s*(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[\w-]+\(\s*(?:[^"](?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^)]*)\),?|[^)]*)\),?|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^;]*),?\s*)+);?/g;
        let pair;
        let name;
        while ((pair = rx.exec(currentValue)) !== null) {
            name = pair[1];
            if (name.length === 0) {
                continue;
            }
            styleTuples.push([name, pair[2]]);
        }
        return styleTuples;
    }
    getStyleTuplesFromObject(currentValue) {
        let value;
        const styles = [];
        for (const property in currentValue) {
            value = currentValue[property];
            if (value == null) {
                continue;
            }
            if (typeof value === 'string') {
                styles.push([kebabCase(property), value]);
                continue;
            }
            styles.push(...this.getStyleTuples(value));
        }
        return styles;
    }
    getStyleTuplesFromArray(currentValue) {
        const len = currentValue.length;
        if (len > 0) {
            const styles = [];
            for (let i = 0; i < len; ++i) {
                styles.push(...this.getStyleTuples(currentValue[i]));
            }
            return styles;
        }
        return PLATFORM.emptyArray;
    }
    getStyleTuples(currentValue) {
        if (typeof currentValue === 'string') {
            return this.getStyleTuplesFromString(currentValue);
        }
        if (currentValue instanceof Array) {
            return this.getStyleTuplesFromArray(currentValue);
        }
        if (currentValue instanceof Object) {
            return this.getStyleTuplesFromObject(currentValue);
        }
        return PLATFORM.emptyArray;
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue } = this;
            this.oldValue = currentValue;
            const styles = this.styles;
            let style;
            let version = this.version;
            const styleTuples = this.getStyleTuples(currentValue);
            let tuple;
            let name;
            let value;
            const len = styleTuples.length;
            for (let i = 0; i < len; ++i) {
                tuple = styleTuples[i];
                name = tuple[0];
                value = tuple[1];
                this.setProperty(name, value);
                styles[name] = version;
            }
            this.styles = styles;
            this.version += 1;
            if (version === 0) {
                return;
            }
            version -= 1;
            for (style in styles) {
                if (!Object.prototype.hasOwnProperty.call(styles, style) || styles[style] !== version) {
                    continue;
                }
                this.obj.style.removeProperty(style);
            }
        }
    }
    setProperty(style, value) {
        let priority = '';
        if (value != null && typeof value.indexOf === 'function' && value.includes('!important')) {
            priority = 'important';
            value = value.replace('!important', '');
        }
        this.obj.style.setProperty(style, value, priority);
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
        this.oldValue = this.currentValue = this.obj.style.cssText;
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
}

const ISVGAnalyzer = DI.createInterface('ISVGAnalyzer').withDefault(x => x.singleton(class {
    isStandardSvgAttribute(node, attributeName) {
        return false;
    }
}));

var __decorate$D = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$B = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// TODO: handle file attribute properly again, etc
/**
 * Observer for non-radio, non-checkbox input.
 */
let ValueAttributeObserver = class ValueAttributeObserver {
    constructor(scheduler, flags, handler, obj, propertyKey) {
        this.scheduler = scheduler;
        this.handler = handler;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.currentValue = '';
        this.oldValue = '';
        this.hasChanges = false;
        this.task = null;
        this.persistentFlags = flags & 805306383 /* targetObserverFlags */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* fromBind */) > 0 || this.persistentFlags === 268435456 /* noTargetObserverQueue */) {
            this.flushChanges(flags);
        }
        else if (this.persistentFlags !== 536870912 /* persistentTargetObserverQueue */ && this.task === null) {
            this.task = this.scheduler.queueRenderTask(() => {
                this.flushChanges(flags);
                this.task = null;
            });
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const { currentValue, oldValue } = this;
            this.oldValue = currentValue;
            if (currentValue == void 0) {
                this.obj[this.propertyKey] = '';
            }
            else {
                this.obj[this.propertyKey] = currentValue;
            }
            if ((flags & 4096 /* fromBind */) === 0) {
                this.callSubscribers(currentValue, oldValue, flags);
            }
        }
    }
    handleEvent() {
        const oldValue = this.oldValue = this.currentValue;
        const currentValue = this.currentValue = this.obj[this.propertyKey];
        if (oldValue !== currentValue) {
            this.oldValue = currentValue;
            this.callSubscribers(currentValue, oldValue, 131072 /* fromDOMEvent */ | 524288 /* allowPublishRoundtrip */);
        }
    }
    subscribe(subscriber) {
        if (!this.hasSubscribers()) {
            this.handler.subscribe(this.obj, this);
            this.currentValue = this.oldValue = this.obj[this.propertyKey];
        }
        this.addSubscriber(subscriber);
    }
    unsubscribe(subscriber) {
        this.removeSubscriber(subscriber);
        if (!this.hasSubscribers()) {
            this.handler.dispose();
        }
    }
    bind(flags) {
        if (this.persistentFlags === 536870912 /* persistentTargetObserverQueue */) {
            if (this.task !== null) {
                this.task.cancel();
            }
            this.task = this.scheduler.queueRenderTask(() => this.flushChanges(flags), { persistent: true });
        }
    }
    unbind(flags) {
        if (this.task !== null) {
            this.task.cancel();
            this.task = null;
        }
    }
};
ValueAttributeObserver = __decorate$D([
    subscriberCollection(),
    __metadata$B("design:paramtypes", [Object, Number, Object, Object, String])
], ValueAttributeObserver);

var __decorate$E = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$C = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$f = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const xlinkNS = 'http://www.w3.org/1999/xlink';
const xmlNS = 'http://www.w3.org/XML/1998/namespace';
const xmlnsNS = 'http://www.w3.org/2000/xmlns/';
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
const nsAttributes = Object.assign(Object.create(null), {
    'xlink:actuate': ['actuate', xlinkNS],
    'xlink:arcrole': ['arcrole', xlinkNS],
    'xlink:href': ['href', xlinkNS],
    'xlink:role': ['role', xlinkNS],
    'xlink:show': ['show', xlinkNS],
    'xlink:title': ['title', xlinkNS],
    'xlink:type': ['type', xlinkNS],
    'xml:lang': ['lang', xmlNS],
    'xml:space': ['space', xmlNS],
    'xmlns': ['xmlns', xmlnsNS],
    'xmlns:xlink': ['xlink', xmlnsNS],
});
const inputEvents = ['change', 'input'];
const selectEvents = ['change'];
const contentEvents = ['change', 'input', 'blur', 'keyup', 'paste'];
const scrollEvents = ['scroll'];
const overrideProps = Object.assign(Object.create(null), {
    'class': true,
    'style': true,
    'css': true,
    'checked': true,
    'value': true,
    'model': true,
    'xlink:actuate': true,
    'xlink:arcrole': true,
    'xlink:href': true,
    'xlink:role': true,
    'xlink:show': true,
    'xlink:title': true,
    'xlink:type': true,
    'xml:lang': true,
    'xml:space': true,
    'xmlns': true,
    'xmlns:xlink': true,
});
let TargetObserverLocator = class TargetObserverLocator {
    constructor(dom, svgAnalyzer) {
        this.dom = dom;
        this.svgAnalyzer = svgAnalyzer;
    }
    static register(container) {
        return Registration.singleton(ITargetObserverLocator, this).register(container);
    }
    getObserver(flags, scheduler, lifecycle, observerLocator, obj, propertyName) {
        switch (propertyName) {
            case 'checked':
                return new CheckedObserver(scheduler, flags, lifecycle, new EventSubscriber(this.dom, inputEvents), obj);
            case 'value':
                if (obj.tagName === 'SELECT') {
                    return new SelectValueObserver(scheduler, flags, observerLocator, this.dom, new EventSubscriber(this.dom, selectEvents), obj);
                }
                return new ValueAttributeObserver(scheduler, flags, new EventSubscriber(this.dom, inputEvents), obj, propertyName);
            case 'files':
                return new ValueAttributeObserver(scheduler, flags, new EventSubscriber(this.dom, inputEvents), obj, propertyName);
            case 'textContent':
            case 'innerHTML':
                return new ValueAttributeObserver(scheduler, flags, new EventSubscriber(this.dom, contentEvents), obj, propertyName);
            case 'scrollTop':
            case 'scrollLeft':
                return new ValueAttributeObserver(scheduler, flags, new EventSubscriber(this.dom, scrollEvents), obj, propertyName);
            case 'class':
                return new ClassAttributeAccessor(scheduler, flags, obj);
            case 'style':
            case 'css':
                return new StyleAttributeAccessor(scheduler, flags, obj);
            case 'model':
                return new SetterObserver(lifecycle, flags, obj, propertyName);
            case 'role':
                return new DataAttributeAccessor(scheduler, flags, obj, propertyName);
            default:
                if (nsAttributes[propertyName] !== undefined) {
                    const nsProps = nsAttributes[propertyName];
                    return new AttributeNSAccessor(scheduler, flags, obj, nsProps[0], nsProps[1]);
                }
                if (isDataAttribute(obj, propertyName, this.svgAnalyzer)) {
                    return new DataAttributeAccessor(scheduler, flags, obj, propertyName);
                }
        }
        return null;
    }
    overridesAccessor(flags, obj, propertyName) {
        return overrideProps[propertyName] === true;
    }
    // consider a scenario where user would want to provide a Date object observation via patching a few mutation method on it
    // then this extension point of this default implementaion cannot be used,
    // and a new implementation of ITargetObserverLocator should be used instead
    // This default implementation only accounts for the most common target scenarios
    handles(flags, obj) {
        return this.dom.isNodeInstance(obj);
    }
};
TargetObserverLocator = __decorate$E([
    __param$f(0, IDOM),
    __param$f(1, ISVGAnalyzer),
    __metadata$C("design:paramtypes", [Object, Object])
], TargetObserverLocator);
let TargetAccessorLocator = class TargetAccessorLocator {
    constructor(dom, svgAnalyzer) {
        this.dom = dom;
        this.svgAnalyzer = svgAnalyzer;
    }
    static register(container) {
        return Registration.singleton(ITargetAccessorLocator, this).register(container);
    }
    getAccessor(flags, scheduler, lifecycle, obj, propertyName) {
        switch (propertyName) {
            case 'textContent':
                // note: this case is just an optimization (textContent is the most often used property)
                return new ElementPropertyAccessor(scheduler, flags, obj, propertyName);
            case 'class':
                return new ClassAttributeAccessor(scheduler, flags, obj);
            case 'style':
            case 'css':
                return new StyleAttributeAccessor(scheduler, flags, obj);
            // TODO: there are (many) more situation where we want to default to DataAttributeAccessor,
            // but for now stick to what vCurrent does
            case 'src':
            case 'href':
            // https://html.spec.whatwg.org/multipage/dom.html#wai-aria
            case 'role':
                return new DataAttributeAccessor(scheduler, flags, obj, propertyName);
            default:
                if (nsAttributes[propertyName] !== undefined) {
                    const nsProps = nsAttributes[propertyName];
                    return new AttributeNSAccessor(scheduler, flags, obj, nsProps[0], nsProps[1]);
                }
                if (isDataAttribute(obj, propertyName, this.svgAnalyzer)) {
                    return new DataAttributeAccessor(scheduler, flags, obj, propertyName);
                }
                return new ElementPropertyAccessor(scheduler, flags, obj, propertyName);
        }
    }
    handles(flags, obj) {
        return this.dom.isNodeInstance(obj);
    }
};
TargetAccessorLocator = __decorate$E([
    __param$f(0, IDOM),
    __param$f(1, ISVGAnalyzer),
    __metadata$C("design:paramtypes", [Object, Object])
], TargetAccessorLocator);
const IsDataAttribute = {};
function isDataAttribute(obj, propertyName, svgAnalyzer) {
    if (IsDataAttribute[propertyName] === true) {
        return true;
    }
    const prefix = propertyName.slice(0, 5);
    // https://html.spec.whatwg.org/multipage/dom.html#wai-aria
    // https://html.spec.whatwg.org/multipage/dom.html#custom-data-attribute
    return IsDataAttribute[propertyName] =
        prefix === 'aria-' ||
            prefix === 'data-' ||
            svgAnalyzer.isStandardSvgAttribute(obj, propertyName);
}

var __decorate$F = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
let AttrBindingBehavior = class AttrBindingBehavior {
    bind(flags, scope, binding) {
        binding.targetObserver = new DataAttributeAccessor(binding.locator.get(IScheduler), flags, binding.target, binding.targetProperty);
    }
    unbind(flags, scope, binding) {
        return;
    }
};
AttrBindingBehavior = __decorate$F([
    bindingBehavior('attr')
], AttrBindingBehavior);

var __decorate$G = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/** @internal */
function handleSelfEvent(event) {
    const target = findOriginalEventTarget(event);
    if (this.target !== target) {
        return;
    }
    return this.selfEventCallSource(event);
}
let SelfBindingBehavior = class SelfBindingBehavior {
    bind(flags, scope, binding) {
        if (!binding.callSource || !binding.targetEvent) {
            throw Reporter.error(8);
        }
        binding.selfEventCallSource = binding.callSource;
        binding.callSource = handleSelfEvent;
    }
    unbind(flags, scope, binding) {
        binding.callSource = binding.selfEventCallSource;
        binding.selfEventCallSource = null;
    }
};
SelfBindingBehavior = __decorate$G([
    bindingBehavior('self')
], SelfBindingBehavior);

var __decorate$H = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$D = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$g = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let UpdateTriggerBindingBehavior = class UpdateTriggerBindingBehavior {
    constructor(observerLocator) {
        this.observerLocator = observerLocator;
    }
    bind(flags, scope, binding, ...events) {
        if (events.length === 0) {
            throw Reporter.error(9);
        }
        if (binding.mode !== BindingMode.twoWay && binding.mode !== BindingMode.fromView) {
            throw Reporter.error(10);
        }
        this.persistentFlags = flags & 2080374799 /* persistentBindingFlags */;
        // ensure the binding's target observer has been set.
        const targetObserver = this.observerLocator.getObserver(this.persistentFlags | flags, binding.target, binding.targetProperty);
        if (!targetObserver.handler) {
            throw Reporter.error(10);
        }
        binding.targetObserver = targetObserver;
        // stash the original element subscribe function.
        targetObserver.originalHandler = binding.targetObserver.handler;
        // replace the element subscribe function with one that uses the correct events.
        targetObserver.handler = new EventSubscriber(binding.locator.get(IDOM), events);
    }
    unbind(flags, scope, binding) {
        // restore the state of the binding.
        binding.targetObserver.handler.dispose();
        binding.targetObserver.handler = binding.targetObserver.originalHandler;
        binding.targetObserver.originalHandler = null;
    }
};
UpdateTriggerBindingBehavior = __decorate$H([
    bindingBehavior('updateTrigger'),
    __param$g(0, IObserverLocator),
    __metadata$D("design:paramtypes", [Object])
], UpdateTriggerBindingBehavior);

const noopShadowDOMStyles = Object.freeze({
    applyTo: PLATFORM.noop
});
const IShadowDOMStyles = DI.createInterface('IShadowDOMStyles').noDefault();
const IShadowDOMGlobalStyles = DI.createInterface('IShadowDOMGlobalStyles')
    .withDefault(x => x.instance(noopShadowDOMStyles));
class AdoptedStyleSheetsStyles {
    constructor(dom, localStyles, styleSheetCache, sharedStyles = null) {
        this.sharedStyles = sharedStyles;
        this.styleSheets = localStyles.map(x => {
            let sheet;
            if (x instanceof dom.CSSStyleSheet) {
                sheet = x;
            }
            else {
                sheet = styleSheetCache.get(x);
                if (!sheet) {
                    sheet = new dom.CSSStyleSheet();
                    sheet.replaceSync(x);
                    styleSheetCache.set(x, sheet);
                }
            }
            return sheet;
        });
    }
    static supported(dom) {
        return 'adoptedStyleSheets' in dom.ShadowRoot.prototype;
    }
    applyTo(shadowRoot) {
        if (this.sharedStyles !== null) {
            this.sharedStyles.applyTo(shadowRoot);
        }
        // https://wicg.github.io/construct-stylesheets/
        // https://developers.google.com/web/updates/2019/02/constructable-stylesheets
        shadowRoot.adoptedStyleSheets = [
            ...shadowRoot.adoptedStyleSheets,
            ...this.styleSheets
        ];
    }
}
class StyleElementStyles {
    constructor(dom, localStyles, sharedStyles = null) {
        this.dom = dom;
        this.localStyles = localStyles;
        this.sharedStyles = sharedStyles;
    }
    applyTo(shadowRoot) {
        const styles = this.localStyles;
        const dom = this.dom;
        for (let i = styles.length - 1; i > -1; --i) {
            const element = dom.createElement('style');
            element.innerHTML = styles[i];
            shadowRoot.prepend(element);
        }
        if (this.sharedStyles !== null) {
            this.sharedStyles.applyTo(shadowRoot);
        }
    }
}

const defaultShadowOptions = {
    mode: 'open'
};
class HTMLProjectorLocator {
    static register(container) {
        return Registration.singleton(IProjectorLocator, this).register(container);
    }
    getElementProjector(dom, $component, host, def) {
        if (def.shadowOptions || def.hasSlots) {
            if (def.containerless) {
                throw Reporter.error(21);
            }
            return new ShadowDOMProjector(dom, $component, host, def);
        }
        if (def.containerless) {
            return new ContainerlessProjector(dom, $component, host);
        }
        return new HostProjector($component, host);
    }
}
const childObserverOptions$1 = { childList: true };
/** @internal */
class ShadowDOMProjector {
    constructor(dom, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly
    $controller, host, definition) {
        this.dom = dom;
        this.$controller = $controller;
        this.host = host;
        let shadowOptions;
        if (definition.shadowOptions instanceof Object &&
            'mode' in definition.shadowOptions) {
            shadowOptions = definition.shadowOptions;
        }
        else {
            shadowOptions = defaultShadowOptions;
        }
        this.shadowRoot = host.attachShadow(shadowOptions);
        Metadata.define(CustomElement.name, $controller, this.host);
        Metadata.define(CustomElement.name, $controller, this.shadowRoot);
    }
    get children() {
        return this.host.childNodes;
    }
    subscribeToChildrenChange(callback, options = childObserverOptions$1) {
        // TODO: add a way to dispose/disconnect
        this.dom.createNodeObserver(this.host, callback, options);
    }
    provideEncapsulationSource() {
        return this.shadowRoot;
    }
    project(nodes) {
        const context = this.$controller.context;
        const styles = context.has(IShadowDOMStyles, false)
            ? context.get(IShadowDOMStyles)
            : context.get(IShadowDOMGlobalStyles);
        styles.applyTo(this.shadowRoot);
        nodes.appendTo(this.shadowRoot);
    }
    take(nodes) {
        nodes.remove();
        nodes.unlink();
    }
}
/** @internal */
class ContainerlessProjector {
    constructor(dom, $controller, host) {
        if (host.childNodes.length) {
            this.childNodes = toArray(host.childNodes);
        }
        else {
            this.childNodes = PLATFORM.emptyArray;
        }
        this.host = dom.convertToRenderLocation(host);
        Metadata.define(CustomElement.name, $controller, this.host);
    }
    get children() {
        return this.childNodes;
    }
    subscribeToChildrenChange(callback) {
        // TODO: turn this into an error
        // Containerless does not have a container node to observe children on.
    }
    provideEncapsulationSource() {
        return this.host.getRootNode();
    }
    project(nodes) {
        nodes.insertBefore(this.host);
    }
    take(nodes) {
        nodes.remove();
        nodes.unlink();
    }
}
/** @internal */
class HostProjector {
    constructor($controller, host) {
        this.host = host;
        Metadata.define(CustomElement.name, $controller, host);
    }
    get children() {
        return this.host.childNodes;
    }
    subscribeToChildrenChange(callback) {
        // Do nothing since this scenario will never have children.
    }
    provideEncapsulationSource() {
        return this.host.getRootNode();
    }
    project(nodes) {
        nodes.appendTo(this.host);
    }
    take(nodes) {
        nodes.remove();
        nodes.unlink();
    }
}

var NodeType;
(function (NodeType) {
    NodeType[NodeType["Element"] = 1] = "Element";
    NodeType[NodeType["Attr"] = 2] = "Attr";
    NodeType[NodeType["Text"] = 3] = "Text";
    NodeType[NodeType["CDATASection"] = 4] = "CDATASection";
    NodeType[NodeType["EntityReference"] = 5] = "EntityReference";
    NodeType[NodeType["Entity"] = 6] = "Entity";
    NodeType[NodeType["ProcessingInstruction"] = 7] = "ProcessingInstruction";
    NodeType[NodeType["Comment"] = 8] = "Comment";
    NodeType[NodeType["Document"] = 9] = "Document";
    NodeType[NodeType["DocumentType"] = 10] = "DocumentType";
    NodeType[NodeType["DocumentFragment"] = 11] = "DocumentFragment";
    NodeType[NodeType["Notation"] = 12] = "Notation";
})(NodeType || (NodeType = {}));
const effectiveParentNodeOverrides = new WeakMap();
/**
 * IDOM implementation for Html.
 */
class HTMLDOM {
    constructor(window, document, TNode, TElement, THTMLElement, TCustomEvent, TCSSStyleSheet, TShadowRoot) {
        this.window = window;
        this.document = document;
        this.Node = TNode;
        this.Element = TElement;
        this.HTMLElement = THTMLElement;
        this.CustomEvent = TCustomEvent;
        this.CSSStyleSheet = TCSSStyleSheet;
        this.ShadowRoot = TShadowRoot;
        if (DOM.isInitialized) {
            Reporter.write(1001); // TODO: create reporters code // DOM already initialized (just info)
            DOM.destroy();
        }
        DOM.initialize(this);
        this.emptyNodes = new FragmentNodeSequence(this, document.createDocumentFragment());
    }
    static register(container) {
        return Registration.aliasTo(IDOM, this).register(container);
    }
    addEventListener(eventName, subscriber, publisher, options) {
        (publisher || this.document).addEventListener(eventName, subscriber, options);
    }
    appendChild(parent, child) {
        parent.appendChild(child);
    }
    cloneNode(node, deep) {
        return node.cloneNode(deep !== false);
    }
    convertToRenderLocation(node) {
        if (this.isRenderLocation(node)) {
            return node; // it's already a IRenderLocation (converted by FragmentNodeSequence)
        }
        if (node.parentNode == null) {
            throw Reporter.error(52);
        }
        const locationEnd = this.document.createComment('au-end');
        const locationStart = this.document.createComment('au-start');
        node.parentNode.replaceChild(locationEnd, node);
        locationEnd.parentNode.insertBefore(locationStart, locationEnd);
        locationEnd.$start = locationStart;
        locationStart.$nodes = null;
        return locationEnd;
    }
    createDocumentFragment(markupOrNode) {
        if (markupOrNode == null) {
            return this.document.createDocumentFragment();
        }
        if (this.isNodeInstance(markupOrNode)) {
            if (markupOrNode.content !== undefined) {
                return markupOrNode.content;
            }
            const fragment = this.document.createDocumentFragment();
            fragment.appendChild(markupOrNode);
            return fragment;
        }
        return this.createTemplate(markupOrNode).content;
    }
    createNodeSequence(fragment) {
        if (fragment === null) {
            return this.emptyNodes;
        }
        return new FragmentNodeSequence(this, fragment.cloneNode(true));
    }
    createElement(name) {
        return this.document.createElement(name);
    }
    fetch(input, init) {
        return this.window.fetch(input, init);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    createCustomEvent(eventType, options) {
        return new this.CustomEvent(eventType, options);
    }
    dispatchEvent(evt) {
        this.document.dispatchEvent(evt);
    }
    createNodeObserver(node, cb, init) {
        if (typeof MutationObserver === 'undefined') {
            // TODO: find a proper response for this scenario
            return {
                disconnect() { },
                observe() { },
                takeRecords() { return PLATFORM.emptyArray; }
            };
        }
        const observer = new MutationObserver(cb);
        observer.observe(node, init);
        return observer;
    }
    createTemplate(markup) {
        if (markup == null) {
            return this.document.createElement('template');
        }
        const template = this.document.createElement('template');
        template.innerHTML = markup.toString();
        return template;
    }
    createTextNode(text) {
        return this.document.createTextNode(text);
    }
    /**
     * Returns the effective parentNode according to Aurelia's component hierarchy.
     *
     * Used by Aurelia to find the closest parent controller relative to a node.
     *
     * This method supports 3 additional scenarios that `node.parentNode` does not support:
     * - Containerless elements. The parentNode in this case is a comment precending the element under specific conditions, rather than a node wrapping the element.
     * - ShadowDOM. If a `ShadowRoot` is encountered, this method retrieves the associated controller via the metadata api to locate the original host.
     * - Portals. If the provided node was moved to a different location in the DOM by a `portal` attribute, then the original parent of the node will be returned.
     *
     * @param node - The node to get the parent for.
     * @returns Either the closest parent node, the closest `IRenderLocation` (comment node that is the containerless host), original portal host, or `null` if this is either the absolute document root or a disconnected node.
     */
    getEffectiveParentNode(node) {
        // TODO: this method needs more tests!
        // First look for any overrides
        if (effectiveParentNodeOverrides.has(node)) {
            return effectiveParentNodeOverrides.get(node);
        }
        // Then try to get the nearest au-start render location, which would be the containerless parent,
        // again looking for any overrides along the way.
        // otherwise return the normal parent node
        let containerlessOffset = 0;
        let next = node.nextSibling;
        while (next !== null) {
            if (next.nodeType === 8 /* Comment */) {
                switch (next.textContent) {
                    case 'au-start':
                        // If we see an au-start before we see au-end, it will precede the host of a sibling containerless element rather than a parent.
                        // So we use the offset to ignore the next au-end
                        ++containerlessOffset;
                        break;
                    case 'au-end':
                        if (containerlessOffset-- === 0) {
                            return next;
                        }
                }
            }
            next = next.nextSibling;
        }
        if (node.parentNode === null && node.nodeType === 11 /* DocumentFragment */) {
            // Could be a shadow root; see if there's a controller and if so, get the original host via the projector
            const controller = CustomElement.for(node);
            if (controller === void 0) {
                // Not a shadow root (or at least, not one created by Aurelia)
                // Nothing more we can try, just return null
                return null;
            }
            const projector = controller.projector;
            if (projector instanceof ShadowDOMProjector) {
                // Now we can use the original host to traverse further up
                return this.getEffectiveParentNode(projector.host);
            }
        }
        return node.parentNode;
    }
    setEffectiveParentNode(childNodeOrNodeSequence, parentNode) {
        if (this.isNodeInstance(childNodeOrNodeSequence)) {
            effectiveParentNodeOverrides.set(childNodeOrNodeSequence, parentNode);
        }
        else {
            const nodes = childNodeOrNodeSequence.childNodes;
            for (let i = 0, ii = nodes.length; i < ii; ++i) {
                effectiveParentNodeOverrides.set(nodes[i], parentNode);
            }
        }
    }
    insertBefore(nodeToInsert, referenceNode) {
        referenceNode.parentNode.insertBefore(nodeToInsert, referenceNode);
    }
    isMarker(node) {
        return node.nodeName === 'AU-M';
    }
    isNodeInstance(potentialNode) {
        return potentialNode != null && potentialNode.nodeType > 0;
    }
    isRenderLocation(node) {
        return node.textContent === 'au-end';
    }
    makeTarget(node) {
        node.className = 'au';
    }
    registerElementResolver(container, resolver) {
        container.registerResolver(INode, resolver);
        container.registerResolver(this.Node, resolver);
        container.registerResolver(this.Element, resolver);
        container.registerResolver(this.HTMLElement, resolver);
    }
    remove(node) {
        if (node.remove) {
            node.remove();
        }
        else {
            node.parentNode.removeChild(node);
        }
    }
    removeEventListener(eventName, subscriber, publisher, options) {
        (publisher || this.document).removeEventListener(eventName, subscriber, options);
    }
    setAttribute(node, name, value) {
        node.setAttribute(name, value);
    }
}
const $DOM = DOM;
/* eslint-enable @typescript-eslint/no-explicit-any */
// This is the most common form of INodeSequence.
// Every custom element or template controller whose node sequence is based on an HTML template
// has an instance of this under the hood. Anyone who wants to create a node sequence from
// a string of markup would also receive an instance of this.
// CompiledTemplates create instances of FragmentNodeSequence.
/**
 * This is the most common form of INodeSequence.
 *
 * @internal
 */
class FragmentNodeSequence {
    constructor(dom, fragment) {
        this.dom = dom;
        this.fragment = fragment;
        this.isMounted = false;
        this.isLinked = false;
        this.next = void 0;
        this.refNode = void 0;
        const targetNodeList = fragment.querySelectorAll('.au');
        let i = 0;
        let ii = targetNodeList.length;
        const targets = this.targets = Array(ii);
        while (i < ii) {
            // eagerly convert all markers to RenderLocations (otherwise the renderer
            // will do it anyway) and store them in the target list (since the comments
            // can't be queried)
            const target = targetNodeList[i];
            if (target.nodeName === 'AU-M') {
                // note the renderer will still call this method, but it will just return the
                // location if it sees it's already a location
                targets[i] = this.dom.convertToRenderLocation(target);
            }
            else {
                // also store non-markers for consistent ordering
                targets[i] = target;
            }
            ++i;
        }
        const childNodeList = fragment.childNodes;
        i = 0;
        ii = childNodeList.length;
        const childNodes = this.childNodes = Array(ii);
        while (i < ii) {
            childNodes[i] = childNodeList[i];
            ++i;
        }
        this.firstChild = fragment.firstChild;
        this.lastChild = fragment.lastChild;
    }
    findTargets() {
        return this.targets;
    }
    insertBefore(refNode) {
        if (this.isLinked && !!this.refNode) {
            this.addToLinked();
        }
        else {
            const parent = refNode.parentNode;
            if (this.isMounted) {
                let current = this.firstChild;
                const end = this.lastChild;
                let next;
                while (current != null) {
                    next = current.nextSibling;
                    parent.insertBefore(current, refNode);
                    if (current === end) {
                        break;
                    }
                    current = next;
                }
            }
            else {
                this.isMounted = true;
                refNode.parentNode.insertBefore(this.fragment, refNode);
            }
        }
    }
    appendTo(parent) {
        if (this.isMounted) {
            let current = this.firstChild;
            const end = this.lastChild;
            let next;
            while (current != null) {
                next = current.nextSibling;
                parent.appendChild(current);
                if (current === end) {
                    break;
                }
                current = next;
            }
        }
        else {
            this.isMounted = true;
            parent.appendChild(this.fragment);
        }
    }
    remove() {
        if (this.isMounted) {
            this.isMounted = false;
            const fragment = this.fragment;
            const end = this.lastChild;
            let next;
            let current = this.firstChild;
            while (current !== null) {
                next = current.nextSibling;
                fragment.appendChild(current);
                if (current === end) {
                    break;
                }
                current = next;
            }
        }
    }
    addToLinked() {
        const refNode = this.refNode;
        const parent = refNode.parentNode;
        if (this.isMounted) {
            let current = this.firstChild;
            const end = this.lastChild;
            let next;
            while (current != null) {
                next = current.nextSibling;
                parent.insertBefore(current, refNode);
                if (current === end) {
                    break;
                }
                current = next;
            }
        }
        else {
            this.isMounted = true;
            parent.insertBefore(this.fragment, refNode);
        }
    }
    unlink() {
        this.isLinked = false;
        this.next = void 0;
        this.refNode = void 0;
    }
    link(next) {
        this.isLinked = true;
        if (this.dom.isRenderLocation(next)) {
            this.refNode = next;
        }
        else {
            this.next = next;
            this.obtainRefNode();
        }
    }
    obtainRefNode() {
        if (this.next !== void 0) {
            this.refNode = this.next.firstChild;
        }
        else {
            this.refNode = void 0;
        }
    }
}
/** @internal */
class AuMarker {
    constructor(nextSibling) {
        this.nextSibling = nextSibling;
        this.textContent = '';
    }
    get parentNode() {
        return this.nextSibling.parentNode;
    }
    remove() { }
}
(proto => {
    proto.previousSibling = null;
    proto.childNodes = PLATFORM.emptyArray;
    proto.nodeName = 'AU-M';
    proto.nodeType = 1 /* Element */;
})(AuMarker.prototype);

var __decorate$I = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$E = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$h = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const unset = Symbol();
// Using passive to help with performance
const defaultCaptureEventInit = {
    passive: true,
    capture: true
};
// Using passive to help with performance
const defaultBubbleEventInit = {
    passive: true
};
// weakly connect a document to a blur manager
// to avoid polluting the document properties
const blurDocMap = new WeakMap();
class BlurManager {
    constructor(dom, scheduler) {
        this.dom = dom;
        this.scheduler = scheduler;
        this.blurs = [];
        blurDocMap.set(dom.document, this);
        this.handler = createHandler(this, this.blurs);
    }
    static createFor(dom, scheduler) {
        return blurDocMap.get(dom.document) || new BlurManager(dom, scheduler);
    }
    register(blur) {
        const blurs = this.blurs;
        if (!blurs.includes(blur) && blurs.push(blur) === 1) {
            this.addListeners();
        }
    }
    unregister(blur) {
        const blurs = this.blurs;
        const index = blurs.indexOf(blur);
        if (index > -1) {
            blurs.splice(index, 1);
        }
        if (blurs.length === 0) {
            this.removeListeners();
        }
    }
    addListeners() {
        const dom = this.dom;
        const doc = dom.document;
        const win = dom.window;
        const handler = this.handler;
        if (win.navigator.pointerEnabled) {
            doc.addEventListener('pointerdown', handler, defaultCaptureEventInit);
        }
        doc.addEventListener('touchstart', handler, defaultCaptureEventInit);
        doc.addEventListener('mousedown', handler, defaultCaptureEventInit);
        doc.addEventListener('focus', handler, defaultCaptureEventInit);
        win.addEventListener('blur', handler, defaultBubbleEventInit);
    }
    removeListeners() {
        const dom = this.dom;
        const doc = dom.document;
        const win = dom.window;
        const handler = this.handler;
        if (win.navigator.pointerEnabled) {
            doc.removeEventListener('pointerdown', handler, defaultCaptureEventInit);
        }
        doc.removeEventListener('touchstart', handler, defaultCaptureEventInit);
        doc.removeEventListener('mousedown', handler, defaultCaptureEventInit);
        doc.removeEventListener('focus', handler, defaultCaptureEventInit);
        win.removeEventListener('blur', handler, defaultBubbleEventInit);
    }
}
let Blur = class Blur {
    constructor(element, dom, scheduler) {
        this.dom = dom;
        this.element = element;
        /**
         * By default, the behavior should be least surprise possible, that:
         *
         * it searches for anything from root context,
         * and root context is document body
         */
        this.linkedMultiple = true;
        this.searchSubTree = true;
        this.linkingContext = null;
        this.value = unset;
        this.manager = BlurManager.createFor(dom, scheduler);
    }
    afterAttach() {
        this.manager.register(this);
    }
    beforeDetach() {
        this.manager.unregister(this);
    }
    handleEventTarget(target) {
        if (this.value === false) {
            return;
        }
        const dom = this.dom;
        if (target === dom.window || target === dom.document || !this.contains(target)) {
            this.triggerBlur();
        }
    }
    contains(target) {
        if (!this.value) {
            return false;
        }
        let els;
        let i;
        let j, jj;
        let link;
        const element = this.element;
        if (containsElementOrShadowRoot(element, target)) {
            return true;
        }
        if (!this.linkedWith) {
            return false;
        }
        const doc = this.dom.document;
        const linkedWith = this.linkedWith;
        const linkingContext = this.linkingContext;
        const searchSubTree = this.searchSubTree;
        const linkedMultiple = this.linkedMultiple;
        const links = Array.isArray(linkedWith) ? linkedWith : [linkedWith];
        const contextNode = (typeof linkingContext === 'string'
            ? doc.querySelector(linkingContext)
            : linkingContext)
            || doc.body;
        const ii = links.length;
        for (i = 0; ii > i; ++i) {
            link = links[i];
            // When user specify to link with something by a string, it acts as a CSS selector
            // We need to do some querying stuff to determine if target above is contained.
            if (typeof link === 'string') {
                // Default behavior, search the whole tree, from context that user specified, which default to document body
                if (searchSubTree) {
                    // todo: are there too many knobs?? Consider remove "linkedMultiple"??
                    if (!linkedMultiple) {
                        const el = contextNode.querySelector(link);
                        els = el !== null ? [el] : PLATFORM.emptyArray;
                    }
                    else {
                        els = contextNode.querySelectorAll(link);
                    }
                    jj = els.length;
                    for (j = 0; jj > j; ++j) {
                        if (els[j].contains(target)) {
                            return true;
                        }
                    }
                }
                else {
                    // default to document body, if user didn't define a linking context, and wanted to ignore subtree.
                    // This is specifically performant and useful for dialogs, plugins
                    // that usually generate contents to document body
                    els = contextNode.children;
                    jj = els.length;
                    for (j = 0; jj > j; ++j) {
                        if (els[j].matches(link)) {
                            return true;
                        }
                    }
                }
            }
            else {
                // When user passed in something that is not a string,
                // simply check if has method `contains` (allow duck typing)
                // and call it against target.
                // This enables flexible usages
                if (link && link.contains(target)) {
                    return true;
                }
            }
        }
        return false;
    }
    triggerBlur() {
        this.value = false;
        if (typeof this.onBlur === 'function') {
            this.onBlur.call(null);
        }
    }
};
__decorate$I([
    bindable(),
    __metadata$E("design:type", Object)
], Blur.prototype, "value", void 0);
__decorate$I([
    bindable(),
    __metadata$E("design:type", Function)
], Blur.prototype, "onBlur", void 0);
__decorate$I([
    bindable(),
    __metadata$E("design:type", Object)
], Blur.prototype, "linkedWith", void 0);
__decorate$I([
    bindable(),
    __metadata$E("design:type", Boolean)
], Blur.prototype, "linkedMultiple", void 0);
__decorate$I([
    bindable(),
    __metadata$E("design:type", Boolean)
], Blur.prototype, "searchSubTree", void 0);
__decorate$I([
    bindable(),
    __metadata$E("design:type", Object)
], Blur.prototype, "linkingContext", void 0);
Blur = __decorate$I([
    customAttribute('blur'),
    __param$h(0, INode), __param$h(1, IDOM), __param$h(2, IScheduler),
    __metadata$E("design:paramtypes", [Object, HTMLDOM, Object])
], Blur);
const containsElementOrShadowRoot = (container, target) => {
    if (container.contains(target)) {
        return true;
    }
    let parentNode = null;
    while (target != null) {
        if (target === container) {
            return true;
        }
        parentNode = target.parentNode;
        if (parentNode === null && target.nodeType === 11 /* DocumentFragment */) {
            target = target.host;
            continue;
        }
        target = parentNode;
    }
    return false;
};
const createHandler = (manager, checkTargets) => {
    // *******************************
    // EVENTS ORDER
    // -----------------------------
    // pointerdown
    // touchstart
    // pointerup
    // touchend
    // mousedown
    // --------------
    // BLUR
    // FOCUS
    // --------------
    // mouseup
    // click
    //
    // ******************************
    //
    // There are cases focus happens without mouse interaction (keyboard)
    // So it needs to capture both mouse / focus movement
    //
    // ******************************
    let hasChecked = false;
    const revertCheckage = () => {
        hasChecked = false;
    };
    const markChecked = () => {
        hasChecked = true;
        manager.scheduler.queueRenderTask(revertCheckage, { preempt: true });
    };
    const handleMousedown = (e) => {
        if (!hasChecked) {
            handleEvent(e);
            markChecked();
        }
    };
    /**
     * Handle globally captured focus event
     * This can happen via a few way:
     * User clicks on a focusable element
     * User uses keyboard to navigate to a focusable element
     * User goes back to the window from another browser tab
     * User clicks on a non-focusable element
     * User clicks on the window, outside of the document
     */
    const handleFocus = (e) => {
        if (hasChecked) {
            return;
        }
        // there are two way a focus gets captured on window
        // when the windows itself got focus
        // and when an element in the document gets focus
        // when the window itself got focus, reacting to it is quite unnecessary
        // as it doesn't really affect element inside the document
        // Do a simple check and bail immediately
        const isWindow = e.target === manager.dom.window;
        if (isWindow) {
            for (let i = 0, ii = checkTargets.length; ii > i; ++i) {
                checkTargets[i].triggerBlur();
            }
        }
        else {
            handleEvent(e);
        }
        markChecked();
    };
    const handleWindowBlur = () => {
        hasChecked = false;
        for (let i = 0, ii = checkTargets.length; i < ii; ++i) {
            checkTargets[i].triggerBlur();
        }
    };
    const handleEvent = (e) => {
        const target = e.composed ? e.composedPath()[0] : e.target;
        if (target === null) {
            return;
        }
        for (let i = 0, ii = checkTargets.length; i < ii; ++i) {
            checkTargets[i].handleEventTarget(target);
        }
    };
    return {
        onpointerdown: handleMousedown,
        ontouchstart: handleMousedown,
        onmousedown: handleMousedown,
        onfocus: handleFocus,
        onblur: handleWindowBlur,
        handleEvent(e) {
            this[`on${e.type}`](e);
        }
    };
};

var __decorate$J = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$F = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$i = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/**
 * Focus attribute for element focus binding
 */
let Focus = class Focus {
    constructor(element, dom) {
        this.dom = dom;
        /**
         * Indicates whether `apply` should be called when `afterAttach` callback is invoked
         */
        this.needsApply = false;
        this.element = element;
    }
    beforeBind() {
        this.valueChanged();
    }
    /**
     * Invoked everytime the bound value changes.
     *
     * @param newValue - The new value.
     */
    valueChanged() {
        // In theory, we could/should react immediately
        // but focus state of an element cannot be achieved
        // while it's disconnected from the document
        // thus, there neesd to be a check if it's currently connected or not
        // before applying the value to the element
        if (this.$controller.state & 32 /* isAttached */) {
            this.apply();
        }
        else {
            // If the element is not currently connect
            // toggle the flag to add pending work for later
            // in afterAttach lifecycle
            this.needsApply = true;
        }
    }
    /**
     * Invoked when the attribute is afterAttach to the DOM.
     */
    afterAttach() {
        if (this.needsApply) {
            this.needsApply = false;
            this.apply();
        }
        const el = this.element;
        el.addEventListener('focus', this);
        el.addEventListener('blur', this);
    }
    /**
     * Invoked when the attribute is afterDetach from the DOM.
     */
    afterDetach() {
        const el = this.element;
        el.removeEventListener('focus', this);
        el.removeEventListener('blur', this);
    }
    /**
     * EventTarget interface handler for better memory usage
     */
    handleEvent(e) {
        // there are only two event listened to
        // if the even is focus, it menans the element is focused
        // only need to switch the value to true
        if (e.type === 'focus') {
            this.value = true;
        }
        else if (this.dom.document.activeElement !== this.element) {
            // else, it's blur event
            // when a blur event happens, there are two situations
            // 1. the element itself lost the focus
            // 2. window lost the focus
            // To handle both (1) and (2), only need to check if
            // current active element is still the same element of this focus custom attribute
            // If it's not, it's a blur event happened on Window because the browser tab lost focus
            this.value = false;
        }
    }
    /**
     * Focus/blur based on current value
     */
    apply() {
        const el = this.element;
        if (this.value) {
            el.focus();
        }
        else {
            el.blur();
        }
    }
};
__decorate$J([
    bindable({ mode: BindingMode.twoWay }),
    __metadata$F("design:type", Object)
], Focus.prototype, "value", void 0);
Focus = __decorate$J([
    customAttribute('focus'),
    __param$i(0, INode), __param$i(1, IDOM),
    __metadata$F("design:paramtypes", [Object, HTMLDOM])
], Focus);

var __decorate$K = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$G = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$j = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
function toTask(maybePromiseOrTask) {
    if (maybePromiseOrTask == null) {
        return LifecycleTask.done;
    }
    if (typeof maybePromiseOrTask.then === 'function') {
        return new TerminalTask(maybePromiseOrTask);
    }
    return maybePromiseOrTask;
}
let Portal = class Portal {
    constructor(factory, originalLoc, dom) {
        this.factory = factory;
        this.originalLoc = originalLoc;
        this.dom = dom;
        this.id = nextId('au$component');
        this.strict = false;
        this.task = LifecycleTask.done;
        // to make the shape of this object consistent.
        // todo: is this necessary
        this.currentTarget = dom.createElement('div');
        this.view = this.factory.create();
        dom.setEffectiveParentNode(this.view.nodes, originalLoc);
        this.view.hold(originalLoc, 1 /* insertBefore */);
    }
    beforeBind(flags) {
        if (this.callbackContext == null) {
            this.callbackContext = this.$controller.scope.bindingContext;
        }
        return this.view.bind(flags, this.$controller.scope);
    }
    afterAttach(flags) {
        this.targetChanged();
    }
    beforeDetach(flags) {
        this.task = this.deactivate(flags);
    }
    beforeUnbind(flags) {
        this.callbackContext = null;
        return this.view.unbind(flags);
    }
    targetChanged() {
        const $controller = this.$controller;
        if (($controller.state & 4 /* isBound */) === 0) {
            return;
        }
        this.project($controller.flags);
    }
    project(flags) {
        const oldTarget = this.currentTarget;
        const newTarget = this.currentTarget = this.resolveTarget();
        if (oldTarget === newTarget) {
            return;
        }
        this.task = this.deactivate(flags);
        this.task = this.activate(newTarget, flags);
    }
    activate(target, flags) {
        const { activating, activated, callbackContext, view } = this;
        let task = this.task;
        view.hold(target, 2 /* append */);
        if ((this.$controller.state & 40 /* isAttachedOrAttaching */) === 0) {
            return task;
        }
        if (typeof activating === 'function') {
            if (task.done) {
                task = toTask(activating.call(callbackContext, target, view));
            }
            else {
                task = new ContinuationTask(task, activating, callbackContext, target, view);
            }
        }
        if (task.done) {
            view.attach(flags);
        }
        else {
            task = new ContinuationTask(task, view.attach, view, flags);
        }
        if (typeof activated === 'function') {
            if (task.done) {
                // TODO: chain this up with RAF queue mount callback so activated is called only when
                // node is actually mounted (is this needed as per the spec of this resource?)
                task = toTask(activated.call(callbackContext, target, view));
            }
            else {
                task = new ContinuationTask(task, activated, callbackContext, target, view);
            }
        }
        return task;
    }
    deactivate(flags) {
        const { deactivating, deactivated, callbackContext, view, target: target } = this;
        let task = this.task;
        if (typeof deactivating === 'function') {
            if (task.done) {
                task = toTask(deactivating.call(callbackContext, target, view));
            }
            else {
                task = new ContinuationTask(task, deactivating, callbackContext, target, view);
            }
        }
        if (task.done) {
            view.detach(flags);
        }
        else {
            task = new ContinuationTask(task, view.detach, view, flags);
        }
        if (typeof deactivated === 'function') {
            if (task.done) {
                task = toTask(deactivated.call(callbackContext, target, view));
            }
            else {
                task = new ContinuationTask(task, deactivated, callbackContext, target, view);
            }
        }
        return task;
    }
    resolveTarget() {
        const dom = this.dom;
        // with a $ in front to make it less confusing/error prone
        const $document = dom.document;
        let target = this.target;
        let context = this.renderContext;
        if (typeof target === 'string') {
            let queryContext = $document;
            if (typeof context === 'string') {
                context = $document.querySelector(context);
            }
            if (dom.isNodeInstance(context)) {
                queryContext = context;
            }
            target = queryContext.querySelector(target);
        }
        if (dom.isNodeInstance(target)) {
            return target;
        }
        if (target == null) {
            if (this.strict) {
                throw new Error('Render target not found');
            }
            else {
                target = $document.body;
            }
        }
        return target;
    }
};
__decorate$K([
    bindable({ primary: true }),
    __metadata$G("design:type", Object)
], Portal.prototype, "target", void 0);
__decorate$K([
    bindable({ callback: 'targetChanged' }),
    __metadata$G("design:type", Object)
], Portal.prototype, "renderContext", void 0);
__decorate$K([
    bindable(),
    __metadata$G("design:type", Boolean)
], Portal.prototype, "strict", void 0);
__decorate$K([
    bindable(),
    __metadata$G("design:type", Function)
], Portal.prototype, "deactivating", void 0);
__decorate$K([
    bindable(),
    __metadata$G("design:type", Function)
], Portal.prototype, "activating", void 0);
__decorate$K([
    bindable(),
    __metadata$G("design:type", Function)
], Portal.prototype, "deactivated", void 0);
__decorate$K([
    bindable(),
    __metadata$G("design:type", Function)
], Portal.prototype, "activated", void 0);
__decorate$K([
    bindable(),
    __metadata$G("design:type", Object)
], Portal.prototype, "callbackContext", void 0);
Portal = __decorate$K([
    templateController('portal'),
    __param$j(0, IViewFactory),
    __param$j(1, IRenderLocation),
    __param$j(2, IDOM),
    __metadata$G("design:paramtypes", [Object, Object, HTMLDOM])
], Portal);

var HTMLTargetedInstructionType;
(function (HTMLTargetedInstructionType) {
    HTMLTargetedInstructionType["textBinding"] = "ha";
    HTMLTargetedInstructionType["listenerBinding"] = "hb";
    HTMLTargetedInstructionType["attributeBinding"] = "hc";
    HTMLTargetedInstructionType["stylePropertyBinding"] = "hd";
    HTMLTargetedInstructionType["setAttribute"] = "he";
    HTMLTargetedInstructionType["setClassAttribute"] = "hf";
    HTMLTargetedInstructionType["setStyleAttribute"] = "hg";
})(HTMLTargetedInstructionType || (HTMLTargetedInstructionType = {}));
function isHTMLTargetedInstruction(value) {
    const type = value.type;
    return typeof type === 'string' && type.length === 2;
}

class TextBindingInstruction {
    constructor(from) {
        this.from = from;
        this.type = "ha" /* textBinding */;
    }
}
class TriggerBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "hb" /* listenerBinding */;
        this.preventDefault = true;
        this.strategy = DelegationStrategy.none;
    }
}
class DelegateBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "hb" /* listenerBinding */;
        this.preventDefault = false;
        this.strategy = DelegationStrategy.bubbling;
    }
}
class CaptureBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
        this.type = "hb" /* listenerBinding */;
        this.preventDefault = false;
        this.strategy = DelegationStrategy.capturing;
    }
}
class SetAttributeInstruction {
    constructor(value, to) {
        this.value = value;
        this.to = to;
        this.type = "he" /* setAttribute */;
    }
}
class SetClassAttributeInstruction {
    constructor(value) {
        this.value = value;
        this.type = "hf" /* setClassAttribute */;
    }
}
class SetStyleAttributeInstruction {
    constructor(value) {
        this.value = value;
        this.type = "hg" /* setStyleAttribute */;
    }
}
class AttributeBindingInstruction {
    constructor(
    /**
     * `attr` and `to` have the same value on a normal attribute
     * Will be different on `class` and `style`
     * on `class`: attr = `class` (from binding command), to = attribute name
     * on `style`: attr = `style` (from binding command), to = attribute name
     */
    attr, from, to) {
        this.attr = attr;
        this.from = from;
        this.to = to;
        this.type = "hc" /* attributeBinding */;
    }
}

function createElement(dom, tagOrType, props, children) {
    if (typeof tagOrType === 'string') {
        return createElementForTag(dom, tagOrType, props, children);
    }
    else if (CustomElement.isType(tagOrType)) {
        return createElementForType(dom, tagOrType, props, children);
    }
    else {
        throw new Error(`Invalid tagOrType.`);
    }
}
/**
 * RenderPlan. Todo: describe goal of this class
 */
class RenderPlan {
    constructor(dom, node, instructions, dependencies) {
        this.dom = dom;
        this.node = node;
        this.instructions = instructions;
        this.dependencies = dependencies;
        this.lazyDefinition = void 0;
    }
    get definition() {
        if (this.lazyDefinition === void 0) {
            this.lazyDefinition = CustomElementDefinition.create({
                name: CustomElement.generateName(),
                template: this.node,
                needsCompile: typeof this.node === 'string',
                instructions: this.instructions,
                dependencies: this.dependencies,
            });
        }
        return this.lazyDefinition;
    }
    getContext(parentContainer) {
        return getRenderContext(this.definition, parentContainer, void 0);
    }
    createView(parentContainer) {
        return this.getViewFactory(parentContainer).create();
    }
    getViewFactory(parentContainer) {
        return this.getContext(parentContainer).getViewFactory();
    }
    /** @internal */
    mergeInto(parent, instructions, dependencies) {
        this.dom.appendChild(parent, this.node);
        instructions.push(...this.instructions);
        dependencies.push(...this.dependencies);
    }
}
function createElementForTag(dom, tagName, props, children) {
    const instructions = [];
    const allInstructions = [];
    const dependencies = [];
    const element = dom.createElement(tagName);
    let hasInstructions = false;
    if (props) {
        Object.keys(props)
            .forEach(to => {
            const value = props[to];
            if (isHTMLTargetedInstruction(value)) {
                hasInstructions = true;
                instructions.push(value);
            }
            else {
                dom.setAttribute(element, to, value);
            }
        });
    }
    if (hasInstructions) {
        dom.makeTarget(element);
        allInstructions.push(instructions);
    }
    if (children) {
        addChildren(dom, element, children, allInstructions, dependencies);
    }
    return new RenderPlan(dom, element, allInstructions, dependencies);
}
function createElementForType(dom, Type, props, children) {
    const definition = CustomElement.getDefinition(Type);
    const tagName = definition.name;
    const instructions = [];
    const allInstructions = [instructions];
    const dependencies = [];
    const childInstructions = [];
    const bindables = definition.bindables;
    const element = dom.createElement(tagName);
    dom.makeTarget(element);
    if (!dependencies.includes(Type)) {
        dependencies.push(Type);
    }
    instructions.push(new HydrateElementInstruction(tagName, childInstructions));
    if (props) {
        Object.keys(props)
            .forEach(to => {
            const value = props[to];
            if (isHTMLTargetedInstruction(value)) {
                childInstructions.push(value);
            }
            else {
                const bindable = bindables[to];
                if (bindable !== void 0) {
                    childInstructions.push({
                        type: "re" /* setProperty */,
                        to,
                        value
                    });
                }
                else {
                    childInstructions.push(new SetAttributeInstruction(value, to));
                }
            }
        });
    }
    if (children) {
        addChildren(dom, element, children, allInstructions, dependencies);
    }
    return new RenderPlan(dom, element, allInstructions, dependencies);
}
function addChildren(dom, parent, children, allInstructions, dependencies) {
    for (let i = 0, ii = children.length; i < ii; ++i) {
        const current = children[i];
        switch (typeof current) {
            case 'string':
                dom.appendChild(parent, dom.createTextNode(current));
                break;
            case 'object':
                if (dom.isNodeInstance(current)) {
                    dom.appendChild(parent, current);
                }
                else if ('mergeInto' in current) {
                    current.mergeInto(parent, allInstructions, dependencies);
                }
        }
    }
}

var __decorate$L = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$H = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$k = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const bindables = ['subject', 'composing'];
let Compose = class Compose {
    constructor(dom, instruction) {
        this.dom = dom;
        this.id = nextId('au$component');
        this.subject = void 0;
        this.composing = false;
        this.view = void 0;
        this.task = LifecycleTask.done;
        this.lastSubject = void 0;
        this.properties = instruction.instructions
            .filter((x) => !bindables.includes(x.to))
            .reduce((acc, item) => {
            if (item.to) {
                acc[item.to] = item;
            }
            return acc;
        }, {});
    }
    beforeBind(flags) {
        if (this.task.done) {
            this.task = this.compose(this.subject, flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.compose, this, this.subject, flags);
        }
        if (this.task.done) {
            this.task = this.bindView(flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.bindView, this, flags);
        }
        return this.task;
    }
    beforeAttach(flags) {
        if (this.task.done) {
            this.attachView(flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.attachView, this, flags);
        }
    }
    beforeDetach(flags) {
        if (this.view != void 0) {
            if (this.task.done) {
                this.view.detach(flags);
            }
            else {
                this.task = new ContinuationTask(this.task, this.view.detach, this.view, flags);
            }
        }
    }
    beforeUnbind(flags) {
        this.lastSubject = void 0;
        if (this.view != void 0) {
            if (this.task.done) {
                this.task = this.view.unbind(flags);
            }
            else {
                this.task = new ContinuationTask(this.task, this.view.unbind, this.view, flags);
            }
        }
        return this.task;
    }
    caching(flags) {
        this.view = void 0;
    }
    subjectChanged(newValue, previousValue, flags) {
        flags |= this.$controller.flags;
        if (this.task.done) {
            this.task = this.compose(newValue, flags);
        }
        else {
            this.task = new ContinuationTask(this.task, this.compose, this, newValue, flags);
        }
    }
    compose(subject, flags) {
        if (this.lastSubject === subject) {
            return LifecycleTask.done;
        }
        this.lastSubject = subject;
        this.composing = true;
        let task = this.deactivate(flags);
        if (subject instanceof Promise) {
            let viewPromise;
            if (task.done) {
                viewPromise = subject.then(s => this.resolveView(s, flags));
            }
            else {
                viewPromise = task.wait().then(() => subject.then(s => this.resolveView(s, flags)));
            }
            task = new PromiseTask(viewPromise, this.activate, this, flags);
        }
        else {
            const view = this.resolveView(subject, flags);
            if (task.done) {
                task = this.activate(view, flags);
            }
            else {
                task = new ContinuationTask(task, this.activate, this, view, flags);
            }
        }
        if (task.done) {
            this.onComposed();
        }
        else {
            task = new ContinuationTask(task, this.onComposed, this);
        }
        return task;
    }
    deactivate(flags) {
        const view = this.view;
        if (view == void 0) {
            return LifecycleTask.done;
        }
        view.detach(flags);
        return view.unbind(flags);
    }
    activate(view, flags) {
        this.view = view;
        if (view == void 0) {
            return LifecycleTask.done;
        }
        let task = this.bindView(flags);
        if (task.done) {
            this.attachView(flags);
        }
        else {
            task = new ContinuationTask(task, this.attachView, this, flags);
        }
        return task;
    }
    bindView(flags) {
        if (this.view != void 0 && (this.$controller.state & (5 /* isBoundOrBinding */)) > 0) {
            return this.view.bind(flags, this.$controller.scope, this.$controller.part);
        }
        return LifecycleTask.done;
    }
    attachView(flags) {
        if (this.view != void 0 && (this.$controller.state & (40 /* isAttachedOrAttaching */)) > 0) {
            this.view.attach(flags);
        }
    }
    onComposed() {
        this.composing = false;
    }
    resolveView(subject, flags) {
        const view = this.provideViewFor(subject, flags);
        if (view) {
            view.hold(this.$controller.projector.host, 1 /* insertBefore */);
            view.lockScope(this.$controller.scope);
            return view;
        }
        return void 0;
    }
    provideViewFor(subject, flags) {
        if (!subject) {
            return void 0;
        }
        if (isController(subject)) { // IController
            return subject;
        }
        if ('createView' in subject) { // RenderPlan
            return subject.createView(this.$controller.context);
        }
        if ('create' in subject) { // IViewFactory
            return subject.create(flags);
        }
        if ('template' in subject) { // Raw Template Definition
            const definition = CustomElementDefinition.getOrCreate(subject);
            return getRenderContext(definition, this.$controller.context, void 0).getViewFactory().create(flags);
        }
        // Constructable (Custom Element Constructor)
        return createElement(this.dom, subject, this.properties, this.$controller.projector === void 0
            ? PLATFORM.emptyArray
            : this.$controller.projector.children).createView(this.$controller.context);
    }
};
__decorate$L([
    bindable,
    __metadata$H("design:type", Object)
], Compose.prototype, "subject", void 0);
__decorate$L([
    bindable({ mode: BindingMode.fromView }),
    __metadata$H("design:type", Boolean)
], Compose.prototype, "composing", void 0);
Compose = __decorate$L([
    customElement({ name: 'au-compose', template: null, containerless: true }),
    __param$k(0, IDOM),
    __param$k(1, ITargetedInstruction),
    __metadata$H("design:paramtypes", [Object, Object])
], Compose);
function isController(subject) {
    return 'lockScope' in subject;
}

var __decorate$M = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$I = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$l = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let TextBindingRenderer = 
/** @internal */
class TextBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const next = target.nextSibling;
        if (context.dom.isMarker(target)) {
            context.dom.remove(target);
        }
        let binding;
        const expr = ensureExpression(this.parser, instruction.from, 2048 /* Interpolation */);
        if (expr.isMulti) {
            binding = applyBindingBehavior(new MultiInterpolationBinding(this.observerLocator, expr, next, 'textContent', BindingMode.toView, context), expr, context);
        }
        else {
            binding = applyBindingBehavior(new InterpolationBinding(expr.firstExpression, expr, next, 'textContent', BindingMode.toView, this.observerLocator, context, true), expr, context);
        }
        controller.addBinding(binding);
    }
};
TextBindingRenderer = __decorate$M([
    instructionRenderer("ha" /* textBinding */)
    /** @internal */
    ,
    __param$l(0, IExpressionParser),
    __param$l(1, IObserverLocator),
    __metadata$I("design:paramtypes", [Object, Object])
], TextBindingRenderer);
let ListenerBindingRenderer = 
/** @internal */
class ListenerBindingRenderer {
    constructor(parser, eventManager) {
        this.parser = parser;
        this.eventManager = eventManager;
    }
    render(flags, context, controller, target, instruction) {
        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
        const expr = ensureExpression(this.parser, instruction.from, 80 /* IsEventCommand */ | (instruction.strategy + 6 /* DelegationStrategyDelta */));
        const binding = applyBindingBehavior(new Listener(context.dom, instruction.to, instruction.strategy, expr, target, instruction.preventDefault, this.eventManager, context), expr, context);
        controller.addBinding(binding);
    }
};
ListenerBindingRenderer = __decorate$M([
    instructionRenderer("hb" /* listenerBinding */)
    /** @internal */
    ,
    __param$l(0, IExpressionParser),
    __param$l(1, IEventManager),
    __metadata$I("design:paramtypes", [Object, Object])
], ListenerBindingRenderer);
let SetAttributeRenderer = 
/** @internal */
class SetAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        target.setAttribute(instruction.to, instruction.value);
    }
};
SetAttributeRenderer = __decorate$M([
    instructionRenderer("he" /* setAttribute */)
    /** @internal */
], SetAttributeRenderer);
let SetClassAttributeRenderer = class SetClassAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        addClasses(target.classList, instruction.value);
    }
};
SetClassAttributeRenderer = __decorate$M([
    instructionRenderer("hf" /* setClassAttribute */)
], SetClassAttributeRenderer);
let SetStyleAttributeRenderer = class SetStyleAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        target.style.cssText += instruction.value;
    }
};
SetStyleAttributeRenderer = __decorate$M([
    instructionRenderer("hg" /* setStyleAttribute */)
], SetStyleAttributeRenderer);
let StylePropertyBindingRenderer = 
/** @internal */
class StylePropertyBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 48 /* IsPropertyCommand */ | BindingMode.toView);
        const binding = applyBindingBehavior(new PropertyBinding(expr, target.style, instruction.to, BindingMode.toView, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
StylePropertyBindingRenderer = __decorate$M([
    instructionRenderer("hd" /* stylePropertyBinding */)
    /** @internal */
    ,
    __param$l(0, IExpressionParser),
    __param$l(1, IObserverLocator),
    __metadata$I("design:paramtypes", [Object, Object])
], StylePropertyBindingRenderer);
let AttributeBindingRenderer = 
/** @internal */
class AttributeBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 48 /* IsPropertyCommand */ | BindingMode.toView);
        const binding = applyBindingBehavior(new AttributeBinding(expr, target, instruction.attr /* targetAttribute */, instruction.to /* targetKey */, BindingMode.toView, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
AttributeBindingRenderer = __decorate$M([
    instructionRenderer("hc" /* attributeBinding */)
    /** @internal */
    ,
    __param$l(0, IExpressionParser),
    __param$l(1, IObserverLocator),
    __metadata$I("design:paramtypes", [Object, Object])
], AttributeBindingRenderer);
// http://jsben.ch/7n5Kt
function addClasses(classList, className) {
    const len = className.length;
    let start = 0;
    for (let i = 0; i < len; ++i) {
        if (className.charCodeAt(i) === 0x20) {
            if (i !== start) {
                classList.add(className.slice(start, i));
            }
            start = i + 1;
        }
        else if (i + 1 === len) {
            classList.add(className.slice(start));
        }
    }
}

const IProjectorLocatorRegistration = HTMLProjectorLocator;
const ITargetAccessorLocatorRegistration = TargetAccessorLocator;
const ITargetObserverLocatorRegistration = TargetObserverLocator;
/**
 * Default HTML-specific (but environment-agnostic) implementations for the following interfaces:
 * - `IProjectorLocator`
 * - `ITargetAccessorLocator`
 * - `ITargetObserverLocator`
 * - `ITemplateFactory`
 */
const DefaultComponents$2 = [
    IProjectorLocatorRegistration,
    ITargetAccessorLocatorRegistration,
    ITargetObserverLocatorRegistration,
];
const AttrBindingBehaviorRegistration = AttrBindingBehavior;
const SelfBindingBehaviorRegistration = SelfBindingBehavior;
const UpdateTriggerBindingBehaviorRegistration = UpdateTriggerBindingBehavior;
const ComposeRegistration = Compose;
const PortalRegistration = Portal;
const FocusRegistration = Focus;
const BlurRegistration = Blur;
/**
 * Default HTML-specific (but environment-agnostic) resources:
 * - Binding Behaviors: `attr`, `self`, `updateTrigger`
 * - Custom Elements: `au-compose`
 * - Custom Attributes: `blur`, `focus`, `portal`
 */
const DefaultResources$1 = [
    AttrBindingBehaviorRegistration,
    SelfBindingBehaviorRegistration,
    UpdateTriggerBindingBehaviorRegistration,
    ComposeRegistration,
    PortalRegistration,
    FocusRegistration,
    BlurRegistration
];
const ListenerBindingRendererRegistration = ListenerBindingRenderer;
const AttributeBindingRendererRegistration = AttributeBindingRenderer;
const SetAttributeRendererRegistration = SetAttributeRenderer;
const SetClassAttributeRendererRegistration = SetClassAttributeRenderer;
const SetStyleAttributeRendererRegistration = SetStyleAttributeRenderer;
const StylePropertyBindingRendererRegistration = StylePropertyBindingRenderer;
const TextBindingRendererRegistration = TextBindingRenderer;
/**
 * Default HTML-specfic (but environment-agnostic) renderers for:
 * - Listener Bindings: `trigger`, `capture`, `delegate`
 * - SetAttribute
 * - StyleProperty: `style`, `css`
 * - TextBinding: `${}`
 */
const DefaultRenderers$1 = [
    ListenerBindingRendererRegistration,
    AttributeBindingRendererRegistration,
    SetAttributeRendererRegistration,
    SetClassAttributeRendererRegistration,
    SetStyleAttributeRendererRegistration,
    StylePropertyBindingRendererRegistration,
    TextBindingRendererRegistration
];
/**
 * A DI configuration object containing html-specific (but environment-agnostic) registrations:
 * - `RuntimeConfiguration` from `@aurelia/runtime`
 * - `DefaultComponents`
 * - `DefaultResources`
 * - `DefaultRenderers`
 */
const RuntimeHtmlConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        return RuntimeConfiguration
            .register(container)
            .register(...DefaultComponents$2, ...DefaultResources$1, ...DefaultRenderers$1);
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(DI.createContainer());
    }
};

var __decorate$N = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$J = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$m = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
function shadowCSS(...css) {
    return new ShadowDOMRegistry(css);
}
const factoryCache = new WeakMap();
const IShadowDOMStyleFactory = DI.createInterface('IShadowDOMStyleFactory')
    .withDefault(x => x.callback((handler, requestor, resolver) => {
    let factory = factoryCache.get(resolver);
    if (factory === void 0) {
        factoryCache.set(resolver, factory = ShadowDOMRegistry.createStyleFactory(handler));
    }
    return factory;
}));
class ShadowDOMRegistry {
    constructor(css) {
        this.css = css;
    }
    register(container) {
        const sharedStyles = container.get(IShadowDOMGlobalStyles);
        const factory = container.get(IShadowDOMStyleFactory);
        container.register(Registration.instance(IShadowDOMStyles, factory.createStyles(this.css, sharedStyles)));
    }
    static createStyleFactory(container) {
        if (AdoptedStyleSheetsStyles.supported(container.get(HTMLDOM))) {
            return container.get(AdoptedStyleSheetsStylesFactory);
        }
        return container.get(StyleElementStylesFactory);
    }
}
let AdoptedStyleSheetsStylesFactory = class AdoptedStyleSheetsStylesFactory {
    constructor(dom) {
        this.dom = dom;
        this.cache = new Map();
    }
    createStyles(localStyles, sharedStyles) {
        return new AdoptedStyleSheetsStyles(this.dom, localStyles, this.cache, sharedStyles);
    }
};
AdoptedStyleSheetsStylesFactory = __decorate$N([
    __param$m(0, IDOM),
    __metadata$J("design:paramtypes", [HTMLDOM])
], AdoptedStyleSheetsStylesFactory);
let StyleElementStylesFactory = class StyleElementStylesFactory {
    constructor(dom) {
        this.dom = dom;
    }
    createStyles(localStyles, sharedStyles) {
        if (localStyles.some(x => typeof x !== 'string')) {
            // TODO: use reporter
            throw new Error('Shadow DOM CSS must be a string.');
        }
        return new StyleElementStyles(this.dom, localStyles, sharedStyles);
    }
};
StyleElementStylesFactory = __decorate$N([
    __param$m(0, IDOM),
    __metadata$J("design:paramtypes", [HTMLDOM])
], StyleElementStylesFactory);

const StyleConfiguration = {
    shadowDOM(config) {
        return StartTask.with(IContainer).beforeCreate().call(container => {
            if (config.sharedStyles) {
                const factory = container.get(IShadowDOMStyleFactory);
                container.register(Registration.instance(IShadowDOMGlobalStyles, factory.createStyles(config.sharedStyles, null)));
            }
        });
    }
};

var __decorate$O = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$K = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$n = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
function cssModules(...cssModules) {
    return new CSSModulesProcessorRegistry(cssModules);
}
class CSSModulesProcessorRegistry {
    constructor(cssModules) {
        this.cssModules = cssModules;
    }
    register(container) {
        const classLookup = Object.assign({}, ...this.cssModules);
        let ClassCustomAttribute = class ClassCustomAttribute {
            constructor(element /* TODO(fkleuver): fix this type annotation reflection issue in AOT */) {
                this.element = element;
            }
            beforeBind() {
                this.valueChanged();
            }
            valueChanged() {
                if (!this.value) {
                    this.element.className = '';
                    return;
                }
                this.element.className = getClassesToAdd(this.value)
                    .map(x => classLookup[x] || x)
                    .join(' ');
            }
        };
        __decorate$O([
            bindable,
            __metadata$K("design:type", String)
        ], ClassCustomAttribute.prototype, "value", void 0);
        ClassCustomAttribute = __decorate$O([
            customAttribute('class'),
            __param$n(0, INode),
            __metadata$K("design:paramtypes", [Object])
        ], ClassCustomAttribute);
        container.register(ClassCustomAttribute);
    }
}

var __decorate$P = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Trigger binding command. Compile attr with binding symbol with command `trigger` to `TriggerBindingInstruction`
 */
let TriggerBindingCommand = class TriggerBindingCommand {
    constructor() {
        this.bindingType = 4182 /* TriggerCommand */;
    }
    compile(binding) {
        return new TriggerBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
TriggerBindingCommand = __decorate$P([
    bindingCommand('trigger')
], TriggerBindingCommand);
/**
 * Delegate binding command. Compile attr with binding symbol with command `delegate` to `DelegateBindingInstruction`
 */
let DelegateBindingCommand = class DelegateBindingCommand {
    constructor() {
        this.bindingType = 4184 /* DelegateCommand */;
    }
    compile(binding) {
        return new DelegateBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
DelegateBindingCommand = __decorate$P([
    bindingCommand('delegate')
], DelegateBindingCommand);
/**
 * Capture binding command. Compile attr with binding symbol with command `capture` to `CaptureBindingInstruction`
 */
let CaptureBindingCommand = class CaptureBindingCommand {
    constructor() {
        this.bindingType = 4183 /* CaptureCommand */;
    }
    compile(binding) {
        return new CaptureBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
CaptureBindingCommand = __decorate$P([
    bindingCommand('capture')
], CaptureBindingCommand);
/**
 * Attr binding command. Compile attr with binding symbol with command `attr` to `AttributeBindingInstruction`
 */
let AttrBindingCommand = class AttrBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */;
    }
    compile(binding) {
        const target = getTarget$1(binding, false);
        return new AttributeBindingInstruction(target, binding.expression, target);
    }
};
AttrBindingCommand = __decorate$P([
    bindingCommand('attr')
], AttrBindingCommand);
/**
 * Style binding command. Compile attr with binding symbol with command `style` to `AttributeBindingInstruction`
 */
let StyleBindingCommand = class StyleBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */;
    }
    compile(binding) {
        return new AttributeBindingInstruction('style', binding.expression, getTarget$1(binding, false));
    }
};
StyleBindingCommand = __decorate$P([
    bindingCommand('style')
], StyleBindingCommand);
/**
 * Class binding command. Compile attr with binding symbol with command `class` to `AttributeBindingInstruction`
 */
let ClassBindingCommand = class ClassBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */;
    }
    compile(binding) {
        return new AttributeBindingInstruction('class', binding.expression, getTarget$1(binding, false));
    }
};
ClassBindingCommand = __decorate$P([
    bindingCommand('class')
], ClassBindingCommand);
/**
 * Binding command to refer different targets (element, custom element/attribute view models, controller) afterAttach to an element
 */
let RefBindingCommand = class RefBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */ | 4096 /* IgnoreCustomAttr */;
    }
    compile(binding) {
        return new RefBindingInstruction(binding.expression, getTarget$1(binding, false));
    }
};
RefBindingCommand = __decorate$P([
    bindingCommand('ref')
], RefBindingCommand);

class HtmlAttrSyntaxTransformer {
    static register(container) {
        return Registration.singleton(IAttrSyntaxTransformer, this).register(container);
    }
    transform(node, attrSyntax) {
        if (attrSyntax.command === 'bind' && shouldDefaultToTwoWay(node, attrSyntax)) {
            attrSyntax.command = 'two-way';
        }
        attrSyntax.target = this.map(node.tagName, attrSyntax.target);
    }
    map(tagName, attr) {
        switch (tagName) {
            case 'LABEL':
                switch (attr) {
                    case 'for':
                        return 'htmlFor';
                    default:
                        return attr;
                }
            case 'IMG':
                switch (attr) {
                    case 'usemap':
                        return 'useMap';
                    default:
                        return attr;
                }
            case 'INPUT':
                switch (attr) {
                    case 'maxlength':
                        return 'maxLength';
                    case 'minlength':
                        return 'minLength';
                    case 'formaction':
                        return 'formAction';
                    case 'formenctype':
                        return 'formEncType';
                    case 'formmethod':
                        return 'formMethod';
                    case 'formnovalidate':
                        return 'formNoValidate';
                    case 'formtarget':
                        return 'formTarget';
                    case 'inputmode':
                        return 'inputMode';
                    default:
                        return attr;
                }
            case 'TEXTAREA':
                switch (attr) {
                    case 'maxlength':
                        return 'maxLength';
                    default:
                        return attr;
                }
            case 'TD':
            case 'TH':
                switch (attr) {
                    case 'rowspan':
                        return 'rowSpan';
                    case 'colspan':
                        return 'colSpan';
                    default:
                        return attr;
                }
            default:
                switch (attr) {
                    case 'accesskey':
                        return 'accessKey';
                    case 'contenteditable':
                        return 'contentEditable';
                    case 'tabindex':
                        return 'tabIndex';
                    case 'textcontent':
                        return 'textContent';
                    case 'innerhtml':
                        return 'innerHTML';
                    case 'scrolltop':
                        return 'scrollTop';
                    case 'scrollleft':
                        return 'scrollLeft';
                    case 'readonly':
                        return 'readOnly';
                    default:
                        return attr;
                }
        }
    }
}
function shouldDefaultToTwoWay(element, attr) {
    switch (element.tagName) {
        case 'INPUT':
            switch (element.type) {
                case 'checkbox':
                case 'radio':
                    return attr.target === 'checked';
                default:
                    return attr.target === 'value' || attr.target === 'files';
            }
        case 'TEXTAREA':
        case 'SELECT':
            return attr.target === 'value';
        default:
            switch (attr.target) {
                case 'textcontent':
                case 'innerhtml':
                    return element.hasAttribute('contenteditable');
                case 'scrolltop':
                case 'scrollleft':
                    return true;
                default:
                    return false;
            }
    }
}

const CustomElementSymbol$1 = CustomElementSymbol;
const LetElementSymbol$1 = LetElementSymbol;
const PlainElementSymbol$1 = PlainElementSymbol;
const ReplacePartSymbol$1 = ReplacePartSymbol;
const TemplateControllerSymbol$1 = TemplateControllerSymbol;
const TextSymbol$1 = TextSymbol;

/* eslint-disable compat/compat */
const invalidSurrogateAttribute = Object.assign(Object.create(null), {
    'id': true,
    'replace': true
});
const attributesToIgnore = Object.assign(Object.create(null), {
    'as-element': true,
    'replace': true
});
function hasInlineBindings(rawValue) {
    const len = rawValue.length;
    let ch = 0;
    for (let i = 0; i < len; ++i) {
        ch = rawValue.charCodeAt(i);
        if (ch === 92 /* Backslash */) {
            ++i;
            // Ignore whatever comes next because it's escaped
        }
        else if (ch === 58 /* Colon */) {
            return true;
        }
        else if (ch === 36 /* Dollar */ && rawValue.charCodeAt(i + 1) === 123 /* OpenBrace */) {
            return false;
        }
    }
    return false;
}
function processInterpolationText(symbol) {
    const node = symbol.physicalNode;
    const parentNode = node.parentNode;
    while (node.nextSibling !== null && node.nextSibling.nodeType === 3 /* Text */) {
        parentNode.removeChild(node.nextSibling);
    }
    node.textContent = '';
    parentNode.insertBefore(symbol.marker, node);
}
function isTemplateControllerOf(proxy, manifest) {
    return proxy !== manifest;
}
/**
 * A (temporary) standalone function that purely does the DOM processing (lifting) related to template controllers.
 * It's a first refactoring step towards separating DOM parsing/binding from mutations.
 */
function processTemplateControllers(dom, manifestProxy, manifest) {
    const manifestNode = manifest.physicalNode;
    let current = manifestProxy;
    let currentTemplate;
    while (isTemplateControllerOf(current, manifest)) {
        if (current.template === manifest) {
            // the DOM linkage is still in its original state here so we can safely assume the parentNode is non-null
            manifestNode.parentNode.replaceChild(current.marker, manifestNode);
            // if the manifest is a template element (e.g. <template repeat.for="...">) then we can skip one lift operation
            // and simply use the template directly, saving a bit of work
            if (manifestNode.nodeName === 'TEMPLATE') {
                current.physicalNode = manifestNode;
                // the template could safely stay without affecting anything visible, but let's keep the DOM tidy
                manifestNode.remove();
            }
            else {
                // the manifest is not a template element so we need to wrap it in one
                currentTemplate = current.physicalNode = dom.createTemplate();
                currentTemplate.content.appendChild(manifestNode);
            }
        }
        else {
            currentTemplate = current.physicalNode = dom.createTemplate();
            currentTemplate.content.appendChild(current.marker);
        }
        manifestNode.removeAttribute(current.syntax.rawName);
        current = current.template;
    }
}
function processReplacePart(dom, replacePart, manifestProxy) {
    let proxyNode;
    let currentTemplate;
    if ((manifestProxy.flags & 512 /* hasMarker */) > 0) {
        proxyNode = manifestProxy.marker;
    }
    else {
        proxyNode = manifestProxy.physicalNode;
    }
    if (proxyNode.nodeName === 'TEMPLATE') {
        // if it's a template element, no need to do anything special, just assign it to the replacePart
        replacePart.physicalNode = proxyNode;
    }
    else {
        // otherwise wrap the replace in a template
        currentTemplate = replacePart.physicalNode = dom.createTemplate();
        currentTemplate.content.appendChild(proxyNode);
    }
}
/**
 * TemplateBinder. Todo: describe goal of this class
 */
class TemplateBinder {
    constructor(dom, resources, attrParser, exprParser, attrSyntaxTransformer) {
        this.dom = dom;
        this.resources = resources;
        this.attrParser = attrParser;
        this.exprParser = exprParser;
        this.attrSyntaxTransformer = attrSyntaxTransformer;
    }
    bind(node) {
        const surrogate = new PlainElementSymbol$1(this.dom, node);
        const resources = this.resources;
        const attrSyntaxTransformer = this.attrSyntaxTransformer;
        const attributes = node.attributes;
        let i = 0;
        while (i < attributes.length) {
            const attr = attributes[i];
            const attrSyntax = this.attrParser.parse(attr.name, attr.value);
            if (invalidSurrogateAttribute[attrSyntax.target] === true) {
                throw new Error(`Invalid surrogate attribute: ${attrSyntax.target}`);
                // TODO: use reporter
            }
            const bindingCommand = resources.getBindingCommand(attrSyntax, true);
            if (bindingCommand === null || (bindingCommand.bindingType & 4096 /* IgnoreCustomAttr */) === 0) {
                const attrInfo = resources.getAttributeInfo(attrSyntax);
                if (attrInfo === null) {
                    // map special html attributes to their corresponding properties
                    attrSyntaxTransformer.transform(node, attrSyntax);
                    // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                    this.bindPlainAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attr       */ attr, 
                    /* surrogate  */ surrogate, 
                    /* manifest   */ surrogate);
                }
                else if (attrInfo.isTemplateController) {
                    throw new Error('Cannot have template controller on surrogate element.');
                    // TODO: use reporter
                }
                else {
                    this.bindCustomAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attrInfo   */ attrInfo, 
                    /* command    */ bindingCommand, 
                    /* manifest   */ surrogate);
                }
            }
            else {
                // map special html attributes to their corresponding properties
                attrSyntaxTransformer.transform(node, attrSyntax);
                // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                this.bindPlainAttribute(
                /* attrSyntax */ attrSyntax, 
                /* attr       */ attr, 
                /* surrogate  */ surrogate, 
                /* manifest   */ surrogate);
            }
            ++i;
        }
        this.bindChildNodes(
        /* node               */ node, 
        /* surrogate          */ surrogate, 
        /* manifest           */ surrogate, 
        /* manifestRoot       */ null, 
        /* parentManifestRoot */ null, 
        /* partName           */ null);
        return surrogate;
    }
    bindManifest(parentManifest, node, surrogate, manifest, manifestRoot, parentManifestRoot, partName) {
        switch (node.nodeName) {
            case 'LET':
                // let cannot have children and has some different processing rules, so return early
                this.bindLetElement(
                /* parentManifest */ parentManifest, 
                /* node           */ node);
                return;
            case 'SLOT':
                surrogate.hasSlots = true;
        }
        // get the part name to override the name of the compiled definition
        partName = node.getAttribute('replaceable');
        if (partName === '') {
            partName = 'default';
        }
        let name = node.getAttribute('as-element');
        if (name === null) {
            name = node.nodeName.toLowerCase();
        }
        const elementInfo = this.resources.getElementInfo(name);
        if (elementInfo === null) {
            // there is no registered custom element with this name
            manifest = new PlainElementSymbol$1(this.dom, node);
        }
        else {
            // it's a custom element so we set the manifestRoot as well (for storing replaces)
            parentManifestRoot = manifestRoot;
            manifestRoot = manifest = new CustomElementSymbol$1(this.dom, node, elementInfo);
        }
        // lifting operations done by template controllers and replaces effectively unlink the nodes, so start at the bottom
        this.bindChildNodes(
        /* node               */ node, 
        /* surrogate          */ surrogate, 
        /* manifest           */ manifest, 
        /* manifestRoot       */ manifestRoot, 
        /* parentManifestRoot */ parentManifestRoot, 
        /* partName           */ partName);
        // the parentManifest will receive either the direct child nodes, or the template controllers / replaces
        // wrapping them
        this.bindAttributes(
        /* node               */ node, 
        /* parentManifest     */ parentManifest, 
        /* surrogate          */ surrogate, 
        /* manifest           */ manifest, 
        /* manifestRoot       */ manifestRoot, 
        /* parentManifestRoot */ parentManifestRoot, 
        /* partName           */ partName);
        if (manifestRoot === manifest && manifest.isContainerless) {
            node.parentNode.replaceChild(manifest.marker, node);
        }
        else if (manifest.isTarget) {
            node.classList.add('au');
        }
    }
    bindLetElement(parentManifest, node) {
        const symbol = new LetElementSymbol$1(this.dom, node);
        parentManifest.childNodes.push(symbol);
        const attributes = node.attributes;
        let i = 0;
        while (i < attributes.length) {
            const attr = attributes[i];
            if (attr.name === 'to-binding-context') {
                node.removeAttribute('to-binding-context');
                symbol.toBindingContext = true;
                continue;
            }
            const attrSyntax = this.attrParser.parse(attr.name, attr.value);
            const command = this.resources.getBindingCommand(attrSyntax, false);
            const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
            const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);
            const to = camelCase(attrSyntax.target);
            const info = new BindableInfo(to, BindingMode.toView);
            symbol.bindings.push(new BindingSymbol(command, info, expr, attrSyntax.rawValue, to));
            ++i;
        }
        node.parentNode.replaceChild(symbol.marker, node);
    }
    bindAttributes(node, parentManifest, surrogate, manifest, manifestRoot, parentManifestRoot, partName) {
        // This is the top-level symbol for the current depth.
        // If there are no template controllers or replaces, it is always the manifest itself.
        // If there are template controllers, then this will be the outer-most TemplateControllerSymbol.
        let manifestProxy = manifest;
        let previousController = (void 0);
        let currentController = (void 0);
        const attributes = node.attributes;
        let i = 0;
        while (i < attributes.length) {
            const attr = attributes[i];
            ++i;
            if (attributesToIgnore[attr.name] === true) {
                continue;
            }
            const attrSyntax = this.attrParser.parse(attr.name, attr.value);
            const bindingCommand = this.resources.getBindingCommand(attrSyntax, true);
            if (bindingCommand === null || (bindingCommand.bindingType & 4096 /* IgnoreCustomAttr */) === 0) {
                const attrInfo = this.resources.getAttributeInfo(attrSyntax);
                if (attrInfo === null) {
                    // map special html attributes to their corresponding properties
                    this.attrSyntaxTransformer.transform(node, attrSyntax);
                    // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                    this.bindPlainAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attr       */ attr, 
                    /* surrogate  */ surrogate, 
                    /* manifest   */ manifest);
                }
                else if (attrInfo.isTemplateController) {
                    // the manifest is wrapped by the inner-most template controller (if there are multiple on the same element)
                    // so keep setting manifest.templateController to the latest template controller we find
                    currentController = manifest.templateController = this.declareTemplateController(
                    /* attrSyntax */ attrSyntax, 
                    /* attrInfo   */ attrInfo, 
                    /* partName   */ partName);
                    // the proxy and the manifest are only identical when we're at the first template controller (since the controller
                    // is assigned to the proxy), so this evaluates to true at most once per node
                    if (manifestProxy === manifest) {
                        currentController.template = manifest;
                        manifestProxy = currentController;
                    }
                    else {
                        currentController.templateController = previousController;
                        currentController.template = previousController.template;
                        previousController.template = currentController;
                    }
                    previousController = currentController;
                }
                else {
                    // a regular custom attribute
                    this.bindCustomAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attrInfo   */ attrInfo, 
                    /* command    */ bindingCommand, 
                    /* manifest   */ manifest);
                }
            }
            else {
                // map special html attributes to their corresponding properties
                this.attrSyntaxTransformer.transform(node, attrSyntax);
                // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                this.bindPlainAttribute(
                /* attrSyntax */ attrSyntax, 
                /* attr       */ attr, 
                /* surrogate  */ surrogate, 
                /* manifest   */ manifest);
            }
        }
        if (node.tagName === 'INPUT') {
            const type = node.type;
            if (type === 'checkbox' || type === 'radio') {
                this.ensureAttributeOrder(manifest);
            }
        }
        processTemplateControllers(this.dom, manifestProxy, manifest);
        let replace = node.getAttribute('replace');
        if (replace === '' || (replace === null && manifestRoot !== null && manifestRoot.isContainerless && ((parentManifest.flags & 16 /* isCustomElement */) > 0))) {
            replace = 'default';
        }
        const partOwner = manifest === manifestRoot ? parentManifestRoot : manifestRoot;
        if (replace === null || partOwner === null) {
            // the proxy is either the manifest itself or the outer-most controller; add it directly to the parent
            parentManifest.childNodes.push(manifestProxy);
        }
        else {
            // there is a replace attribute on this node, so add it to the parts collection of the manifestRoot
            // instead of to the childNodes
            const replacePart = new ReplacePartSymbol$1(replace);
            replacePart.parent = parentManifest;
            replacePart.template = manifestProxy;
            partOwner.parts.push(replacePart);
            if (parentManifest.templateController != null) {
                parentManifest.templateController.parts.push(replacePart);
            }
            processReplacePart(this.dom, replacePart, manifestProxy);
        }
    }
    // TODO: refactor to use render priority slots (this logic shouldn't be in the template binder)
    ensureAttributeOrder(manifest) {
        // swap the order of checked and model/value attribute, so that the required observers are prepared for checked-observer
        const attributes = manifest.plainAttributes;
        let modelOrValueIndex = void 0;
        let checkedIndex = void 0;
        let found = 0;
        for (let i = 0; i < attributes.length && found < 3; i++) {
            switch (attributes[i].syntax.target) {
                case 'model':
                case 'value':
                case 'matcher':
                    modelOrValueIndex = i;
                    found++;
                    break;
                case 'checked':
                    checkedIndex = i;
                    found++;
                    break;
            }
        }
        if (checkedIndex !== void 0 && modelOrValueIndex !== void 0 && checkedIndex < modelOrValueIndex) {
            [attributes[modelOrValueIndex], attributes[checkedIndex]] = [attributes[checkedIndex], attributes[modelOrValueIndex]];
        }
    }
    bindChildNodes(node, surrogate, manifest, manifestRoot, parentManifestRoot, partName) {
        let childNode;
        if (node.nodeName === 'TEMPLATE') {
            childNode = node.content.firstChild;
        }
        else {
            childNode = node.firstChild;
        }
        let nextChild;
        while (childNode !== null) {
            switch (childNode.nodeType) {
                case 1 /* Element */:
                    nextChild = childNode.nextSibling;
                    this.bindManifest(
                    /* parentManifest     */ manifest, 
                    /* node               */ childNode, 
                    /* surrogate          */ surrogate, 
                    /* manifest           */ manifest, 
                    /* manifestRoot       */ manifestRoot, 
                    /* parentManifestRoot */ parentManifestRoot, 
                    /* partName           */ partName);
                    childNode = nextChild;
                    break;
                case 3 /* Text */:
                    childNode = this.bindText(
                    /* textNode */ childNode, 
                    /* manifest */ manifest).nextSibling;
                    break;
                case 4 /* CDATASection */:
                case 7 /* ProcessingInstruction */:
                case 8 /* Comment */:
                case 10 /* DocumentType */:
                    childNode = childNode.nextSibling;
                    break;
                case 9 /* Document */:
                case 11 /* DocumentFragment */:
                    childNode = childNode.firstChild;
            }
        }
    }
    bindText(textNode, manifest) {
        const interpolation = this.exprParser.parse(textNode.wholeText, 2048 /* Interpolation */);
        if (interpolation !== null) {
            const symbol = new TextSymbol$1(this.dom, textNode, interpolation);
            manifest.childNodes.push(symbol);
            processInterpolationText(symbol);
        }
        let next = textNode;
        while (next.nextSibling !== null && next.nextSibling.nodeType === 3 /* Text */) {
            next = next.nextSibling;
        }
        return next;
    }
    declareTemplateController(attrSyntax, attrInfo, partName) {
        let symbol;
        const attrRawValue = attrSyntax.rawValue;
        const command = this.resources.getBindingCommand(attrSyntax, false);
        // multi-bindings logic here is similar to (and explained in) bindCustomAttribute
        const isMultiBindings = attrInfo.noMultiBindings === false && command === null && hasInlineBindings(attrRawValue);
        if (isMultiBindings) {
            symbol = new TemplateControllerSymbol$1(this.dom, attrSyntax, attrInfo, partName);
            this.bindMultiAttribute(symbol, attrInfo, attrRawValue);
        }
        else {
            symbol = new TemplateControllerSymbol$1(this.dom, attrSyntax, attrInfo, partName);
            const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
            const expr = this.exprParser.parse(attrRawValue, bindingType);
            symbol.bindings.push(new BindingSymbol(command, attrInfo.bindable, expr, attrRawValue, attrSyntax.target));
        }
        return symbol;
    }
    bindCustomAttribute(attrSyntax, attrInfo, command, manifest) {
        let symbol;
        const attrRawValue = attrSyntax.rawValue;
        // Custom attributes are always in multiple binding mode,
        // except when they can't be
        // When they cannot be:
        //        * has explicit configuration noMultiBindings: false
        //        * has binding command, ie: <div my-attr.bind="...">.
        //          In this scenario, the value of the custom attributes is required to be a valid expression
        //        * has no colon: ie: <div my-attr="abcd">
        //          In this scenario, it's simply invalid syntax. Consider style attribute rule-value pair: <div style="rule: ruleValue">
        const isMultiBindings = attrInfo.noMultiBindings === false && command === null && hasInlineBindings(attrRawValue);
        if (isMultiBindings) {
            // a multiple-bindings attribute usage (semicolon separated binding) is only valid without a binding command;
            // the binding commands must be declared in each of the property bindings
            symbol = new CustomAttributeSymbol(attrSyntax, attrInfo);
            this.bindMultiAttribute(symbol, attrInfo, attrRawValue);
        }
        else {
            symbol = new CustomAttributeSymbol(attrSyntax, attrInfo);
            const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
            const expr = this.exprParser.parse(attrRawValue, bindingType);
            symbol.bindings.push(new BindingSymbol(command, attrInfo.bindable, expr, attrRawValue, attrSyntax.target));
        }
        manifest.customAttributes.push(symbol);
        manifest.isTarget = true;
    }
    bindMultiAttribute(symbol, attrInfo, value) {
        const bindables = attrInfo.bindables;
        const valueLength = value.length;
        let attrName = void 0;
        let attrValue = void 0;
        let start = 0;
        let ch = 0;
        for (let i = 0; i < valueLength; ++i) {
            ch = value.charCodeAt(i);
            if (ch === 92 /* Backslash */) {
                ++i;
                // Ignore whatever comes next because it's escaped
            }
            else if (ch === 58 /* Colon */) {
                attrName = value.slice(start, i);
                // Skip whitespace after colon
                while (value.charCodeAt(++i) <= 32 /* Space */)
                    ;
                start = i;
                for (; i < valueLength; ++i) {
                    ch = value.charCodeAt(i);
                    if (ch === 92 /* Backslash */) {
                        ++i;
                        // Ignore whatever comes next because it's escaped
                    }
                    else if (ch === 59 /* Semicolon */) {
                        attrValue = value.slice(start, i);
                        break;
                    }
                }
                if (attrValue === void 0) {
                    // No semicolon found, so just grab the rest of the value
                    attrValue = value.slice(start);
                }
                const attrSyntax = this.attrParser.parse(attrName, attrValue);
                const attrTarget = camelCase(attrSyntax.target);
                const command = this.resources.getBindingCommand(attrSyntax, false);
                const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
                const expr = this.exprParser.parse(attrValue, bindingType);
                let bindable = bindables[attrTarget];
                if (bindable === undefined) {
                    // everything in a multi-bindings expression must be used,
                    // so if it's not a bindable then we create one on the spot
                    bindable = bindables[attrTarget] = new BindableInfo(attrTarget, BindingMode.toView);
                }
                symbol.bindings.push(new BindingSymbol(command, bindable, expr, attrValue, attrTarget));
                // Skip whitespace after semicolon
                while (i < valueLength && value.charCodeAt(++i) <= 32 /* Space */)
                    ;
                start = i;
                attrName = void 0;
                attrValue = void 0;
            }
        }
    }
    bindPlainAttribute(attrSyntax, attr, surrogate, manifest) {
        const command = this.resources.getBindingCommand(attrSyntax, false);
        const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
        const attrTarget = attrSyntax.target;
        const attrRawValue = attrSyntax.rawValue;
        let expr;
        if (attrRawValue.length === 0
            && (bindingType & 53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */ | 52 /* TwoWayCommand */) > 0) {
            if ((bindingType & 53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */ | 52 /* TwoWayCommand */) > 0) {
                // Default to the name of the attr for empty binding commands
                expr = this.exprParser.parse(camelCase(attrTarget), bindingType);
            }
            else {
                return;
            }
        }
        else {
            expr = this.exprParser.parse(attrRawValue, bindingType);
        }
        if ((manifest.flags & 16 /* isCustomElement */) > 0) {
            const bindable = manifest.bindables[attrTarget];
            if (bindable != null) {
                // if the attribute name matches a bindable property name, add it regardless of whether it's a command, interpolation, or just a plain string;
                // the template compiler will translate it to the correct instruction
                manifest.bindings.push(new BindingSymbol(command, bindable, expr, attrRawValue, attrTarget));
                manifest.isTarget = true;
            }
            else if (expr != null) {
                // if it does not map to a bindable, only add it if we were able to parse an expression (either a command or interpolation)
                manifest.plainAttributes.push(new PlainAttributeSymbol(attrSyntax, command, expr));
                manifest.isTarget = true;
            }
        }
        else if (expr != null) {
            // either a binding command, an interpolation, or a ref
            manifest.plainAttributes.push(new PlainAttributeSymbol(attrSyntax, command, expr));
            manifest.isTarget = true;
        }
        else if (manifest === surrogate) {
            // any attributes, even if they are plain (no command/interpolation etc), should be added if they
            // are on the surrogate element
            manifest.plainAttributes.push(new PlainAttributeSymbol(attrSyntax, command, expr));
        }
        if (command == null && expr != null) {
            // if it's an interpolation, clear the attribute value
            attr.value = '';
        }
    }
}

var __decorate$Q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$L = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$o = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
// For some reason rollup complains about `DI.createInterface<ITemplateElementFactory>().noDefault()` with this message:
// "semantic error TS2742 The inferred type of 'ITemplateElementFactory' cannot be named without a reference to '@aurelia/jit/node_modules/@aurelia/kernel'. This is likely not portable. A type annotation is necessary"
// So.. investigate why that happens (or rather, why it *only* happens here and not for the other 50)
const ITemplateElementFactory = DI.createInterface('ITemplateElementFactory').noDefault();
const markupCache = {};
/**
 * Default implementation for `ITemplateFactory` for use in an HTML based runtime.
 *
 * @internal
 */
let HTMLTemplateElementFactory = class HTMLTemplateElementFactory {
    constructor(dom) {
        this.dom = dom;
        this.template = dom.createTemplate();
    }
    static register(container) {
        return Registration.singleton(ITemplateElementFactory, this).register(container);
    }
    createTemplate(input) {
        if (typeof input === 'string') {
            let result = markupCache[input];
            if (result === void 0) {
                const template = this.template;
                template.innerHTML = input;
                const node = template.content.firstElementChild;
                // if the input is either not wrapped in a template or there is more than one node,
                // return the whole template that wraps it/them (and create a new one for the next input)
                if (node == null || node.nodeName !== 'TEMPLATE' || node.nextElementSibling != null) {
                    this.template = this.dom.createTemplate();
                    result = template;
                }
                else {
                    // the node to return is both a template and the only node, so return just the node
                    // and clean up the template for the next input
                    template.content.removeChild(node);
                    result = node;
                }
                markupCache[input] = result;
            }
            return result.cloneNode(true);
        }
        if (input.nodeName !== 'TEMPLATE') {
            // if we get one node that is not a template, wrap it in one
            const template = this.dom.createTemplate();
            template.content.appendChild(input);
            return template;
        }
        // we got a template element, remove it from the DOM if it's present there and don't
        // do any other processing
        if (input.parentNode != null) {
            input.parentNode.removeChild(input);
        }
        return input;
    }
};
HTMLTemplateElementFactory = __decorate$Q([
    __param$o(0, IDOM),
    __metadata$L("design:paramtypes", [Object])
], HTMLTemplateElementFactory);

var __decorate$R = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$M = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$p = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
class CustomElementCompilationUnit {
    constructor(partialDefinition, surrogate, template) {
        this.partialDefinition = partialDefinition;
        this.surrogate = surrogate;
        this.template = template;
        this.instructions = [];
        this.surrogates = [];
        this.scopeParts = [];
        this.parts = {};
    }
    toDefinition() {
        const def = this.partialDefinition;
        return CustomElementDefinition.create({
            ...def,
            instructions: mergeArrays(def.instructions, this.instructions),
            surrogates: mergeArrays(def.surrogates, this.surrogates),
            scopeParts: mergeArrays(def.scopeParts, this.scopeParts),
            template: this.template,
            needsCompile: false,
            hasSlots: this.surrogate.hasSlots,
        });
    }
}
/**
 * Default (runtime-agnostic) implementation for `ITemplateCompiler`.
 *
 * @internal
 */
let TemplateCompiler = class TemplateCompiler {
    constructor(factory, attrParser, exprParser, attrSyntaxModifier) {
        this.factory = factory;
        this.attrParser = attrParser;
        this.exprParser = exprParser;
        this.attrSyntaxModifier = attrSyntaxModifier;
    }
    get name() {
        return 'default';
    }
    static register(container) {
        return Registration.singleton(ITemplateCompiler, this).register(container);
    }
    compile(partialDefinition, context) {
        const definition = CustomElementDefinition.getOrCreate(partialDefinition);
        if (definition.template === null || definition.template === void 0) {
            return definition;
        }
        const resources = ResourceModel.getOrCreate(context);
        const { attrParser, exprParser, attrSyntaxModifier, factory } = this;
        const binder = new TemplateBinder(context.get(IDOM), resources, attrParser, exprParser, attrSyntaxModifier);
        const template = factory.createTemplate(definition.template);
        const surrogate = binder.bind(template);
        const compilation = this.compilation = new CustomElementCompilationUnit(definition, surrogate, template);
        const customAttributes = surrogate.customAttributes;
        const plainAttributes = surrogate.plainAttributes;
        const customAttributeLength = customAttributes.length;
        const plainAttributeLength = plainAttributes.length;
        if (customAttributeLength + plainAttributeLength > 0) {
            let offset = 0;
            for (let i = 0; customAttributeLength > i; ++i) {
                compilation.surrogates[offset] = this.compileCustomAttribute(customAttributes[i]);
                offset++;
            }
            for (let i = 0; i < plainAttributeLength; ++i) {
                compilation.surrogates[offset] = this.compilePlainAttribute(plainAttributes[i], true);
                offset++;
            }
        }
        this.compileChildNodes(surrogate, compilation.instructions, compilation.scopeParts);
        const compiledDefinition = compilation.toDefinition();
        this.compilation = null;
        return compiledDefinition;
    }
    compileChildNodes(parent, instructionRows, scopeParts) {
        if ((parent.flags & 8192 /* hasChildNodes */) > 0) {
            const childNodes = parent.childNodes;
            const ii = childNodes.length;
            let childNode;
            for (let i = 0; i < ii; ++i) {
                childNode = childNodes[i];
                if ((childNode.flags & 128 /* isText */) > 0) {
                    instructionRows.push([new TextBindingInstruction(childNode.interpolation)]);
                }
                else if ((childNode.flags & 32 /* isLetElement */) > 0) {
                    const bindings = childNode.bindings;
                    const instructions = [];
                    let binding;
                    const jj = bindings.length;
                    for (let j = 0; j < jj; ++j) {
                        binding = bindings[j];
                        instructions[j] = new LetBindingInstruction(binding.expression, binding.target);
                    }
                    instructionRows.push([new LetElementInstruction(instructions, childNode.toBindingContext)]);
                }
                else {
                    this.compileParentNode(childNode, instructionRows, scopeParts);
                }
            }
        }
    }
    compileCustomElement(symbol, instructionRows, scopeParts) {
        // offset 1 to leave a spot for the hydrate instruction so we don't need to create 2 arrays with a spread etc
        const instructionRow = this.compileAttributes(symbol, 1);
        instructionRow[0] = new HydrateElementInstruction(symbol.res, this.compileBindings(symbol), this.compileParts(symbol, scopeParts));
        instructionRows.push(instructionRow);
        this.compileChildNodes(symbol, instructionRows, scopeParts);
    }
    compilePlainElement(symbol, instructionRows, scopeParts) {
        const attributes = this.compileAttributes(symbol, 0);
        if (attributes.length > 0) {
            instructionRows.push(attributes);
        }
        this.compileChildNodes(symbol, instructionRows, scopeParts);
    }
    compileParentNode(symbol, instructionRows, scopeParts) {
        switch (symbol.flags & 511 /* type */) {
            case 16 /* isCustomElement */:
                this.compileCustomElement(symbol, instructionRows, scopeParts);
                break;
            case 64 /* isPlainElement */:
                this.compilePlainElement(symbol, instructionRows, scopeParts);
                break;
            case 1 /* isTemplateController */:
                this.compileTemplateController(symbol, instructionRows, scopeParts);
        }
    }
    compileTemplateController(symbol, instructionRows, scopeParts) {
        const bindings = this.compileBindings(symbol);
        const controllerInstructionRows = [];
        const controllerScopeParts = [];
        this.compileParentNode(symbol.template, controllerInstructionRows, controllerScopeParts);
        mergeDistinct(scopeParts, controllerScopeParts, false);
        const def = CustomElementDefinition.create({
            name: symbol.partName === null ? symbol.res : symbol.partName,
            scopeParts: controllerScopeParts,
            template: symbol.physicalNode,
            instructions: controllerInstructionRows,
            needsCompile: false,
        });
        let parts = void 0;
        if ((symbol.flags & 16384 /* hasParts */) > 0) {
            parts = {};
            for (const part of symbol.parts) {
                parts[part.name] = this.compilation.parts[part.name];
            }
        }
        instructionRows.push([new HydrateTemplateController(def, symbol.res, bindings, symbol.res === 'else', parts)]);
    }
    compileBindings(symbol) {
        let bindingInstructions;
        if ((symbol.flags & 4096 /* hasBindings */) > 0) {
            // either a custom element with bindings, a custom attribute / template controller with dynamic options,
            // or a single value custom attribute binding
            const { bindings } = symbol;
            const len = bindings.length;
            bindingInstructions = Array(len);
            let i = 0;
            for (; i < len; ++i) {
                bindingInstructions[i] = this.compileBinding(bindings[i]);
            }
        }
        else {
            bindingInstructions = PLATFORM.emptyArray;
        }
        return bindingInstructions;
    }
    compileBinding(symbol) {
        if (symbol.command === null) {
            // either an interpolation or a normal string value assigned to an element or attribute binding
            if (symbol.expression === null) {
                // the template binder already filtered out non-bindables, so we know we need a setProperty here
                return new SetPropertyInstruction(symbol.rawValue, symbol.bindable.propName);
            }
            else {
                // either an element binding interpolation or a dynamic options attribute binding interpolation
                return new InterpolationInstruction(symbol.expression, symbol.bindable.propName);
            }
        }
        else {
            // either an element binding command, dynamic options attribute binding command,
            // or custom attribute / template controller (single value) binding command
            return symbol.command.compile(symbol);
        }
    }
    compileAttributes(symbol, offset) {
        let attributeInstructions;
        if ((symbol.flags & 2048 /* hasAttributes */) > 0) {
            // any attributes on a custom element (which are not bindables) or a plain element
            const customAttributes = symbol.customAttributes;
            const plainAttributes = symbol.plainAttributes;
            const customAttributeLength = customAttributes.length;
            const plainAttributesLength = plainAttributes.length;
            attributeInstructions = Array(offset + customAttributeLength + plainAttributesLength);
            for (let i = 0; customAttributeLength > i; ++i) {
                attributeInstructions[offset] = this.compileCustomAttribute(customAttributes[i]);
                offset++;
            }
            for (let i = 0; plainAttributesLength > i; ++i) {
                attributeInstructions[offset] = this.compilePlainAttribute(plainAttributes[i], false);
                offset++;
            }
        }
        else if (offset > 0) {
            attributeInstructions = Array(offset);
        }
        else {
            attributeInstructions = PLATFORM.emptyArray;
        }
        return attributeInstructions;
    }
    compileCustomAttribute(symbol) {
        // a normal custom attribute (not template controller)
        const bindings = this.compileBindings(symbol);
        return new HydrateAttributeInstruction(symbol.res, bindings);
    }
    compilePlainAttribute(symbol, isOnSurrogate) {
        if (symbol.command === null) {
            const syntax = symbol.syntax;
            if (symbol.expression === null) {
                const attrRawValue = syntax.rawValue;
                if (isOnSurrogate) {
                    switch (syntax.target) {
                        case 'class':
                            return new SetClassAttributeInstruction(attrRawValue);
                        case 'style':
                            return new SetStyleAttributeInstruction(attrRawValue);
                        // todo:  define how to merge other attribute peacefully
                        //        this is an existing feature request
                    }
                }
                // a plain attribute on a surrogate
                return new SetAttributeInstruction(attrRawValue, syntax.target);
            }
            else {
                // a plain attribute with an interpolation
                return new InterpolationInstruction(symbol.expression, syntax.target);
            }
        }
        else {
            // a plain attribute with a binding command
            return symbol.command.compile(symbol);
        }
    }
    // private compileAttribute(symbol: IAttributeSymbol): HTMLAttributeInstruction {
    //   // any attribute on a custom element (which is not a bindable) or a plain element
    //   if (symbol.flags & SymbolFlags.isCustomAttribute) {
    //     return this.compileCustomAttribute(symbol as CustomAttributeSymbol);
    //   } else {
    //     return this.compilePlainAttribute(symbol as PlainAttributeSymbol);
    //   }
    // }
    compileParts(symbol, scopeParts) {
        const parts = {};
        if ((symbol.flags & 16384 /* hasParts */) > 0) {
            const replaceParts = symbol.parts;
            const len = replaceParts.length;
            let s = scopeParts.length;
            for (let i = 0; i < len; ++i) {
                const replacePart = replaceParts[i];
                if (!scopeParts.includes(replacePart.name)) {
                    scopeParts[s++] = replacePart.name;
                }
                const partScopeParts = [];
                const partInstructionRows = [];
                this.compileParentNode(replacePart.template, partInstructionRows, partScopeParts);
                // TODO: the assignment to `this.compilation.parts[replacePart.name]` might be the cause of replaceable bug reported by rluba
                // need to verify this
                this.compilation.parts[replacePart.name] = parts[replacePart.name] = CustomElementDefinition.create({
                    name: replacePart.name,
                    scopeParts: partScopeParts,
                    template: replacePart.physicalNode,
                    instructions: partInstructionRows,
                    needsCompile: false,
                });
            }
        }
        return parts;
    }
};
TemplateCompiler = __decorate$R([
    __param$p(0, ITemplateElementFactory),
    __param$p(1, IAttributeParser),
    __param$p(2, IExpressionParser),
    __param$p(3, IAttrSyntaxTransformer),
    __metadata$M("design:paramtypes", [Object, Object, Object, Object])
], TemplateCompiler);

const ITemplateCompilerRegistration = TemplateCompiler;
const ITemplateElementFactoryRegistration = HTMLTemplateElementFactory;
const IAttrSyntaxTransformerRegistation = HtmlAttrSyntaxTransformer;
/**
 * Default HTML-specific (but environment-agnostic) implementations for the following interfaces:
 * - `ITemplateCompiler`
 * - `ITemplateElementFactory`
 */
const DefaultComponents$3 = [
    ITemplateCompilerRegistration,
    ITemplateElementFactoryRegistration,
    IAttrSyntaxTransformerRegistation
];
const RefBindingCommandRegistration = RefBindingCommand;
const TriggerBindingCommandRegistration = TriggerBindingCommand;
const DelegateBindingCommandRegistration = DelegateBindingCommand;
const CaptureBindingCommandRegistration = CaptureBindingCommand;
const AttrBindingCommandRegistration = AttrBindingCommand;
const ClassBindingCommandRegistration = ClassBindingCommand;
const StyleBindingCommandRegistration = StyleBindingCommand;
/**
 * Default HTML-specific (but environment-agnostic) binding commands:
 * - Event listeners: `.trigger`, `.delegate`, `.capture`
 */
const DefaultBindingLanguage$1 = [
    RefBindingCommandRegistration,
    TriggerBindingCommandRegistration,
    DelegateBindingCommandRegistration,
    CaptureBindingCommandRegistration,
    ClassBindingCommandRegistration,
    StyleBindingCommandRegistration,
    AttrBindingCommandRegistration
];

function createMicroTaskFlushRequestorFactory() {
    return {
        create(taskQueue) {
            let requested = false;
            let canceled = false;
            const p = Promise.resolve();
            function flush() {
                if (canceled) {
                    canceled = false;
                }
                else {
                    requested = false;
                    taskQueue.flush();
                }
            }
            return {
                request() {
                    if (!requested) {
                        canceled = false;
                        requested = true;
                        // eslint-disable-next-line @typescript-eslint/no-floating-promises
                        p.then(flush);
                    }
                },
                cancel() {
                    canceled = true;
                    requested = false;
                },
            };
        },
    };
}
function createSetTimeoutFlushRequestorFactory(w) {
    return {
        create(taskQueue) {
            let handle = -1;
            function flush() {
                if (handle > -1) {
                    handle = -1;
                    taskQueue.flush();
                }
            }
            return {
                cancel() {
                    if (handle > -1) {
                        w.clearTimeout(handle);
                        handle = -1;
                    }
                },
                request() {
                    if (handle === -1) {
                        handle = w.setTimeout(flush, 0);
                    }
                },
            };
        },
    };
}
function createRequestAnimationFrameFlushRequestor(w) {
    return {
        create(taskQueue) {
            let handle = -1;
            function flush() {
                if (handle > -1) {
                    handle = -1;
                    taskQueue.flush();
                }
            }
            return {
                cancel() {
                    if (handle > -1) {
                        w.cancelAnimationFrame(handle);
                        handle = -1;
                    }
                },
                request() {
                    if (handle === -1) {
                        handle = w.requestAnimationFrame(flush);
                    }
                },
            };
        },
    };
}
function createPostRequestAnimationFrameFlushRequestor(w) {
    return {
        create(taskQueue) {
            let rafHandle = -1;
            let timeoutHandle = -1;
            function flush() {
                if (timeoutHandle > -1) {
                    timeoutHandle = -1;
                    taskQueue.flush();
                }
            }
            function queueFlush() {
                if (rafHandle > -1) {
                    rafHandle = -1;
                    if (timeoutHandle === -1) {
                        timeoutHandle = w.setTimeout(flush, 0);
                    }
                }
            }
            return {
                cancel() {
                    if (rafHandle > -1) {
                        w.cancelAnimationFrame(rafHandle);
                        rafHandle = -1;
                    }
                    if (timeoutHandle > -1) {
                        w.clearTimeout(timeoutHandle);
                        timeoutHandle = -1;
                    }
                },
                request() {
                    if (rafHandle === -1) {
                        rafHandle = w.requestAnimationFrame(queueFlush);
                    }
                },
            };
        },
    };
}
function createRequestIdleCallbackFlushRequestor(w) {
    return {
        create(taskQueue) {
            let handle = -1;
            function flush() {
                if (handle > -1) {
                    handle = -1;
                    taskQueue.flush();
                }
            }
            if (typeof w.requestIdleCallback === 'function' &&
                isNativeFunction(w.requestIdleCallback)) {
                return {
                    cancel() {
                        if (handle > -1) {
                            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                            w.cancelIdleCallback(handle);
                            handle = -1;
                        }
                    },
                    request() {
                        if (handle === -1) {
                            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                            handle = w.requestIdleCallback(flush);
                        }
                    },
                };
            }
            else {
                return {
                    cancel() {
                        if (handle > -1) {
                            w.clearTimeout(handle);
                            handle = -1;
                        }
                    },
                    request() {
                        if (handle === -1) {
                            // Instead of trying anything fancy with event handler debouncers (we could do that if there was a request for it),
                            // we just wait 45ms which is approximately the interval in a native idleCallback loop in chrome, to at least make it look
                            // the same from a timing perspective
                            handle = w.setTimeout(flush, 45);
                        }
                    },
                };
            }
        },
    };
}
function createDOMScheduler(container, w) {
    let scheduler = Scheduler.get(PLATFORM.global);
    if (scheduler === void 0) {
        Scheduler.set(PLATFORM.global, scheduler = new Scheduler(container.get(Now), createMicroTaskFlushRequestorFactory(), createRequestAnimationFrameFlushRequestor(w), createSetTimeoutFlushRequestorFactory(w), createPostRequestAnimationFrameFlushRequestor(w), createRequestIdleCallbackFlushRequestor(w)));
    }
    return scheduler;
}

var __decorate$S = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$N = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$q = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let BrowserDOMInitializer = class BrowserDOMInitializer {
    constructor(container) {
        this.container = container;
    }
    static register(container) {
        return Registration.singleton(IDOMInitializer, this).register(container);
    }
    initialize(config) {
        if (this.container.has(IDOM, false)) {
            return this.container.get(IDOM);
        }
        let dom;
        if (config !== undefined) {
            if (config.dom !== undefined) {
                dom = config.dom;
            }
            else if (config.host.ownerDocument !== null) {
                dom = new HTMLDOM(window, config.host.ownerDocument, Node, Element, HTMLElement, CustomEvent, CSSStyleSheet, ShadowRoot);
            }
            else {
                dom = new HTMLDOM(window, document, Node, Element, HTMLElement, CustomEvent, CSSStyleSheet, ShadowRoot);
            }
        }
        else {
            dom = new HTMLDOM(window, document, Node, Element, HTMLElement, CustomEvent, CSSStyleSheet, ShadowRoot);
        }
        Registration.instance(IDOM, dom).register(this.container);
        Registration.instance(IScheduler, createDOMScheduler(this.container, window)).register(this.container);
        return dom;
    }
};
BrowserDOMInitializer = __decorate$S([
    __param$q(0, IContainer),
    __metadata$N("design:paramtypes", [Object])
], BrowserDOMInitializer);
const IDOMInitializerRegistration = BrowserDOMInitializer;
/**
 * Default HTML-specific, browser-specific implementations for the following interfaces:
 * - `IDOMInitializer`
 */
const DefaultComponents$4 = [
    IDOMInitializerRegistration,
];
/**
 * A DI configuration object containing html-specific, browser-specific registrations:
 * - `RuntimeHtmlConfiguration` from `@aurelia/runtime-html`
 * - `DefaultComponents`
 */
const RuntimeHtmlBrowserConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        return RuntimeHtmlConfiguration
            .register(container)
            .register(...DefaultComponents$4);
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(DI.createContainer());
    }
};

const { enter, leave } = Profiler.createTimer('JitHtmlBrowserConfiguration');
/**
 * A DI configuration object containing html-specific, browser-specific registrations:
 * - `RuntimeHtmlBrowserConfiguration` from `@aurelia/runtime-html-browser`
 * - `DefaultComponents` from `@aurelia/jit`
 * - `DefaultBindingSyntax` from `@aurelia/jit`
 * - `DefaultBindingLanguage` from `@aurelia/jit`
 * - `DefaultComponents` from `@aurelia/jit-html`
 * - `DefaultBindingLanguage` from `@aurelia/jit-html`
 */
const JitHtmlBrowserConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        RuntimeHtmlBrowserConfiguration
            .register(container)
            .register(...DefaultBindingLanguage, ...DefaultBindingSyntax, ...DefaultComponents$1, ...DefaultBindingLanguage$1, ...DefaultComponents$3);
        return container;
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(DI.createContainer());
    }
};

// TODO: SSR?? abstract HTMLElement and document.
function createAurelia() {
    const au = new Aurelia$1();
    au.register(JitHtmlBrowserConfiguration);
    // eslint-disable-next-line sonarjs/no-collapsible-if
    if (typeof process !== 'undefined' && typeof process.env === 'object') ;
    return au;
}
class Aurelia$1 extends Aurelia {
    constructor(container = DI.createContainer()) {
        super(container);
    }
    static start(root) {
        return createAurelia().start(root);
    }
    static app(config) {
        return createAurelia().app(config);
    }
    static register(...params) {
        return createAurelia().register(...params);
    }
    app(config) {
        if (CustomElement.isType(config)) {
            // Default to custom element element name
            const definition = CustomElement.getDefinition(config);
            let host = document.querySelector(definition.name);
            if (host === null) {
                // When no target is found, default to body.
                // For example, when user forgot to write <my-app></my-app> in html.
                host = document.body;
            }
            return super.app({
                host: host,
                component: config
            });
        }
        return super.app(config);
    }
}

/**
 * Serialize an object to JSON. Useful for easily creating JSON fetch request bodies.
 *
 * @param body - The object to be serialized to JSON.
 * @param replacer - The JSON.stringify replacer used when serializing.
 * @returns A JSON string.
 */
function json(body, replacer) {
    return JSON.stringify((body !== undefined ? body : {}), replacer);
}

const retryStrategy = {
    fixed: 0,
    incremental: 1,
    exponential: 2,
    random: 3
};
const defaultRetryConfig = {
    maxRetries: 3,
    interval: 1000,
    strategy: retryStrategy.fixed
};
/**
 * Interceptor that retries requests on error, based on a given RetryConfiguration.
 */
class RetryInterceptor {
    /**
     * Creates an instance of RetryInterceptor.
     */
    constructor(retryConfig) {
        this.retryConfig = { ...defaultRetryConfig, ...(retryConfig !== undefined ? retryConfig : {}) };
        if (this.retryConfig.strategy === retryStrategy.exponential &&
            this.retryConfig.interval <= 1000) {
            throw new Error('An interval less than or equal to 1 second is not allowed when using the exponential retry strategy');
        }
    }
    /**
     * Called with the request before it is sent. It remembers the request so it can be retried on error.
     *
     * @param request - The request to be sent.
     * @returns The existing request, a new request or a response; or a Promise for any of these.
     */
    request(request) {
        if (!request.retryConfig) {
            request.retryConfig = { ...this.retryConfig };
            request.retryConfig.counter = 0;
        }
        // do this on every request
        request.retryConfig.requestClone = request.clone();
        return request;
    }
    /**
     * Called with the response after it is received. Clears the remembered request, as it was succesfull.
     *
     * @param response - The response.
     * @returns The response; or a Promise for one.
     */
    response(response, request) {
        // retry was successful, so clean up after ourselves
        Reflect.deleteProperty(request, 'retryConfig');
        return response;
    }
    /**
     * Handles fetch errors and errors generated by previous interceptors. This
     * function acts as a Promise rejection handler. It wil retry the remembered request based on the
     * configured RetryConfiguration.
     *
     * @param error - The rejection value from the fetch request or from a
     * previous interceptor.
     * @returns The response of the retry; or a Promise for one.
     */
    responseError(error, request, httpClient) {
        const { retryConfig } = request;
        const { requestClone } = retryConfig;
        return Promise.resolve().then(() => {
            if (retryConfig.counter < retryConfig.maxRetries) {
                const result = retryConfig.doRetry !== undefined ? retryConfig.doRetry(error, request) : true;
                return Promise.resolve(result).then(doRetry => {
                    if (doRetry) {
                        retryConfig.counter++;
                        const delay = calculateDelay(retryConfig);
                        return new Promise((resolve) => $DOM.window.setTimeout(resolve, !isNaN(delay) ? delay : 0))
                            .then(() => {
                            const newRequest = requestClone.clone();
                            if (typeof (retryConfig.beforeRetry) === 'function') {
                                return retryConfig.beforeRetry(newRequest, httpClient);
                            }
                            return newRequest;
                        })
                            .then(newRequest => {
                            const retryableRequest = { ...newRequest, retryConfig };
                            return httpClient.fetch(retryableRequest);
                        });
                    }
                    // no more retries, so clean up
                    Reflect.deleteProperty(request, 'retryConfig');
                    throw error;
                });
            }
            // no more retries, so clean up
            Reflect.deleteProperty(request, 'retryConfig');
            throw error;
        });
    }
}
function calculateDelay(retryConfig) {
    const { interval, strategy, minRandomInterval, maxRandomInterval, counter } = retryConfig;
    if (typeof (strategy) === 'function') {
        return retryConfig.strategy(counter);
    }
    switch (strategy) {
        case (retryStrategy.fixed):
            return retryStrategies[retryStrategy.fixed](interval);
        case (retryStrategy.incremental):
            return retryStrategies[retryStrategy.incremental](counter, interval);
        case (retryStrategy.exponential):
            return retryStrategies[retryStrategy.exponential](counter, interval);
        case (retryStrategy.random):
            return retryStrategies[retryStrategy.random](counter, interval, minRandomInterval, maxRandomInterval);
        default:
            throw new Error('Unrecognized retry strategy');
    }
}
const retryStrategies = [
    // fixed
    interval => interval,
    // incremental
    (retryCount, interval) => interval * retryCount,
    // exponential
    (retryCount, interval) => retryCount === 1 ? interval : interval ** retryCount / 1000,
    // random
    (retryCount, interval, minRandomInterval = 0, maxRandomInterval = 60000) => {
        return Math.random() * (maxRandomInterval - minRandomInterval) + minRandomInterval;
    }
];

/**
 * A class for configuring HttpClients.
 */
class HttpClientConfiguration {
    constructor() {
        /**
         * The base URL to be prepended to each Request's url before sending.
         */
        this.baseUrl = '';
        /**
         * Default values to apply to init objects when creating Requests. Note that
         * defaults cannot be applied when Request objects are manually created because
         * Request provides its own defaults and discards the original init object.
         * See also https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
         */
        this.defaults = {};
        /**
         * Interceptors to be added to the HttpClient.
         */
        this.interceptors = [];
    }
    /**
     * Sets the baseUrl.
     *
     * @param baseUrl - The base URL.
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    withBaseUrl(baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    /**
     * Sets the defaults.
     *
     * @param defaults - The defaults.
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    withDefaults(defaults) {
        this.defaults = defaults;
        return this;
    }
    /**
     * Adds an interceptor to be run on all requests or responses.
     *
     * @param interceptor - An object with request, requestError,
     * response, or responseError methods. request and requestError act as
     * resolve and reject handlers for the Request before it is sent.
     * response and responseError act as resolve and reject handlers for
     * the Response after it has been received.
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    withInterceptor(interceptor) {
        this.interceptors.push(interceptor);
        return this;
    }
    /**
     * Applies a configuration that addresses common application needs, including
     * configuring same-origin credentials, and using rejectErrorResponses.
     *
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    useStandardConfiguration() {
        const standardConfig = { credentials: 'same-origin' };
        Object.assign(this.defaults, standardConfig, this.defaults);
        return this.rejectErrorResponses();
    }
    /**
     * Causes Responses whose status codes fall outside the range 200-299 to reject.
     * The fetch API only rejects on network errors or other conditions that prevent
     * the request from completing, meaning consumers must inspect Response.ok in the
     * Promise continuation to determine if the server responded with a success code.
     * This method adds a response interceptor that causes Responses with error codes
     * to be rejected, which is common behavior in HTTP client libraries.
     *
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    rejectErrorResponses() {
        return this.withInterceptor({ response: rejectOnError });
    }
    withRetry(config) {
        const interceptor = new RetryInterceptor(config);
        return this.withInterceptor(interceptor);
    }
}
function rejectOnError(response) {
    if (!response.ok) {
        throw response;
    }
    return response;
}

var __decorate$T = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$O = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$r = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const absoluteUrlRegexp = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
/**
 * An HTTP client based on the Fetch API.
 */
let HttpClient = class HttpClient {
    /**
     * Creates an instance of HttpClient.
     */
    constructor(dom) {
        this.dom = dom;
        if (dom.window.fetch === undefined) {
            throw new Error('HttpClient requires a Fetch API implementation, but the current environment doesn\'t support it. You may need to load a polyfill such as https://github.com/github/fetch');
        }
        this.dom = dom;
        this.activeRequestCount = 0;
        this.isRequesting = false;
        this.isConfigured = false;
        this.baseUrl = '';
        this.defaults = null;
        this.interceptors = [];
    }
    /**
     * Configure this client with default settings to be used by all requests.
     *
     * @param config - A configuration object, or a function that takes a config
     * object and configures it.
     * @returns The chainable instance of this HttpClient.
     * @chainable
     */
    configure(config) {
        let normalizedConfig;
        if (typeof config === 'object') {
            const requestInitConfiguration = { defaults: config };
            normalizedConfig = requestInitConfiguration;
        }
        else if (typeof config === 'function') {
            normalizedConfig = new HttpClientConfiguration();
            normalizedConfig.baseUrl = this.baseUrl;
            normalizedConfig.defaults = { ...this.defaults };
            normalizedConfig.interceptors = this.interceptors;
            const c = config(normalizedConfig);
            if (Object.prototype.isPrototypeOf.call(HttpClientConfiguration.prototype, c)) {
                normalizedConfig = c;
            }
        }
        else {
            throw new Error('invalid config');
        }
        const defaults = normalizedConfig.defaults;
        if (defaults !== undefined && Object.prototype.isPrototypeOf.call(Headers.prototype, defaults.headers)) {
            // Headers instances are not iterable in all browsers. Require a plain
            // object here to allow default headers to be merged into request headers.
            throw new Error('Default headers must be a plain object.');
        }
        const interceptors = normalizedConfig.interceptors;
        if (interceptors !== undefined && interceptors.length) {
            // find if there is a RetryInterceptor
            if (interceptors.filter(x => Object.prototype.isPrototypeOf.call(RetryInterceptor.prototype, x)).length > 1) {
                throw new Error('Only one RetryInterceptor is allowed.');
            }
            const retryInterceptorIndex = interceptors.findIndex(x => Object.prototype.isPrototypeOf.call(RetryInterceptor.prototype, x));
            if (retryInterceptorIndex >= 0 && retryInterceptorIndex !== interceptors.length - 1) {
                throw new Error('The retry interceptor must be the last interceptor defined.');
            }
        }
        this.baseUrl = normalizedConfig.baseUrl;
        this.defaults = defaults;
        this.interceptors = normalizedConfig.interceptors !== undefined ? normalizedConfig.interceptors : [];
        this.isConfigured = true;
        return this;
    }
    /**
     * Starts the process of fetching a resource. Default configuration parameters
     * will be applied to the Request. The constructed Request will be passed to
     * registered request interceptors before being sent. The Response will be passed
     * to registered Response interceptors before it is returned.
     *
     * See also https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    fetch(input, init) {
        this.trackRequestStart();
        let request = this.buildRequest(input, init);
        return this.processRequest(request, this.interceptors).then(result => {
            let response;
            if (Object.prototype.isPrototypeOf.call(Response.prototype, result)) {
                response = Promise.resolve(result);
            }
            else if (Object.prototype.isPrototypeOf.call(Request.prototype, result)) {
                request = result;
                response = fetch(request);
            }
            else {
                throw new Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${result}]`);
            }
            return this.processResponse(response, this.interceptors, request);
        })
            .then(result => {
            if (Object.prototype.isPrototypeOf.call(Request.prototype, result)) {
                return this.fetch(result);
            }
            return result;
        })
            .then(result => {
            this.trackRequestEnd();
            return result;
        }, error => {
            this.trackRequestEnd();
            throw error;
        });
    }
    buildRequest(input, init) {
        const defaults = this.defaults !== null ? this.defaults : {};
        let request;
        let body;
        let requestContentType;
        const parsedDefaultHeaders = parseHeaderValues(defaults.headers);
        if (Object.prototype.isPrototypeOf.call(Request.prototype, input)) {
            request = input;
            requestContentType = new Headers(request.headers).get('Content-Type');
        }
        else {
            if (!init) {
                init = {};
            }
            body = init.body;
            const bodyObj = body !== undefined ? { body: body } : null;
            const requestInit = { ...defaults, headers: {}, ...init, ...bodyObj };
            requestContentType = new Headers(requestInit.headers).get('Content-Type');
            request = new Request(getRequestUrl(this.baseUrl, input), requestInit);
        }
        if (!requestContentType) {
            if (new Headers(parsedDefaultHeaders).has('content-type')) {
                request.headers.set('Content-Type', new Headers(parsedDefaultHeaders).get('content-type'));
            }
            else if (body !== undefined && isJSON(body)) {
                request.headers.set('Content-Type', 'application/json');
            }
        }
        setDefaultHeaders(request.headers, parsedDefaultHeaders);
        if (body !== undefined && Object.prototype.isPrototypeOf.call(Blob.prototype, body) && body.type) {
            // work around bug in IE & Edge where the Blob type is ignored in the request
            // https://connect.microsoft.com/IE/feedback/details/2136163
            request.headers.set('Content-Type', body.type);
        }
        return request;
    }
    /**
     * Calls fetch as a GET request.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    get(input, init) {
        return this.fetch(input, init);
    }
    /**
     * Calls fetch with request method set to POST.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    post(input, body, init) {
        return this.callFetch(input, body, init, 'POST');
    }
    /**
     * Calls fetch with request method set to PUT.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    put(input, body, init) {
        return this.callFetch(input, body, init, 'PUT');
    }
    /**
     * Calls fetch with request method set to PATCH.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    patch(input, body, init) {
        return this.callFetch(input, body, init, 'PATCH');
    }
    /**
     * Calls fetch with request method set to DELETE.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    delete(input, body, init) {
        return this.callFetch(input, body, init, 'DELETE');
    }
    trackRequestStart() {
        this.isRequesting = !!(++this.activeRequestCount);
        if (this.isRequesting) {
            const evt = $DOM.createCustomEvent('aurelia-fetch-client-request-started', { bubbles: true, cancelable: true });
            $DOM.window.setTimeout(() => { $DOM.dispatchEvent(evt); }, 1);
        }
    }
    trackRequestEnd() {
        this.isRequesting = !!(--this.activeRequestCount);
        if (!this.isRequesting) {
            const evt = $DOM.createCustomEvent('aurelia-fetch-client-requests-drained', { bubbles: true, cancelable: true });
            $DOM.window.setTimeout(() => { $DOM.dispatchEvent(evt); }, 1);
        }
    }
    processRequest(request, interceptors) {
        return this.applyInterceptors(request, interceptors, 'request', 'requestError', this);
    }
    processResponse(response, interceptors, request) {
        return this.applyInterceptors(response, interceptors, 'response', 'responseError', request, this);
    }
    applyInterceptors(input, interceptors, successName, errorName, ...interceptorArgs) {
        return (interceptors !== undefined ? interceptors : [])
            .reduce((chain, interceptor) => {
            const successHandler = interceptor[successName];
            const errorHandler = interceptor[errorName];
            // TODO: Fix this, as it violates `strictBindCallApply`.
            return chain.then(successHandler ? (value => successHandler.call(interceptor, value, ...interceptorArgs)) : identity, errorHandler ? (reason => errorHandler.call(interceptor, reason, ...interceptorArgs)) : thrower);
        }, Promise.resolve(input));
    }
    callFetch(input, body, init, method) {
        if (!init) {
            init = {};
        }
        init.method = method;
        if (body) {
            init.body = body;
        }
        return this.fetch(input, init);
    }
};
HttpClient = __decorate$T([
    __param$r(0, IDOM),
    __metadata$O("design:paramtypes", [HTMLDOM])
], HttpClient);
function parseHeaderValues(headers) {
    const parsedHeaders = {};
    const $headers = headers !== undefined ? headers : {};
    for (const name in $headers) {
        if (Object.prototype.hasOwnProperty.call($headers, name)) {
            parsedHeaders[name] = (typeof $headers[name] === 'function')
                ? $headers[name]()
                : $headers[name];
        }
    }
    return parsedHeaders;
}
function getRequestUrl(baseUrl, url) {
    if (absoluteUrlRegexp.test(url)) {
        return url;
    }
    return (baseUrl !== undefined ? baseUrl : '') + url;
}
function setDefaultHeaders(headers, defaultHeaders) {
    const $defaultHeaders = defaultHeaders !== undefined ? defaultHeaders : {};
    for (const name in $defaultHeaders) {
        if (Object.prototype.hasOwnProperty.call($defaultHeaders, name) && !headers.has(name)) {
            headers.set(name, $defaultHeaders[name]);
        }
    }
}
function isJSON(str) {
    try {
        JSON.parse(str);
    }
    catch (err) {
        return false;
    }
    return true;
}
function identity(x) {
    return x;
}
function thrower(x) {
    throw x;
}

var __decorate$U = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$P = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * A first-in-first-out queue that only processes the next queued item
 * when the current one has been resolved or rejected. Sends queued items
 * one at a time to a specified callback function. The callback function
 * should resolve or reject the queued item when processing is done.
 * Enqueued items can be awaited. Enqueued items can specify an (arbitrary)
 * execution cost and the queue can be set up (activated) to only process
 * a specific amount of execution cost per RAF/tick.
 */
class Queue {
    constructor(callback) {
        this.callback = callback;
        this.pending = [];
        this.processing = null;
        this.allowedExecutionCostWithinTick = null;
        this.currentExecutionCostInCurrentTick = 0;
        this.scheduler = null;
        this.task = null;
    }
    get isActive() {
        return this.task !== null;
    }
    get length() {
        return this.pending.length;
    }
    activate(options) {
        if (this.isActive) {
            throw new Error('Queue has already been activated');
        }
        this.scheduler = options.scheduler;
        this.allowedExecutionCostWithinTick = options.allowedExecutionCostWithinTick;
        this.task = this.scheduler.queueRenderTask(this.dequeue, { persistent: true });
    }
    deactivate() {
        if (!this.isActive) {
            throw new Error('Queue has not been activated');
        }
        this.task.cancel();
        this.task = null;
        this.allowedExecutionCostWithinTick = null;
        this.clear();
    }
    enqueue(itemOrItems, costOrCosts) {
        const list = Array.isArray(itemOrItems);
        const items = list ? itemOrItems : [itemOrItems];
        const costs = items
            .map((value, index) => !Array.isArray(costOrCosts) ? costOrCosts : costOrCosts[index])
            .map(value => value !== undefined ? value : 1);
        const promises = [];
        for (const item of items) {
            const qItem = { ...item };
            qItem.cost = costs.shift();
            promises.push(new Promise((resolve, reject) => {
                qItem.resolve = () => {
                    resolve();
                    this.processing = null;
                    this.dequeue();
                };
                qItem.reject = (reason) => {
                    reject(reason);
                    this.processing = null;
                    this.dequeue();
                };
            }));
            this.pending.push(qItem);
        }
        this.dequeue();
        return list ? promises : promises[0];
    }
    dequeue(delta) {
        if (this.processing !== null) {
            return;
        }
        if (delta !== undefined) {
            this.currentExecutionCostInCurrentTick = 0;
        }
        if (!this.pending.length) {
            return;
        }
        if (this.allowedExecutionCostWithinTick !== null && delta === undefined && this.currentExecutionCostInCurrentTick + (this.pending[0].cost || 0) > this.allowedExecutionCostWithinTick) {
            return;
        }
        this.processing = this.pending.shift() || null;
        if (this.processing) {
            this.currentExecutionCostInCurrentTick += this.processing.cost || 0;
            this.callback(this.processing);
        }
    }
    clear() {
        this.pending.splice(0, this.pending.length);
    }
}
__decorate$U([
    bound,
    __metadata$P("design:type", Function),
    __metadata$P("design:paramtypes", [Number]),
    __metadata$P("design:returntype", void 0)
], Queue.prototype, "dequeue", null);

var __decorate$V = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$Q = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$s = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let BrowserNavigator = class BrowserNavigator {
    constructor(scheduler, dom) {
        this.scheduler = scheduler;
        this.allowedExecutionCostWithinTick = 2; // Limit no of executed actions within the same RAF (due to browser limitation)
        this.isActive = false;
        this.options = {
            useUrlFragmentHash: true,
            callback: () => { return; },
        };
        this.forwardedState = {};
        this.handlePopstate = (ev) => {
            return this.enqueue(this, 'popstate', [ev]);
        };
        this.processCalls = (qCall) => {
            const call = qCall;
            if (call.target === this && call.methodName !== 'forwardState') {
                call.parameters.push(this.forwardedState.resolve);
                this.forwardedState.resolve = null;
                // Should we suppress this popstate event?
                if (call.methodName === 'popstate' && this.forwardedState.suppressPopstate) {
                    call.parameters.push(true);
                    this.forwardedState.suppressPopstate = false;
                }
            }
            // eslint-disable-next-line @typescript-eslint/ban-types
            const method = call.target[call.methodName];
            Reporter.write(10000, 'DEQUEUE', call.methodName, call.parameters);
            if (method) {
                method.apply(call.target, call.parameters);
            }
            qCall.resolve();
        };
        this.window = dom.window;
        this.history = dom.window.history;
        this.location = dom.window.location;
        this.pendingCalls = new Queue(this.processCalls);
    }
    activate(options) {
        if (this.isActive) {
            throw new Error('Browser navigation has already been activated');
        }
        this.isActive = true;
        this.options.callback = options.callback;
        if (options.useUrlFragmentHash != void 0) {
            this.options.useUrlFragmentHash = options.useUrlFragmentHash;
        }
        this.pendingCalls.activate({ scheduler: this.scheduler, allowedExecutionCostWithinTick: this.allowedExecutionCostWithinTick });
        this.window.addEventListener('popstate', this.handlePopstate);
    }
    deactivate() {
        if (!this.isActive) {
            throw new Error('Browser navigation has not been activated');
        }
        this.window.removeEventListener('popstate', this.handlePopstate);
        this.pendingCalls.deactivate();
        this.options = { useUrlFragmentHash: true, callback: () => { return; } };
        this.isActive = false;
    }
    get length() {
        return this.history.length;
    }
    get state() {
        return this.history.state;
    }
    get viewerState() {
        const { pathname, search, hash } = this.location;
        return {
            path: pathname,
            query: search,
            hash,
            instruction: this.options.useUrlFragmentHash ? hash.slice(1) : pathname,
        };
    }
    go(delta, suppressPopstate = false) {
        return this.enqueue(this.history, 'go', [delta], suppressPopstate);
    }
    pushNavigatorState(state) {
        const { title, path } = state.currentEntry;
        const fragment = this.options.useUrlFragmentHash ? '#/' : '';
        return this.enqueue(this.history, 'pushState', [state, title, `${fragment}${path}`]);
    }
    replaceNavigatorState(state) {
        const { title, path } = state.currentEntry;
        const fragment = this.options.useUrlFragmentHash ? '#/' : '';
        return this.enqueue(this.history, 'replaceState', [state, title, `${fragment}${path}`]);
    }
    popNavigatorState() {
        return this.enqueue(this, 'popState', []);
    }
    popstate(ev, resolve, suppressPopstate = false) {
        if (!suppressPopstate) {
            this.options.callback({
                ...this.viewerState,
                ...{
                    event: ev,
                    state: this.history.state,
                },
            });
        }
        if (resolve !== null && resolve !== void 0) {
            resolve();
        }
    }
    async popState(resolve) {
        await this.go(-1, true);
        const state = this.history.state;
        // TODO: Fix browser forward bug after pop on first entry
        if (state && state.navigationEntry && !state.navigationEntry.firstEntry) {
            await this.go(-1, true);
            return this.pushNavigatorState(state);
        }
        resolve();
    }
    forwardState(state) {
        this.forwardedState = state;
    }
    // Everything that wants to await a browser event should pass suppressPopstate param
    // Events NOT resulting in popstate events should NOT pass suppressPopstate param
    enqueue(target, methodName, parameters, suppressPopstate) {
        const calls = [];
        const costs = [];
        const promises = [];
        if (suppressPopstate !== undefined) {
            // Due to (browser) events not having a promise, we create and propagate one
            let resolve = null;
            promises.push(new Promise(_resolve => {
                resolve = _resolve;
            }));
            calls.push({
                target: this,
                methodName: 'forwardState',
                parameters: [
                    {
                        resolve,
                        suppressPopstate,
                    }
                ],
            });
            costs.push(0);
        }
        calls.push({
            target: target,
            methodName: methodName,
            parameters: parameters,
        });
        costs.push(1);
        // The first promise is the relevant one since it's either a) the propagated one (in
        // case of a browser action), or b) the only one since there's only one call
        promises.push(this.pendingCalls.enqueue(calls, costs)[0]);
        return promises[0];
    }
};
BrowserNavigator = __decorate$V([
    __param$s(0, IScheduler),
    __param$s(1, IDOM),
    __metadata$Q("design:paramtypes", [Object, HTMLDOM])
], BrowserNavigator);

/**
 * Class responsible for handling interactions that should trigger navigation.
 */
class LinkHandler {
    constructor(dom) {
        this.options = {
            useHref: true,
            callback: () => { return; }
        };
        this.isActive = false;
        this.handler = (e) => {
            const info = LinkHandler.getEventInfo(e, this.window, this.options);
            if (info.shouldHandleEvent) {
                e.preventDefault();
                this.options.callback(info);
            }
        };
        this.window = dom.window;
        this.document = dom.document;
    }
    /**
     * Gets the href and a "should handle" recommendation, given an Event.
     *
     * @param event - The Event to inspect for target anchor and href.
     */
    static getEventInfo(event, win, options) {
        const info = {
            shouldHandleEvent: false,
            instruction: null,
            anchor: null
        };
        const target = info.anchor = event.currentTarget;
        // Switch to this for delegation:
        // const target = info.anchor = LinkHandler.closestAnchor(event.target as Element);
        if (!target || !LinkHandler.targetIsThisWindow(target, win)) {
            return info;
        }
        if (target.hasAttribute('external')) {
            return info;
        }
        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
            return info;
        }
        const gotoAttr = CustomAttribute.for(target, 'goto');
        const goto = gotoAttr !== void 0 ? gotoAttr.viewModel.value : null;
        const href = options.useHref && target.hasAttribute('href') ? target.getAttribute('href') : null;
        if ((goto === null || goto.length === 0) && (href === null || href.length === 0)) {
            return info;
        }
        info.anchor = target;
        info.instruction = goto || href;
        const leftButtonClicked = event.button === 0;
        info.shouldHandleEvent = leftButtonClicked;
        return info;
    }
    /**
     * Finds the closest ancestor that's an anchor element.
     *
     * @param el - The element to search upward from.
     * @returns The link element that is the closest ancestor.
     */
    // private static closestAnchor(el: Element): Element | null {
    //   while (el !== null && el !== void 0) {
    //     if (el.tagName === 'A') {
    //       return el;
    //     }
    //     el = el.parentNode as Element;
    //   }
    //   return null;
    // }
    /**
     * Gets a value indicating whether or not an anchor targets the current window.
     *
     * @param target - The anchor element whose target should be inspected.
     * @returns True if the target of the link element is this window; false otherwise.
     */
    static targetIsThisWindow(target, win) {
        const targetWindow = target.getAttribute('target');
        return !targetWindow ||
            targetWindow === win.name ||
            targetWindow === '_self';
    }
    /**
     * Activate the instance.
     *
     */
    activate(options) {
        if (this.isActive) {
            throw new Error('Link handler has already been activated');
        }
        this.isActive = true;
        this.options = { ...options };
    }
    /**
     * Deactivate the instance. Event handlers and other resources should be cleaned up here.
     */
    deactivate() {
        if (!this.isActive) {
            throw new Error('Link handler has not been activated');
        }
        this.isActive = false;
    }
}
LinkHandler.inject = [IDOM];

function arrayRemove(arr, func) {
    const removed = [];
    let arrIndex = arr.findIndex(func);
    while (arrIndex >= 0) {
        removed.push(arr.splice(arrIndex, 1)[0]);
        arrIndex = arr.findIndex(func);
    }
    return removed;
}

function parseQuery(query) {
    if (!query || !query.length) {
        return {};
    }
    const parameters = {};
    // TODO: Deal with complex parameters such as lists and objects
    const params = query.replace('+', ' ').split('&');
    for (const param of params) {
        const [key, value] = param.split('=');
        parameters[decodeURIComponent(key)] = decodeURIComponent(value !== void 0 ? value : key);
    }
    return parameters;
}

var ContentStatus;
(function (ContentStatus) {
    ContentStatus[ContentStatus["none"] = 0] = "none";
    ContentStatus[ContentStatus["created"] = 1] = "created";
    ContentStatus[ContentStatus["loaded"] = 2] = "loaded";
    ContentStatus[ContentStatus["initialized"] = 3] = "initialized";
    ContentStatus[ContentStatus["added"] = 4] = "added";
})(ContentStatus || (ContentStatus = {}));
class ViewportContent {
    constructor(
    // Can (and wants) be a (resolved) type or a string (to be resolved later)
    content = new ViewportInstruction(''), instruction = {
        instruction: '',
        fullStateInstruction: '',
    }, container = null) {
        this.content = content;
        this.instruction = instruction;
        this.contentStatus = 0 /* none */;
        this.entered = false;
        this.fromCache = false;
        this.fromHistory = false;
        this.reentry = false;
        // If we've got a container, we're good to resolve type
        if (!this.content.isComponentType() && container !== null) {
            this.content.componentType = this.toComponentType(container);
        }
    }
    get componentInstance() {
        return this.content.componentInstance;
    }
    get viewport() {
        return this.content.viewport;
    }
    equalComponent(other) {
        return this.content.sameComponent(other.content);
    }
    equalParameters(other) {
        return this.content.sameComponent(other.content, true) &&
            // TODO: Review whether query is relevant
            this.instruction.query === other.instruction.query;
    }
    reentryBehavior() {
        return (this.content.componentInstance !== null &&
            'reentryBehavior' in this.content.componentInstance &&
            this.content.componentInstance.reentryBehavior !== void 0)
            ? this.content.componentInstance.reentryBehavior
            : "default" /* default */;
    }
    isCacheEqual(other) {
        return this.content.sameComponent(other.content, true);
    }
    createComponent(container, fallback) {
        if (this.contentStatus !== 0 /* none */) {
            return;
        }
        // Don't load cached content or instantiated history content
        if (!this.fromCache && !this.fromHistory) {
            try {
                this.content.componentInstance = this.toComponentInstance(container);
            }
            catch (e) {
                if (fallback !== void 0) {
                    this.content.setParameters({ id: this.content.componentName });
                    this.content.setComponent(fallback);
                    try {
                        this.content.componentInstance = this.toComponentInstance(container);
                    }
                    catch (ee) {
                        throw e;
                    }
                }
                else {
                    throw e;
                }
            }
        }
        this.contentStatus = 1 /* created */;
    }
    destroyComponent() {
        // TODO: We might want to do something here eventually, who knows?
        if (this.contentStatus !== 1 /* created */) {
            return;
        }
        // Don't destroy components when stateful
        this.contentStatus = 0 /* none */;
    }
    async canEnter(viewport, previousInstruction) {
        if (!this.content.componentInstance) {
            return false;
        }
        if (!this.content.componentInstance.canEnter) {
            return true;
        }
        const typeParameters = this.content.componentType ? this.content.componentType.parameters : null;
        this.instruction.parameters = this.content.toSpecifiedParameters(typeParameters);
        const merged = { ...parseQuery(this.instruction.query), ...this.instruction.parameters };
        const result = this.content.componentInstance.canEnter(merged, this.instruction, previousInstruction);
        Reporter.write(10000, 'viewport canEnter', result);
        if (typeof result === 'boolean') {
            return result;
        }
        if (typeof result === 'string') {
            return [viewport.router.createViewportInstruction(result, viewport)];
        }
        return result;
    }
    async canLeave(nextInstruction) {
        if (!this.content.componentInstance || !this.content.componentInstance.canLeave) {
            return true;
        }
        const result = this.content.componentInstance.canLeave(nextInstruction, this.instruction);
        Reporter.write(10000, 'viewport canLeave', result);
        if (typeof result === 'boolean') {
            return result;
        }
        return result;
    }
    async enter(previousInstruction) {
        // if (!this.reentry && (this.contentStatus !== ContentStatus.created || this.entered)) {
        if (!this.reentry && (this.contentStatus !== 2 /* loaded */ || this.entered)) {
            return;
        }
        if (this.content.componentInstance && this.content.componentInstance.enter) {
            const typeParameters = this.content.componentType ? this.content.componentType.parameters : null;
            this.instruction.parameters = this.content.toSpecifiedParameters(typeParameters);
            const merged = { ...parseQuery(this.instruction.query), ...this.instruction.parameters };
            await this.content.componentInstance.enter(merged, this.instruction, previousInstruction);
        }
        this.entered = true;
    }
    async leave(nextInstruction) {
        if (this.contentStatus !== 4 /* added */ || !this.entered) {
            return;
        }
        if (this.content.componentInstance && this.content.componentInstance.leave) {
            await this.content.componentInstance.leave(nextInstruction, this.instruction);
        }
        this.entered = false;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async loadComponent(container, element, viewport) {
        // if (this.contentStatus !== ContentStatus.created || !this.entered || !this.content.componentInstance) {
        if (this.contentStatus !== 1 /* created */ || this.entered || !this.content.componentInstance) {
            return;
        }
        // Don't load cached content or instantiated history content
        if (!this.fromCache || !this.fromHistory) {
            const host = element;
            const controller = Controller.forCustomElement(this.content.componentInstance, container.get(ILifecycle), host, container, void 0, void 0);
            controller.parent = CustomElement.for(element);
        }
        this.contentStatus = 2 /* loaded */;
    }
    unloadComponent(cache, stateful = false) {
        // TODO: We might want to do something here eventually, who knows?
        if (this.contentStatus !== 2 /* loaded */) {
            return;
        }
        // Don't unload components when stateful
        if (!stateful) {
            this.contentStatus = 1 /* created */;
        }
        else {
            cache.push(this);
        }
    }
    initializeComponent(parent) {
        if (this.contentStatus !== 2 /* loaded */) {
            return;
        }
        // Don't initialize cached content or instantiated history content
        // if (!this.fromCache || !this.fromHistory) {
        // ((this.content.componentInstance as IRouteableComponent).$controller as IController).parent = parent;
        this.content.componentInstance.$controller.bind(1024 /* fromStartTask */ | 4096 /* fromBind */);
        // }
        this.contentStatus = 3 /* initialized */;
    }
    async terminateComponent(stateful = false) {
        if (this.contentStatus !== 3 /* initialized */) {
            return;
        }
        // Don't terminate cached content
        // if (!stateful) {
        await this.content.componentInstance.$controller.unbind(2048 /* fromStopTask */ | 8192 /* fromUnbind */).wait();
        // ((this.content.componentInstance as IRouteableComponent).$controller as IController).parent = void 0;
        // }
        this.contentStatus = 2 /* loaded */;
    }
    addComponent(element) {
        if (this.contentStatus !== 3 /* initialized */) {
            return;
        }
        this.content.componentInstance.$controller.attach(1024 /* fromStartTask */);
        if (this.fromCache || this.fromHistory) {
            const elements = Array.from(element.getElementsByTagName('*'));
            for (const el of elements) {
                const attr = el.getAttribute('au-element-scroll');
                if (attr) {
                    const [top, left] = attr.split(',');
                    el.removeAttribute('au-element-scroll');
                    el.scrollTo(+left, +top);
                }
            }
        }
        this.contentStatus = 4 /* added */;
    }
    removeComponent(element, stateful = false) {
        if (this.contentStatus !== 4 /* added */ || this.entered) {
            return;
        }
        if (stateful && element !== null) {
            const elements = Array.from(element.getElementsByTagName('*'));
            for (const el of elements) {
                if (el.scrollTop > 0 || el.scrollLeft) {
                    el.setAttribute('au-element-scroll', `${el.scrollTop},${el.scrollLeft}`);
                }
            }
        }
        this.content.componentInstance.$controller.detach(2048 /* fromStopTask */);
        this.contentStatus = 3 /* initialized */;
    }
    async freeContent(element, nextInstruction, cache, stateful = false) {
        switch (this.contentStatus) {
            case 4 /* added */:
                await this.leave(nextInstruction);
                this.removeComponent(element, stateful);
            case 3 /* initialized */:
                await this.terminateComponent(stateful);
            case 2 /* loaded */:
                this.unloadComponent(cache, stateful);
            case 1 /* created */:
                this.destroyComponent();
        }
    }
    toComponentName() {
        return this.content.componentName;
    }
    toComponentType(container) {
        if (this.content.isEmpty()) {
            return null;
        }
        return this.content.toComponentType(container);
    }
    toComponentInstance(container) {
        if (this.content.isEmpty()) {
            return null;
        }
        return this.content.toComponentInstance(container);
    }
}

class ViewportScope {
    constructor(name, router, element, owningScope, scope, rootComponentType = null, // temporary. Metadata will probably eliminate it
    options = {
        catches: [],
        source: null,
    }) {
        this.name = name;
        this.router = router;
        this.element = element;
        this.rootComponentType = rootComponentType;
        this.options = options;
        this.path = null;
        this.content = null;
        this.nextContent = null;
        this.available = true;
        this.sourceItem = null;
        this.sourceItemIndex = -1;
        this.remove = false;
        this.add = false;
        this.connectedScope = new Scope$1(router, scope, owningScope, null, this);
        if (this.catches.length > 0) {
            this.content = router.createViewportInstruction(this.catches[0], this.name);
        }
    }
    get scope() {
        return this.connectedScope.scope;
    }
    get owningScope() {
        return this.connectedScope.owningScope;
    }
    get enabled() {
        return this.connectedScope.enabled;
    }
    set enabled(enabled) {
        this.connectedScope.enabled = enabled;
    }
    get isViewport() {
        return false;
    }
    get isViewportScope() {
        return true;
    }
    get isEmpty() {
        return this.content === null;
    }
    get passThroughScope() {
        return this.rootComponentType === null && this.catches.length === 0;
    }
    get siblings() {
        const parent = this.connectedScope.parent;
        if (parent === null) {
            return [this];
        }
        return parent.enabledChildren
            .filter(child => child.isViewportScope && child.viewportScope.name === this.name)
            .map(child => child.viewportScope);
    }
    get source() {
        return this.options.source || null;
    }
    get catches() {
        let catches = this.options.catches || [];
        if (typeof catches === 'string') {
            catches = catches.split(',');
        }
        return catches;
    }
    get default() {
        if (this.catches.length > 0) {
            return this.catches[0];
        }
    }
    setNextContent(content, instruction) {
        let viewportInstruction;
        if (content instanceof ViewportInstruction) {
            viewportInstruction = content;
        }
        else {
            if (typeof content === 'string') {
                viewportInstruction = this.router.instructionResolver.parseViewportInstruction(content);
            }
            else {
                viewportInstruction = this.router.createViewportInstruction(content);
            }
        }
        viewportInstruction.viewportScope = this;
        this.remove = this.router.instructionResolver.isClearViewportInstruction(viewportInstruction)
            || this.router.instructionResolver.isClearAllViewportsInstruction(viewportInstruction);
        this.add = this.router.instructionResolver.isAddViewportInstruction(viewportInstruction)
            && Array.isArray(this.source);
        if (this.add) {
            viewportInstruction.componentName = null;
        }
        if (this.default !== void 0 && viewportInstruction.componentName === null) {
            viewportInstruction.componentName = this.default;
        }
        this.nextContent = viewportInstruction;
        return true;
    }
    canLeave() {
        return Promise.resolve(true);
    }
    canEnter() {
        return Promise.resolve(true);
    }
    enter() {
        return Promise.resolve(true);
    }
    loadContent() {
        this.content = !this.remove ? this.nextContent : null;
        this.nextContent = null;
        return Promise.resolve(true);
    }
    finalizeContentChange() {
        // console.log('ViewportScope finalizing', this.content);
        if (this.remove && Array.isArray(this.source)) {
            this.removeSourceItem();
        }
    }
    abortContentChange() {
        this.nextContent = null;
        if (this.add) {
            const index = this.source.indexOf(this.sourceItem);
            this.source.splice(index, 1);
            this.sourceItem = null;
        }
        return Promise.resolve();
    }
    acceptSegment(segment) {
        if (segment === null && segment === void 0 || segment.length === 0) {
            return true;
        }
        if (segment === this.router.instructionResolver.clearViewportInstruction
            || segment === this.router.instructionResolver.addViewportInstruction
            || segment === this.name) {
            return true;
        }
        if (this.catches.length === 0) {
            return true;
        }
        if (this.catches.includes(segment)) {
            return true;
        }
        if (this.catches.filter((value) => value.includes('*')).length) {
            return true;
        }
        return false;
    }
    beforeBind() {
        const source = this.source || [];
        if (source.length > 0 && this.sourceItem === null) {
            this.sourceItem = this.getAvailableSourceItem();
        }
    }
    beforeUnbind() {
        if (this.sourceItem !== null && this.source !== null) {
            arrayRemove(this.source, (item) => item === this.sourceItem);
        }
        this.sourceItem = null;
    }
    getAvailableSourceItem() {
        if (this.source === null) {
            return null;
        }
        const siblings = this.siblings;
        for (const item of this.source) {
            if (siblings.every(sibling => sibling.sourceItem !== item)) {
                return item;
            }
        }
        return null;
    }
    addSourceItem() {
        const item = {};
        this.source.push(item);
        return item;
    }
    removeSourceItem() {
        this.sourceItemIndex = this.source.indexOf(this.sourceItem);
        if (this.sourceItemIndex >= 0) {
            this.source.splice(this.sourceItemIndex, 1);
        }
    }
    getRoutes() {
        if (this.rootComponentType !== null) {
            return this.rootComponentType.routes;
        }
        return null;
    }
}

class FoundRoute {
    constructor(match = null, matching = '', instructions = [], remaining = '') {
        this.match = match;
        this.matching = matching;
        this.instructions = instructions;
        this.remaining = remaining;
    }
    get foundConfiguration() {
        return this.match !== null;
    }
    get foundInstructions() {
        return this.instructions.length > 0;
    }
    get hasRemaining() {
        return this.remaining !== null && this.remaining.length > 0;
    }
}

class Collection extends Array {
    constructor() {
        super(...arguments);
        this.currentIndex = -1;
    }
    next() {
        if (this.length > this.currentIndex + 1) {
            return this[++this.currentIndex];
        }
        else {
            this.currentIndex = -1;
            return null;
        }
    }
    removeCurrent() {
        this.splice(this.currentIndex--, 1);
    }
    remove(instruction) {
        arrayRemove(this, value => value === instruction);
    }
}

/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
class ConfigurableRoute {
    constructor(path, caseSensitive, handler) {
        this.path = path;
        this.caseSensitive = caseSensitive;
        this.handler = handler;
    }
}
class Endpoint {
    constructor(route, paramNames) {
        this.route = route;
        this.paramNames = paramNames;
    }
}
class RecognizedRoute {
    constructor(endpoint, params, searchParams, isDynamic, queryString) {
        this.endpoint = endpoint;
        this.params = params;
        this.searchParams = searchParams;
        this.isDynamic = isDynamic;
        this.queryString = queryString;
    }
}
class Candidate {
    constructor(chars, states, skippedStates, result) {
        var _a;
        this.chars = chars;
        this.states = states;
        this.skippedStates = skippedStates;
        this.result = result;
        this.head = states[states.length - 1];
        this.endpoint = (_a = this.head) === null || _a === void 0 ? void 0 : _a.endpoint;
    }
    advance(ch) {
        const { chars, states, skippedStates, result } = this;
        let stateToAdd = null;
        let matchCount = 0;
        const state = states[states.length - 1];
        function $process(nextState, skippedState) {
            if (nextState.isMatch(ch)) {
                if (++matchCount === 1) {
                    stateToAdd = nextState;
                }
                else {
                    result.add(new Candidate(chars.concat(ch), states.concat(nextState), skippedState === null ? skippedStates : skippedStates.concat(skippedState), result));
                }
            }
            if (state.segment === null && nextState.isOptional && nextState.nextStates !== null) {
                if (nextState.nextStates.length > 1) {
                    throw new Error(`${nextState.nextStates.length} nextStates`);
                }
                const separator = nextState.nextStates[0];
                if (!separator.isSeparator) {
                    throw new Error(`Not a separator`);
                }
                if (separator.nextStates !== null) {
                    for (const $nextState of separator.nextStates) {
                        $process($nextState, nextState);
                    }
                }
            }
        }
        if (state.isDynamic) {
            $process(state, null);
        }
        if (state.nextStates !== null) {
            for (const nextState of state.nextStates) {
                $process(nextState, null);
            }
        }
        if (stateToAdd !== null) {
            states.push(this.head = stateToAdd);
            chars.push(ch);
            if (stateToAdd.endpoint !== null) {
                this.endpoint = stateToAdd.endpoint;
            }
        }
        if (matchCount === 0) {
            result.remove(this);
        }
    }
    finalize() {
        function collectSkippedStates(skippedStates, state) {
            const nextStates = state.nextStates;
            if (nextStates !== null) {
                if (nextStates.length === 1 && nextStates[0].segment === null) {
                    collectSkippedStates(skippedStates, nextStates[0]);
                }
                else {
                    for (const nextState of nextStates) {
                        if (nextState.isOptional && nextState.endpoint !== null) {
                            skippedStates.push(nextState);
                            if (nextState.nextStates !== null) {
                                for (const $nextState of nextState.nextStates) {
                                    collectSkippedStates(skippedStates, $nextState);
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
        collectSkippedStates(this.skippedStates, this.head);
    }
    getParams() {
        const { states, chars, endpoint } = this;
        const params = {};
        // First initialize all properties with undefined so they all exist (even if they're not filled, e.g. non-matched optional params)
        for (const name of endpoint.paramNames) {
            params[name] = void 0;
        }
        for (let i = 0, ii = states.length; i < ii; ++i) {
            const state = states[i];
            if (state.isDynamic) {
                const name = state.segment.name;
                if (params[name] === void 0) {
                    params[name] = chars[i];
                }
                else {
                    params[name] += chars[i];
                }
            }
        }
        return params;
    }
    /**
     * Compares this candidate to another candidate to determine the correct sorting order.
     *
     * This algorithm is different from `sortSolutions` in v1's route-recognizer in that it compares
     * the candidates segment-by-segment, rather than merely comparing the cumulative of segment types
     *
     * This resolves v1's ambiguity in situations like `/foo/:id/bar` vs. `/foo/bar/:id`, which had the
     * same sorting value because they both consist of two static segments and one dynamic segment.
     *
     * With this algorithm, `/foo/bar/:id` would always be sorted first because the second segment is different,
     * and static wins over dynamic.
     *
     * ### NOTE
     * This algorithm violates some of the invariants of v1's algorithm,
     * but those invariants were arguably not very sound to begin with. Example:
     *
     * `/foo/*path/bar/baz` vs. `/foo/bar/*path1/*path2`
     * - in v1, the first would win because that match has fewer stars
     * - in v2, the second will win because there is a bigger static match at the start of the pattern
     *
     * The algorithm should be more logical and easier to reason about in v2, but it's important to be aware of
     * subtle difference like this which might surprise some users who happened to rely on this behavior from v1,
     * intentionally or unintentionally.
     *
     * @param b - The candidate to compare this to.
     * Parameter name is `b` because the method should be used like so: `states.sort((a, b) => a.compareTo(b))`.
     * This will bring the candidate with the highest score to the first position of the array.
     */
    compareTo(b) {
        const statesA = this.states;
        const statesB = b.states;
        for (let iA = 0, iB = 0, ii = Math.max(statesA.length, statesB.length); iA < ii; ++iA) {
            let stateA = statesA[iA];
            if (stateA === void 0) {
                return 1;
            }
            let stateB = statesB[iB];
            if (stateB === void 0) {
                return -1;
            }
            let segmentA = stateA.segment;
            let segmentB = stateB.segment;
            if (segmentA === null) {
                if (segmentB === null) {
                    ++iB;
                    continue;
                }
                if ((stateA = statesA[++iA]) === void 0) {
                    return 1;
                }
                segmentA = stateA.segment;
            }
            else if (segmentB === null) {
                if ((stateB = statesB[++iB]) === void 0) {
                    return -1;
                }
                segmentB = stateB.segment;
            }
            if (segmentA.kind < segmentB.kind) {
                return 1;
            }
            if (segmentA.kind > segmentB.kind) {
                return -1;
            }
            ++iB;
        }
        const skippedStatesA = this.skippedStates;
        const skippedStatesB = b.skippedStates;
        const skippedStatesALen = skippedStatesA.length;
        const skippedStatesBLen = skippedStatesB.length;
        if (skippedStatesALen < skippedStatesBLen) {
            return 1;
        }
        if (skippedStatesALen > skippedStatesBLen) {
            return -1;
        }
        for (let i = 0; i < skippedStatesALen; ++i) {
            const skippedStateA = skippedStatesA[i];
            const skippedStateB = skippedStatesB[i];
            if (skippedStateA.length < skippedStateB.length) {
                return 1;
            }
            if (skippedStateA.length > skippedStateB.length) {
                return -1;
            }
        }
        // This should only be possible with a single pattern with multiple consecutive star segments.
        // TODO: probably want to warn or even throw here, but leave it be for now.
        return 0;
    }
}
function hasEndpoint(candidate) {
    return candidate.head.endpoint !== null;
}
function compareChains(a, b) {
    return a.compareTo(b);
}
class RecognizeResult {
    constructor(rootState) {
        this.candidates = [];
        this.candidates = [new Candidate([''], [rootState], [], this)];
    }
    get isEmpty() {
        return this.candidates.length === 0;
    }
    getSolution() {
        const candidates = this.candidates.filter(hasEndpoint);
        if (candidates.length === 0) {
            return null;
        }
        for (const candidate of candidates) {
            candidate.finalize();
        }
        candidates.sort(compareChains);
        return candidates[0];
    }
    add(candidate) {
        this.candidates.push(candidate);
    }
    remove(candidate) {
        this.candidates.splice(this.candidates.indexOf(candidate), 1);
    }
    advance(ch) {
        const candidates = this.candidates.slice();
        for (const candidate of candidates) {
            candidate.advance(ch);
        }
    }
}
class RouteRecognizer {
    constructor() {
        this.rootState = new State$2(null, null, '');
    }
    add(routeOrRoutes) {
        if (routeOrRoutes instanceof Array) {
            for (const route of routeOrRoutes) {
                this.add(route);
            }
            return;
        }
        const route = routeOrRoutes;
        const $route = new ConfigurableRoute(route.path, route.caseSensitive === true, route.handler);
        const parts = parsePath($route.path);
        const paramNames = [];
        let state = this.rootState;
        for (const part of parts) {
            // Each segment always begins with a slash, so we represent this with a non-segment state
            state = state.append(null, '/');
            switch (part.charAt(0)) {
                case ':': { // route parameter
                    const isOptional = part.endsWith('?');
                    const name = isOptional ? part.slice(1, -1) : part.slice(1);
                    paramNames.push(name);
                    state = new DynamicSegment$1(name, isOptional).appendTo(state);
                    break;
                }
                case '*': { // dynamic route
                    const name = part.slice(1);
                    paramNames.push(name);
                    state = new StarSegment(name).appendTo(state);
                    break;
                }
                default: { // standard path route
                    state = new StaticSegment$1(part, $route.caseSensitive).appendTo(state);
                    break;
                }
            }
        }
        const endpoint = new Endpoint($route, paramNames);
        state.setEndpoint(endpoint);
    }
    recognize(path) {
        let searchParams;
        let queryString = '';
        const queryStart = path.indexOf('?');
        if (queryStart >= 0) {
            queryString = path.slice(queryStart + 1);
            path = path.slice(0, queryStart);
            searchParams = new URLSearchParams(queryString);
        }
        else {
            searchParams = new URLSearchParams();
        }
        path = decodeURI(path);
        if (!path.startsWith('/')) {
            path = `/${path}`;
        }
        if (path.length > 1 && path.endsWith('/')) {
            path = path.slice(0, -1);
        }
        const result = new RecognizeResult(this.rootState);
        for (let i = 0, ii = path.length; i < ii; ++i) {
            const ch = path.charAt(i);
            result.advance(ch);
            if (result.isEmpty) {
                return null;
            }
        }
        const candidate = result.getSolution();
        if (candidate === null) {
            return null;
        }
        const { endpoint } = candidate;
        const params = candidate.getParams();
        const isDynamic = candidate.endpoint.paramNames.length > 0;
        return new RecognizedRoute(endpoint, params, searchParams, isDynamic, queryString);
    }
}
class State$2 {
    constructor(prevState, segment, value) {
        this.prevState = prevState;
        this.segment = segment;
        this.value = value;
        this.nextStates = null;
        this.endpoint = null;
        switch (segment === null || segment === void 0 ? void 0 : segment.kind) {
            case 2 /* dynamic */:
                this.length = prevState.length + 1;
                this.isSeparator = false;
                this.isDynamic = true;
                this.isOptional = segment.optional;
                break;
            case 1 /* star */:
                this.length = prevState.length + 1;
                this.isSeparator = false;
                this.isDynamic = true;
                this.isOptional = false;
                break;
            case 3 /* static */:
                this.length = prevState.length + 1;
                this.isSeparator = false;
                this.isDynamic = false;
                this.isOptional = false;
                break;
            case undefined:
                this.length = prevState === null ? 0 : prevState.length;
                this.isSeparator = true;
                this.isDynamic = false;
                this.isOptional = false;
                break;
        }
    }
    append(segment, value) {
        let state;
        let nextStates = this.nextStates;
        if (nextStates === null) {
            state = void 0;
            nextStates = this.nextStates = [];
        }
        else if (segment === null) {
            state = nextStates.find(s => s.value === value);
        }
        else {
            state = nextStates.find(s => { var _a; return (_a = s.segment) === null || _a === void 0 ? void 0 : _a.equals(segment); });
        }
        if (state === void 0) {
            nextStates.push(state = new State$2(this, segment, value));
        }
        return state;
    }
    setEndpoint(endpoint) {
        if (this.endpoint !== null) {
            throw new Error(`Cannot add ambiguous route. The pattern ${endpoint.route.path} clashes with ${this.endpoint.route.path}`);
        }
        this.endpoint = endpoint;
        if (this.isOptional) {
            this.prevState.setEndpoint(endpoint);
            if (this.prevState.isSeparator && this.prevState.prevState !== null) {
                this.prevState.prevState.setEndpoint(endpoint);
            }
        }
    }
    isMatch(ch) {
        const segment = this.segment;
        switch (segment === null || segment === void 0 ? void 0 : segment.kind) {
            case 2 /* dynamic */:
                return !this.value.includes(ch);
            case 1 /* star */:
                return true;
            case 3 /* static */:
            case undefined:
                // segment separators (slashes) are non-segments. We could say return ch === '/' as well, technically.
                return this.value.includes(ch);
        }
    }
}
function isNotEmpty(segment) {
    return segment.length > 0;
}
function parsePath(path) {
    // Normalize leading, trailing and double slashes by ignoring empty segments
    return path.split('/').filter(isNotEmpty);
}
var SegmentKind;
(function (SegmentKind) {
    SegmentKind[SegmentKind["star"] = 1] = "star";
    SegmentKind[SegmentKind["dynamic"] = 2] = "dynamic";
    SegmentKind[SegmentKind["static"] = 3] = "static";
})(SegmentKind || (SegmentKind = {}));
class StaticSegment$1 {
    constructor(value, caseSensitive) {
        this.value = value;
        this.caseSensitive = caseSensitive;
    }
    get kind() { return 3 /* static */; }
    appendTo(state) {
        const { value, value: { length } } = this;
        if (this.caseSensitive) {
            for (let i = 0; i < length; ++i) {
                state = state.append(
                /* segment */ this, 
                /* value   */ value.charAt(i));
            }
        }
        else {
            for (let i = 0; i < length; ++i) {
                const ch = value.charAt(i);
                state = state.append(
                /* segment */ this, 
                /* value   */ ch.toUpperCase() + ch.toLowerCase());
            }
        }
        return state;
    }
    equals(b) {
        return (b.kind === 3 /* static */ &&
            b.caseSensitive === this.caseSensitive &&
            b.value === this.value);
    }
}
class DynamicSegment$1 {
    constructor(name, optional) {
        this.name = name;
        this.optional = optional;
    }
    get kind() { return 2 /* dynamic */; }
    appendTo(state) {
        state = state.append(
        /* segment */ this, 
        /* value   */ '/');
        return state;
    }
    equals(b) {
        return (b.kind === 2 /* dynamic */ &&
            b.optional === this.optional &&
            b.name === this.name);
    }
}
class StarSegment {
    constructor(name) {
        this.name = name;
    }
    get kind() { return 1 /* star */; }
    appendTo(state) {
        state = state.append(
        /* segment */ this, 
        /* value   */ '');
        return state;
    }
    equals(b) {
        return (b.kind === 1 /* star */ &&
            b.name === this.name);
    }
}

const RouteRecognizer$1 = RouteRecognizer;

class Scope$1 {
    constructor(router, hasScope, owningScope, viewport = null, viewportScope = null, rootComponentType = null) {
        this.router = router;
        this.hasScope = hasScope;
        this.owningScope = owningScope;
        this.viewport = viewport;
        this.viewportScope = viewportScope;
        this.rootComponentType = rootComponentType;
        this.id = '.';
        this.parent = null;
        this.children = [];
        this.replacedChildren = [];
        this.path = null;
        this.enabled = true;
        // Support collection feature in viewport scopes
        this.childCollections = {};
        this.owningScope = owningScope || this;
        this.scope = this.hasScope ? this : this.owningScope;
    }
    get isViewport() {
        return this.viewport !== null;
    }
    get isViewportScope() {
        return this.viewportScope !== null;
    }
    get passThroughScope() {
        return this.isViewportScope && this.viewportScope.passThroughScope;
    }
    get owner() {
        if (this.isViewport) {
            return this.viewport;
        }
        if (this.isViewportScope) {
            return this.viewportScope;
        }
        return null;
    }
    get enabledChildren() {
        return this.children.filter(scope => scope.enabled);
    }
    get hoistedChildren() {
        const scopes = this.enabledChildren;
        while (scopes.some(scope => scope.passThroughScope)) {
            for (const scope of scopes.slice()) {
                if (scope.passThroughScope) {
                    const index = scopes.indexOf(scope);
                    scopes.splice(index, 1, ...scope.enabledChildren);
                }
            }
        }
        return scopes;
    }
    get enabledViewports() {
        return this.children.filter(scope => scope.isViewport && scope.enabled)
            .map(scope => scope.viewport);
    }
    get viewportInstruction() {
        if (this.isViewportScope) {
            return this.viewportScope.content;
        }
        if (this.isViewport) {
            return this.viewport.content.content;
        }
        return null;
    }
    getEnabledViewports(viewportScopes) {
        return viewportScopes.filter(scope => !scope.isViewportScope).map(scope => scope.viewport).reduce((viewports, viewport) => {
            viewports[viewport.name] = viewport;
            return viewports;
        }, {});
    }
    getOwnedViewports(includeDisabled = false) {
        return this.allViewports(includeDisabled).filter(viewport => viewport.owningScope === this);
    }
    getOwnedScopes(includeDisabled = false) {
        const scopes = this.allScopes(includeDisabled).filter(scope => scope.owningScope === this);
        // Hoist children to pass through scopes
        for (const scope of scopes.slice()) {
            if (scope.passThroughScope) {
                const index = scopes.indexOf(scope);
                scopes.splice(index, 1, ...scope.getOwnedScopes());
            }
        }
        return scopes;
    }
    // Note: This can't change state other than the instructions!
    findViewports(instructions, alreadyFound, disregardViewports = false) {
        const foundViewports = [];
        let remainingInstructions = [];
        const ownedScopes = this.getOwnedScopes();
        // Get a shallow copy of all available manual viewport scopes
        const viewportScopes = ownedScopes.filter(scope => scope.isViewportScope).map(scope => scope.viewportScope);
        const availableViewportScopes = viewportScopes.filter(viewportScope => alreadyFound.every(found => found.viewportScope !== viewportScope));
        // Get a shallow copy of all available viewports
        const availableViewports = { ...this.getEnabledViewports(ownedScopes) };
        for (const instruction of alreadyFound.filter(found => found.scope === this)) {
            availableViewports[instruction.viewportName] = null;
        }
        const viewportInstructions = new Collection(...instructions.slice());
        let instruction = null;
        // The viewport scope is already known
        while ((instruction = viewportInstructions.next()) !== null) {
            if (instruction.viewportScope !== null && !this.router.instructionResolver.isAddViewportInstruction(instruction)) {
                remainingInstructions.push(...this.foundViewportScope(instruction, instruction.viewportScope));
                foundViewports.push(instruction);
                arrayRemove(availableViewportScopes, available => available === instruction.viewportScope);
                viewportInstructions.removeCurrent();
            }
        }
        // The viewport is already known
        if (!disregardViewports) {
            while ((instruction = viewportInstructions.next()) !== null) {
                if (instruction.viewport) {
                    remainingInstructions.push(...this.foundViewport(instruction, instruction.viewport, disregardViewports));
                    foundViewports.push(instruction);
                    availableViewports[instruction.viewport.name] = null;
                    viewportInstructions.removeCurrent();
                }
            }
        }
        // Viewport scopes have priority
        while ((instruction = viewportInstructions.next()) !== null) {
            for (let viewportScope of viewportScopes) {
                if (viewportScope.acceptSegment(instruction.componentName)) {
                    if (Array.isArray(viewportScope.source)) {
                        // console.log('available', viewportScope.available, source);
                        let available = availableViewportScopes.find(available => available.name === viewportScope.name);
                        if (available === void 0 || this.router.instructionResolver.isAddViewportInstruction(instruction)) {
                            const item = viewportScope.addSourceItem();
                            available = this.getOwnedScopes()
                                .filter(scope => scope.isViewportScope)
                                .map(scope => scope.viewportScope)
                                .find(viewportScope => viewportScope.sourceItem === item);
                        }
                        viewportScope = available;
                    }
                    remainingInstructions.push(...this.foundViewportScope(instruction, viewportScope));
                    foundViewports.push(instruction);
                    arrayRemove(availableViewportScopes, available => available === instruction.viewportScope);
                    viewportInstructions.removeCurrent();
                    break;
                }
            }
        }
        // Configured viewport is ruling
        while ((instruction = viewportInstructions.next()) !== null) {
            instruction.needsViewportDescribed = true;
            for (const name in availableViewports) {
                if (Object.prototype.hasOwnProperty.call(availableViewports, name)) {
                    const viewport = availableViewports[name];
                    // TODO: Also check if (resolved) component wants a specific viewport
                    if (viewport && viewport.wantComponent(instruction.componentName)) {
                        const remaining = this.foundViewport(instruction, viewport, disregardViewports, true);
                        foundViewports.push(instruction);
                        remainingInstructions.push(...remaining);
                        availableViewports[name] = null;
                        viewportInstructions.removeCurrent();
                        break;
                    }
                }
            }
        }
        // Next in line is specified viewport (but not if we're disregarding viewports)
        if (!disregardViewports) {
            while ((instruction = viewportInstructions.next()) !== null) {
                const name = instruction.viewportName;
                if (!name || !name.length) {
                    continue;
                }
                const newScope = instruction.ownsScope;
                if (!this.getEnabledViewports(ownedScopes)[name]) {
                    continue;
                }
                const viewport = availableViewports[name];
                if (viewport && viewport.acceptComponent(instruction.componentName)) {
                    const remaining = this.foundViewport(instruction, viewport, disregardViewports, true);
                    foundViewports.push(instruction);
                    remainingInstructions.push(...remaining);
                    availableViewports[name] = null;
                    viewportInstructions.removeCurrent();
                }
            }
        }
        // Finally, only one accepting viewport left?
        while ((instruction = viewportInstructions.next()) !== null) {
            const remainingViewports = [];
            for (const name in availableViewports) {
                if (Object.prototype.hasOwnProperty.call(availableViewports, name)) {
                    const viewport = availableViewports[name];
                    if (viewport && viewport.acceptComponent(instruction.componentName)) {
                        remainingViewports.push(viewport);
                    }
                }
            }
            if (remainingViewports.length === 1) {
                const viewport = remainingViewports.shift();
                const remaining = this.foundViewport(instruction, viewport, disregardViewports, true);
                foundViewports.push(instruction);
                remainingInstructions.push(...remaining);
                availableViewports[viewport.name] = null;
                viewportInstructions.removeCurrent();
            }
        }
        // If we're ignoring viewports, we now match them anyway
        if (disregardViewports) {
            while ((instruction = viewportInstructions.next()) !== null) {
                let viewport = instruction.viewport;
                if (!viewport) {
                    const name = instruction.viewportName;
                    if (!name || !name.length) {
                        continue;
                    }
                    const newScope = instruction.ownsScope;
                    if (!this.getEnabledViewports(ownedScopes)[name]) {
                        continue;
                    }
                    viewport = availableViewports[name];
                }
                if (viewport && viewport.acceptComponent(instruction.componentName)) {
                    const remaining = this.foundViewport(instruction, viewport, disregardViewports);
                    foundViewports.push(instruction);
                    remainingInstructions.push(...remaining);
                    availableViewports[viewport.name] = null;
                    viewportInstructions.removeCurrent();
                }
            }
        }
        remainingInstructions = [...viewportInstructions, ...remainingInstructions];
        return {
            foundViewports,
            remainingInstructions,
        };
    }
    foundViewportScope(instruction, viewportScope) {
        instruction.viewportScope = viewportScope;
        instruction.needsViewportDescribed = false;
        const remaining = (instruction.nextScopeInstructions || []).slice();
        for (const rem of remaining) {
            if (rem.scope === null) {
                rem.scope = viewportScope.scope.scope;
            }
        }
        return remaining;
    }
    foundViewport(instruction, viewport, withoutViewports, doesntNeedViewportDescribed = false) {
        instruction.setViewport(viewport);
        if (doesntNeedViewportDescribed) {
            instruction.needsViewportDescribed = false;
        }
        const remaining = (instruction.nextScopeInstructions || []).slice();
        for (const rem of remaining) {
            if (rem.scope === null) {
                rem.scope = viewport.scope;
            }
        }
        return remaining;
    }
    addViewport(name, element, container, options = {}) {
        let viewport = this.getEnabledViewports(this.getOwnedScopes())[name];
        // Each au-viewport element has its own Viewport
        if (element && viewport && viewport.element !== null && viewport.element !== element) {
            viewport.enabled = false;
            viewport = this.getOwnedViewports(true).find(child => child.name === name && child.element === element) || null;
            if (viewport) {
                viewport.enabled = true;
            }
        }
        if (!viewport) {
            viewport = new Viewport(this.router, name, null, null, this.scope, !!options.scope, options);
            this.addChild(viewport.connectedScope);
        }
        // TODO: Either explain why || instead of && here (might only need one) or change it to && if that should turn out to not be relevant
        if (element || container) {
            viewport.setElement(element, container, options);
        }
        return viewport;
    }
    removeViewport(viewport, element, container) {
        if ((!element && !container) || viewport.remove(element, container)) {
            this.removeChild(viewport.connectedScope);
            return true;
        }
        return false;
    }
    addViewportScope(name, element, options = {}) {
        const viewportScope = new ViewportScope(name, this.router, element, this.scope, true, null, options);
        this.addChild(viewportScope.connectedScope);
        return viewportScope;
    }
    removeViewportScope(viewportScope) {
        // viewportScope.remove();
        this.removeChild(viewportScope.connectedScope);
        return true;
    }
    addChild(scope) {
        if (!this.children.some(vp => vp === scope)) {
            if (scope.parent !== null) {
                scope.parent.removeChild(scope);
            }
            this.children.push(scope);
            scope.parent = this;
        }
    }
    removeChild(scope) {
        const index = this.children.indexOf(scope);
        if (index >= 0) {
            this.children.splice(index, 1);
            scope.parent = null;
        }
    }
    clearReplacedChildren() {
        this.replacedChildren = [];
    }
    disableReplacedChildren() {
        this.replacedChildren = this.enabledChildren;
        for (const scope of this.replacedChildren) {
            scope.enabled = false;
        }
    }
    reenableReplacedChildren() {
        for (const scope of this.replacedChildren) {
            scope.enabled = true;
        }
    }
    allViewports(includeDisabled = false, includeReplaced = false) {
        return this.allScopes(includeDisabled, includeReplaced).filter(scope => scope.isViewport).map(scope => scope.viewport);
    }
    allScopes(includeDisabled = false, includeReplaced = false) {
        const scopes = includeDisabled ? this.children.slice() : this.enabledChildren;
        for (const scope of scopes.slice()) {
            scopes.push(...scope.allScopes(includeDisabled, includeReplaced));
        }
        return scopes;
    }
    reparentViewportInstructions() {
        const scopes = this.hoistedChildren
            .filter(scope => scope.viewportInstruction !== null && scope.viewportInstruction.componentName);
        if (!scopes.length) {
            return null;
        }
        for (const scope of scopes) {
            const childInstructions = scope.reparentViewportInstructions();
            scope.viewportInstruction.nextScopeInstructions =
                childInstructions !== null && childInstructions.length > 0 ? childInstructions : null;
        }
        return scopes.map(scope => scope.viewportInstruction);
    }
    findMatchingRoute(path) {
        if (this.isViewportScope && !this.passThroughScope) {
            return this.findMatchingRouteInRoutes(path, this.viewportScope.getRoutes());
        }
        if (this.isViewport) {
            return this.findMatchingRouteInRoutes(path, this.viewport.getRoutes());
        }
        // TODO: Match specified names here
        for (const child of this.enabledChildren) {
            const found = child.findMatchingRoute(path);
            if (found !== null) {
                return found;
            }
        }
        return null;
    }
    async canLeave() {
        const results = await Promise.all(this.children.map(child => child.viewport !== null
            ? child.viewport.canLeave()
            : child.canLeave()));
        return !results.some(result => result === false);
    }
    findMatchingRouteInRoutes(path, routes) {
        if (!Array.isArray(routes)) {
            return null;
        }
        routes = routes.map(route => this.ensureProperRoute(route));
        const cRoutes = routes.map(route => ({
            path: route.path,
            handler: route,
        }));
        for (let i = 0, ii = cRoutes.length; i < ii; ++i) {
            const cRoute = cRoutes[i];
            cRoutes.push({
                ...cRoute,
                path: `${cRoute.path}/*remainingPath`,
            });
        }
        const found = new FoundRoute();
        let params = {};
        if (path.startsWith('/') || path.startsWith('+')) {
            path = path.slice(1);
        }
        const recognizer = new RouteRecognizer$1();
        recognizer.add(cRoutes);
        const result = recognizer.recognize(path);
        if (result !== null) {
            found.match = result.endpoint.route.handler;
            found.matching = path;
            const $params = { ...result.params };
            if ($params.remainingPath !== void 0) {
                found.remaining = $params.remainingPath;
                Reflect.deleteProperty($params, 'remainingPath');
                found.matching = found.matching.slice(0, found.matching.indexOf(found.remaining));
            }
            params = $params;
        }
        if (found.foundConfiguration) {
            // clone it so config doesn't get modified
            found.instructions = this.router.instructionResolver.cloneViewportInstructions(found.match.instructions, false, true);
            const instructions = found.instructions.slice();
            while (instructions.length > 0) {
                const instruction = instructions.shift();
                instruction.addParameters(params);
                instruction.route = '';
                if (instruction.nextScopeInstructions !== null) {
                    instructions.unshift(...instruction.nextScopeInstructions);
                }
            }
            if (found.instructions.length > 0) {
                found.instructions[0].route = found.matching;
            }
        }
        return found;
    }
    ensureProperRoute(route) {
        if (route.id === void 0) {
            route.id = route.path;
        }
        route.instructions = NavigationInstructionResolver.toViewportInstructions(this.router, route.instructions);
        return route;
    }
}

class Viewport {
    constructor(router, name, element, container, owningScope, scope, options = {}) {
        this.router = router;
        this.name = name;
        this.element = element;
        this.container = container;
        this.options = options;
        this.nextContent = null;
        this.forceRemove = false;
        this.path = null;
        this.clear = false;
        this.elementResolve = null;
        this.previousViewportState = null;
        this.cache = [];
        this.historyCache = [];
        this.content = new ViewportContent();
        this.connectedScope = new Scope$1(router, scope, owningScope, this);
    }
    get scope() {
        return this.connectedScope.scope;
    }
    get owningScope() {
        return this.connectedScope.owningScope;
    }
    get enabled() {
        return this.connectedScope.enabled;
    }
    set enabled(enabled) {
        this.connectedScope.enabled = enabled;
    }
    get isViewport() {
        return true;
    }
    get isViewportScope() {
        return false;
    }
    get isEmpty() {
        return this.content.componentInstance === null;
    }
    get doForceRemove() {
        let scope = this.connectedScope;
        while (scope !== null) {
            if (scope.viewport !== null && scope.viewport.forceRemove) {
                return true;
            }
            scope = scope.parent;
        }
        return false;
    }
    setNextContent(content, instruction) {
        let viewportInstruction;
        if (content instanceof ViewportInstruction) {
            viewportInstruction = content;
        }
        else {
            if (typeof content === 'string') {
                viewportInstruction = this.router.instructionResolver.parseViewportInstruction(content);
            }
            else {
                viewportInstruction = this.router.createViewportInstruction(content);
            }
        }
        viewportInstruction.setViewport(this);
        this.clear = this.router.instructionResolver.isClearViewportInstruction(viewportInstruction);
        // Can have a (resolved) type or a string (to be resolved later)
        this.nextContent = new ViewportContent(!this.clear ? viewportInstruction : void 0, instruction, this.container);
        this.nextContent.fromHistory = this.nextContent.componentInstance && instruction.navigation
            ? !!instruction.navigation.back || !!instruction.navigation.forward
            : false;
        if (this.options.stateful) {
            // TODO: Add a parameter here to decide required equality
            const cached = this.cache.find((item) => this.nextContent.isCacheEqual(item));
            if (cached) {
                this.nextContent = cached;
                this.nextContent.fromCache = true;
            }
            else {
                this.cache.push(this.nextContent);
            }
        }
        // Children that will be replaced (unless added again) by next content. Will
        // be re-enabled on cancel
        this.connectedScope.clearReplacedChildren();
        // If we get the same _instance_, don't do anything (happens with cached and history)
        if (this.nextContent.componentInstance !== null && this.content.componentInstance === this.nextContent.componentInstance) {
            this.nextContent = null;
            return false;
        }
        // ReentryBehavior 'refresh' takes precedence
        if (!this.content.equalComponent(this.nextContent) ||
            instruction.navigation.refresh ||
            this.content.reentryBehavior() === "refresh" /* refresh */) {
            this.connectedScope.disableReplacedChildren();
            return true;
        }
        // Explicitly don't allow navigation back to the same component again
        if (this.content.reentryBehavior() === "disallow" /* disallow */) {
            this.nextContent = null;
            return false;
        }
        // Explicitly re-enter same component again
        if (this.content.reentryBehavior() === "enter" /* enter */) {
            this.content.reentry = true;
            this.nextContent.content.setComponent(this.content.componentInstance);
            this.nextContent.contentStatus = this.content.contentStatus;
            this.nextContent.reentry = this.content.reentry;
            return true;
        }
        // ReentryBehavior is now 'default'
        // Requires updated parameters if viewport stateful
        if (this.options.stateful &&
            this.content.equalParameters(this.nextContent)) {
            this.nextContent = null;
            return false;
        }
        // Default is to trigger a refresh (without a check of parameters)
        this.connectedScope.disableReplacedChildren();
        return true;
    }
    setElement(element, container, options) {
        options = options || {};
        if (this.element !== element) {
            // TODO: Restore this state on navigation cancel
            this.previousViewportState = { ...this };
            this.clearState();
            this.element = element;
            if (options.usedBy) {
                this.options.usedBy = options.usedBy;
            }
            if (options.default) {
                this.options.default = options.default;
            }
            if (options.fallback) {
                this.options.fallback = options.fallback;
            }
            if (options.noLink) {
                this.options.noLink = options.noLink;
            }
            if (options.noHistory) {
                this.options.noHistory = options.noHistory;
            }
            if (options.stateful) {
                this.options.stateful = options.stateful;
            }
            if (this.elementResolve) {
                this.elementResolve();
            }
        }
        // TODO: Might not need this? Figure it out
        // if (container) {
        //   container['viewportName'] = this.name;
        // }
        if (this.container !== container) {
            this.container = container;
        }
        if (!this.content.componentInstance && (!this.nextContent || !this.nextContent.componentInstance) && this.options.default) {
            const instructions = this.router.instructionResolver.parseViewportInstructions(this.options.default);
            for (const instruction of instructions) {
                // Set to name to be delayed one turn
                instruction.setViewport(this.name);
                instruction.scope = this.owningScope;
                instruction.default = true;
            }
            this.router.goto(instructions, { append: true }).catch(error => { throw error; });
        }
    }
    async remove(element, container) {
        if (this.element === element && this.container === container) {
            if (this.content.componentInstance) {
                await this.content.freeContent(this.element, (this.nextContent ? this.nextContent.instruction : null), this.historyCache, this.doForceRemove ? false : this.router.statefulHistory || this.options.stateful); // .catch(error => { throw error; });
            }
            if (this.doForceRemove) {
                await Promise.all(this.historyCache.map(content => content.freeContent(null, null, this.historyCache, false)));
                this.historyCache = [];
            }
            return true;
        }
        return false;
    }
    async canLeave() {
        const canLeaveChildren = await this.connectedScope.canLeave();
        if (!canLeaveChildren) {
            return false;
        }
        return this.content.canLeave(this.nextContent ? this.nextContent.instruction : null);
    }
    async canEnter() {
        if (this.clear) {
            return true;
        }
        if ((this.nextContent.content || null) === null) {
            return false;
        }
        await this.waitForElement();
        this.nextContent.createComponent(this.container, this.options.fallback);
        await this.nextContent.loadComponent(this.container, this.element, this);
        return this.nextContent.canEnter(this, this.content.instruction);
    }
    async enter() {
        Reporter.write(10000, 'Viewport enter', this.name);
        if (this.clear) {
            return true;
        }
        if (!this.nextContent || !this.nextContent.componentInstance) {
            return false;
        }
        await this.nextContent.enter(this.content.instruction);
        // await this.nextContent.loadComponent(this.container as IContainer, this.element as Element, this);
        this.nextContent.initializeComponent(CustomElement.for(this.element));
        return true;
    }
    async loadContent() {
        Reporter.write(10000, 'Viewport loadContent', this.name);
        // No need to wait for next component activation
        if (this.content.componentInstance && !this.nextContent.componentInstance) {
            await this.content.leave(this.nextContent.instruction);
            await this.unloadContent();
        }
        if (this.nextContent.componentInstance) {
            if (this.content.componentInstance !== this.nextContent.componentInstance) {
                this.nextContent.addComponent(this.element);
            }
            else {
                this.connectedScope.reenableReplacedChildren();
            }
            // Only when next component activation is done
            if (this.content.componentInstance) {
                await this.content.leave(this.nextContent.instruction);
                if (!this.content.reentry && this.content.componentInstance !== this.nextContent.componentInstance) {
                    await this.unloadContent();
                }
            }
            this.content = this.nextContent;
            this.content.reentry = false;
        }
        if (this.clear) {
            this.content = new ViewportContent(void 0, this.nextContent.instruction);
        }
        this.nextContent = null;
        return true;
    }
    finalizeContentChange() {
        this.previousViewportState = null;
        this.connectedScope.clearReplacedChildren();
    }
    async abortContentChange() {
        this.connectedScope.reenableReplacedChildren();
        await this.nextContent.freeContent(this.element, this.nextContent.instruction, this.historyCache, this.router.statefulHistory || this.options.stateful);
        if (this.previousViewportState) {
            Object.assign(this, this.previousViewportState);
        }
    }
    // TODO: Deal with non-string components
    wantComponent(component) {
        let usedBy = this.options.usedBy || [];
        if (typeof usedBy === 'string') {
            usedBy = usedBy.split(',');
        }
        return usedBy.includes(component);
    }
    // TODO: Deal with non-string components
    acceptComponent(component) {
        if (component === '-' || component === null) {
            return true;
        }
        let usedBy = this.options.usedBy;
        if (!usedBy || !usedBy.length) {
            return true;
        }
        if (typeof usedBy === 'string') {
            usedBy = usedBy.split(',');
        }
        if (usedBy.includes(component)) {
            return true;
        }
        if (usedBy.filter((value) => value.includes('*')).length) {
            return true;
        }
        return false;
    }
    beforeBind(flags) {
        if (this.content.componentInstance) {
            this.content.initializeComponent(CustomElement.for(this.element));
        }
    }
    async beforeAttach(flags) {
        this.enabled = true;
        if (this.content.componentInstance) {
            // Only acts if not already entered
            await this.content.enter(this.content.instruction);
            this.content.addComponent(this.element);
        }
    }
    async beforeDetach(flags) {
        if (this.content.componentInstance) {
            // Only acts if not already left
            await this.content.leave(this.content.instruction);
            this.content.removeComponent(this.element, this.doForceRemove ? false : this.router.statefulHistory || this.options.stateful);
        }
        this.enabled = false;
    }
    async beforeUnbind(flags) {
        if (this.content.componentInstance) {
            await this.content.terminateComponent(this.doForceRemove ? false : this.router.statefulHistory || this.options.stateful);
        }
    }
    async freeContent(component) {
        const content = this.historyCache.find(cached => cached.componentInstance === component);
        if (content !== void 0) {
            this.forceRemove = true;
            await content.freeContent(null, null, this.historyCache, false);
            this.forceRemove = false;
            arrayRemove(this.historyCache, (cached => cached === content));
        }
    }
    getRoutes() {
        let componentType = this.nextContent !== null
            && this.nextContent.content !== null
            ? this.nextContent.content.componentType
            : this.content.content.componentType;
        // TODO: This is going away once Metadata is in!
        if (componentType === null || componentType === void 0) {
            const controller = CustomElement.for(this.element);
            componentType = controller.context.componentType;
        }
        if (componentType === null || componentType === void 0) {
            return null;
        }
        const routes = componentType.routes;
        return Array.isArray(routes) ? routes : null;
    }
    async unloadContent() {
        this.content.removeComponent(this.element, this.router.statefulHistory || this.options.stateful);
        await this.content.terminateComponent(this.router.statefulHistory || this.options.stateful);
        this.content.unloadComponent(this.historyCache, this.router.statefulHistory || this.options.stateful);
        this.content.destroyComponent();
    }
    clearState() {
        this.options = {};
        this.content = new ViewportContent();
        this.cache = [];
    }
    async waitForElement() {
        if (this.element) {
            return Promise.resolve();
        }
        return new Promise((resolve) => {
            this.elementResolve = resolve;
        });
    }
}

const ComponentAppellationResolver = {
    isName: function (component) {
        return typeof component === 'string';
    },
    isType: function (component) {
        return CustomElement.isType(component);
    },
    isInstance: function (component) {
        return !ComponentAppellationResolver.isName(component) && !ComponentAppellationResolver.isType(component);
    },
    getName: function (component) {
        if (ComponentAppellationResolver.isName(component)) {
            return component;
        }
        else if (ComponentAppellationResolver.isType(component)) {
            return CustomElement.getDefinition(component).name;
        }
        else {
            return ComponentAppellationResolver.getName(component.constructor);
        }
    },
    getType: function (component) {
        if (ComponentAppellationResolver.isName(component)) {
            return null;
        }
        else if (ComponentAppellationResolver.isType(component)) {
            return component;
        }
        else {
            return component.constructor;
        }
    },
    getInstance: function (component) {
        if (ComponentAppellationResolver.isName(component) || ComponentAppellationResolver.isType(component)) {
            return null;
        }
        else {
            return component;
        }
    },
};
const ViewportHandleResolver = {
    isName: function (viewport) {
        return typeof viewport === 'string';
    },
    isInstance: function (viewport) {
        return viewport instanceof Viewport;
    },
    getName: function (viewport) {
        if (ViewportHandleResolver.isName(viewport)) {
            return viewport;
        }
        else {
            return viewport ? (viewport).name : null;
        }
    },
    getInstance: function (viewport) {
        if (ViewportHandleResolver.isName(viewport)) {
            return null;
        }
        else {
            return viewport;
        }
    },
};
const NavigationInstructionResolver = {
    createViewportInstructions: function (router, navigationInstructions, options) {
        options = options || {};
        let scope = null;
        if (options.context) {
            scope = router.findScope(options.context);
            if (typeof navigationInstructions === 'string') {
                // If it's not from scope root, figure out which scope
                if (!navigationInstructions.startsWith('/')) {
                    // Scope modifications
                    if (navigationInstructions.startsWith('.')) {
                        // The same as no scope modification
                        if (navigationInstructions.startsWith('./')) {
                            navigationInstructions = navigationInstructions.slice(2);
                        }
                        // Find out how many scopes upwards we should move
                        while (navigationInstructions.startsWith('../')) {
                            scope = scope.parent || scope;
                            navigationInstructions = navigationInstructions.slice(3);
                        }
                    }
                    if (scope.path !== null) {
                        navigationInstructions = `${scope.path}/${navigationInstructions}`;
                        scope = router.rootScope.scope;
                    }
                }
                else { // Specified root scope with /
                    scope = router.rootScope.scope;
                }
            }
            else {
                navigationInstructions = NavigationInstructionResolver.toViewportInstructions(router, navigationInstructions);
                for (const instruction of navigationInstructions) {
                    if (instruction.scope === null) {
                        instruction.scope = scope;
                    }
                }
            }
        }
        return {
            instructions: navigationInstructions,
            scope,
        };
    },
    toViewportInstructions: function (router, navigationInstructions) {
        if (!Array.isArray(navigationInstructions)) {
            return NavigationInstructionResolver.toViewportInstructions(router, [navigationInstructions]);
        }
        const instructions = [];
        for (const instruction of navigationInstructions) {
            if (typeof instruction === 'string') {
                instructions.push(...router.instructionResolver.parseViewportInstructions(instruction));
            }
            else if (instruction instanceof ViewportInstruction) {
                instructions.push(instruction);
            }
            else if (instruction.component) {
                const viewportComponent = instruction;
                const newInstruction = router.createViewportInstruction(viewportComponent.component, viewportComponent.viewport, viewportComponent.parameters);
                if (viewportComponent.children !== void 0 && viewportComponent.children !== null) {
                    newInstruction.nextScopeInstructions = NavigationInstructionResolver.toViewportInstructions(router, viewportComponent.children);
                }
                instructions.push(newInstruction);
            }
            else {
                instructions.push(router.createViewportInstruction(instruction));
            }
        }
        return instructions;
    },
};

var ParametersType;
(function (ParametersType) {
    ParametersType["none"] = "none";
    ParametersType["string"] = "string";
    ParametersType["array"] = "array";
    ParametersType["object"] = "object";
})(ParametersType || (ParametersType = {}));
class ViewportInstruction {
    constructor(component, viewport, parameters, ownsScope = true, nextScopeInstructions = null) {
        this.ownsScope = ownsScope;
        this.nextScopeInstructions = nextScopeInstructions;
        this.componentName = null;
        this.componentType = null;
        this.componentInstance = null;
        this.viewportName = null;
        this.viewport = null;
        this.parametersString = null;
        this.parametersRecord = null;
        this.parametersList = null;
        this.parametersType = "none" /* none */;
        this.scope = null;
        this.context = '';
        this.viewportScope = null;
        this.needsViewportDescribed = false;
        this.route = null;
        this.default = false;
        this.instructionResolver = null;
        this.setComponent(component);
        this.setViewport(viewport);
        this.setParameters(parameters);
    }
    get owner() {
        return this.viewport || this.viewportScope || null;
    }
    get typedParameters() {
        switch (this.parametersType) {
            case "string" /* string */:
                return this.parametersString;
            case "array" /* array */:
                return this.parametersList;
            case "object" /* object */:
                return this.parametersRecord;
            default:
                return null;
        }
    }
    get parameters() {
        if (this.instructionResolver !== null) {
            return this.instructionResolver.parseComponentParameters(this.typedParameters);
        }
        return [];
    }
    get normalizedParameters() {
        if (this.instructionResolver !== null && this.typedParameters !== null) {
            return this.instructionResolver.stringifyComponentParameters(this.parameters);
        }
        return '';
    }
    setComponent(component) {
        if (ComponentAppellationResolver.isName(component)) {
            this.componentName = ComponentAppellationResolver.getName(component);
            this.componentType = null;
            this.componentInstance = null;
        }
        else if (ComponentAppellationResolver.isType(component)) {
            this.componentName = ComponentAppellationResolver.getName(component);
            this.componentType = ComponentAppellationResolver.getType(component);
            this.componentInstance = null;
        }
        else if (ComponentAppellationResolver.isInstance(component)) {
            this.componentName = ComponentAppellationResolver.getName(component);
            this.componentType = ComponentAppellationResolver.getType(component);
            this.componentInstance = ComponentAppellationResolver.getInstance(component);
        }
    }
    setViewport(viewport) {
        if (viewport === undefined || viewport === '') {
            viewport = null;
        }
        if (typeof viewport === 'string') {
            this.viewportName = viewport;
            this.viewport = null;
        }
        else {
            this.viewport = viewport;
            if (viewport !== null) {
                this.viewportName = viewport.name;
                this.scope = viewport.owningScope;
            }
        }
    }
    setParameters(parameters) {
        if (parameters === undefined || parameters === null || parameters === '') {
            this.parametersType = "none" /* none */;
            parameters = null;
        }
        else if (typeof parameters === 'string') {
            this.parametersType = "string" /* string */;
            this.parametersString = parameters;
        }
        else if (Array.isArray(parameters)) {
            this.parametersType = "array" /* array */;
            this.parametersList = parameters;
        }
        else {
            this.parametersType = "object" /* object */;
            this.parametersRecord = parameters;
        }
    }
    // This only works with objects added to objects!
    addParameters(parameters) {
        if (this.parametersType === "none" /* none */) {
            return this.setParameters(parameters);
        }
        if (this.parametersType !== "object" /* object */) {
            throw new Error('Can\'t add object parameters to existing non-object parameters!');
        }
        this.setParameters({ ...this.parametersRecord, ...parameters });
    }
    setInstructionResolver(instructionResolver) {
        this.instructionResolver = instructionResolver;
    }
    isEmpty() {
        return !this.isComponentName() && !this.isComponentType() && !this.isComponentInstance();
    }
    isComponentName() {
        return !!this.componentName && !this.isComponentType() && !this.isComponentInstance();
    }
    isComponentType() {
        return this.componentType !== null && !this.isComponentInstance();
    }
    isComponentInstance() {
        return this.componentInstance !== null;
    }
    toComponentType(container) {
        if (this.componentType !== null) {
            return this.componentType;
        }
        if (this.componentName !== null
            && typeof this.componentName === 'string'
            && container !== null
            && container.has(CustomElement.keyFrom(this.componentName), true)) {
            const resolver = container.getResolver(CustomElement.keyFrom(this.componentName));
            if (resolver !== null && resolver.getFactory !== void 0) {
                const factory = resolver.getFactory(container);
                if (factory) {
                    return factory.Type;
                }
            }
        }
        return null;
    }
    toComponentInstance(container) {
        if (this.componentInstance !== null) {
            return this.componentInstance;
        }
        if (container !== void 0 && container !== null) {
            if (this.isComponentType()) {
                return container.get(this.componentType);
            }
            else {
                return container.get(CustomElement.keyFrom(this.componentName));
            }
        }
        return null;
    }
    toViewportInstance(router) {
        if (this.viewport !== null) {
            return this.viewport;
        }
        return router.getViewport(this.viewportName);
    }
    toSpecifiedParameters(specifications) {
        specifications = specifications || [];
        const parameters = this.parameters;
        const specified = {};
        for (const spec of specifications) {
            // First get named if it exists
            let index = parameters.findIndex(param => param.key === spec);
            if (index >= 0) {
                const [parameter] = parameters.splice(index, 1);
                specified[spec] = parameter.value;
            }
            else {
                // Otherwise get first unnamed
                index = parameters.findIndex(param => param.key === void 0);
                if (index >= 0) {
                    const [parameter] = parameters.splice(index, 1);
                    specified[spec] = parameter.value;
                }
            }
        }
        // Add all remaining named
        for (const parameter of parameters.filter(param => param.key !== void 0)) {
            specified[parameter.key] = parameter.value;
        }
        let index = specifications.length;
        // Add all remaining unnamed...
        for (const parameter of parameters.filter(param => param.key === void 0)) {
            // ..with an index
            specified[index++] = parameter.value;
        }
        return specified;
    }
    toSortedParameters(specifications) {
        specifications = specifications || [];
        const parameters = this.parameters;
        const sorted = [];
        for (const spec of specifications) {
            // First get named if it exists
            let index = parameters.findIndex(param => param.key === spec);
            if (index >= 0) {
                const parameter = { ...parameters.splice(index, 1)[0] };
                parameter.key = void 0;
                sorted.push(parameter);
            }
            else {
                // Otherwise get first unnamed
                index = parameters.findIndex(param => param.key === void 0);
                if (index >= 0) {
                    const parameter = { ...parameters.splice(index, 1)[0] };
                    sorted.push(parameter);
                }
                else {
                    // Or an empty
                    sorted.push({ value: void 0 });
                }
            }
        }
        // Add all remaining named
        const params = parameters.filter(param => param.key !== void 0);
        params.sort((a, b) => (a.key || '') < (b.key || '') ? 1 : (b.key || '') < (a.key || '') ? -1 : 0);
        sorted.push(...params);
        // Add all remaining unnamed...
        sorted.push(...parameters.filter(param => param.key === void 0));
        return sorted;
    }
    sameComponent(other, compareParameters = false, compareType = false) {
        if (compareParameters && !this.sameParameters(other, compareType)) {
            return false;
        }
        return compareType ? this.componentType === other.componentType : this.componentName === other.componentName;
    }
    // TODO: Somewhere we need to check for format such as spaces etc
    sameParameters(other, compareType = false) {
        if (!this.sameComponent(other, false, compareType)) {
            return false;
        }
        const typeParameters = this.componentType ? this.componentType.parameters : [];
        const mine = this.toSpecifiedParameters(typeParameters);
        const others = other.toSpecifiedParameters(typeParameters);
        return Object.keys(mine).every(key => mine[key] === others[key])
            && Object.keys(others).every(key => others[key] === mine[key]);
    }
    sameViewport(other) {
        if (this.viewport !== null && other.viewport !== null) {
            return this.viewport === other.viewport;
        }
        return this.scope === other.scope &&
            (this.viewport ? this.viewport.name : this.viewportName) === (other.viewport ? other.viewport.name : other.viewportName);
    }
}

class InstructionResolver {
    constructor() {
        this.separators = {
            viewport: '@',
            sibling: '+',
            scope: '/',
            scopeStart: '(',
            scopeEnd: ')',
            noScope: '!',
            parameters: '(',
            parametersEnd: ')',
            parameterSeparator: ',',
            parameterKeySeparator: '=',
            parameter: '&',
            add: '+',
            clear: '-',
            action: '.',
        };
    }
    activate(options) {
        options = options || {};
        this.separators = { ...this.separators, ...options.separators };
    }
    get clearViewportInstruction() {
        return this.separators.clear;
    }
    get addViewportInstruction() {
        return this.separators.add;
    }
    isClearViewportInstruction(instruction) {
        return instruction instanceof ViewportInstruction
            ? instruction.componentName === this.clearViewportInstruction && !!instruction.viewportName
            : instruction.startsWith(this.clearViewportInstruction) && instruction !== this.clearViewportInstruction;
    }
    isAddViewportInstruction(instruction) {
        return instruction instanceof ViewportInstruction
            ? instruction.componentName === this.addViewportInstruction
            : (instruction === this.addViewportInstruction
                || instruction.startsWith(`${this.separators.add}${this.separators.viewport}`));
    }
    isClearViewportScopeInstruction(instruction) {
        return instruction instanceof ViewportInstruction
            ? instruction.componentName === this.clearViewportInstruction && !!instruction.viewportScope
            : instruction.startsWith(this.clearViewportInstruction) && instruction !== this.clearViewportInstruction;
    }
    isClearAllViewportsInstruction(instruction) {
        return instruction instanceof ViewportInstruction
            ? instruction.componentName === this.clearViewportInstruction && !instruction.viewportName
            : instruction === this.clearViewportInstruction;
    }
    isAddAllViewportsInstruction(instruction) {
        return instruction instanceof ViewportInstruction
            ? instruction.componentName === this.addViewportInstruction && !instruction.viewportName
            : instruction === this.addViewportInstruction;
    }
    createViewportInstruction(component, viewport, parameters, ownsScope = true, nextScopeInstructions = null) {
        const instruction = new ViewportInstruction(component, viewport, parameters, ownsScope, nextScopeInstructions);
        instruction.setInstructionResolver(this);
        return instruction;
    }
    parseViewportInstructions(instructions) {
        const match = /^[./]+/.exec(instructions);
        let context = '';
        if (Array.isArray(match) && match.length > 0) {
            context = match[0];
            instructions = instructions.slice(context.length);
        }
        const parsedInstructions = this.parseViewportInstructionsWorker(instructions, true).instructions;
        for (const instruction of parsedInstructions) {
            instruction.context = context;
        }
        return parsedInstructions;
    }
    parseViewportInstruction(instruction) {
        const instructions = this.parseViewportInstructions(instruction);
        if (instructions.length) {
            return instructions[0];
        }
        return this.createViewportInstruction('');
    }
    stringifyViewportInstructions(instructions, excludeViewport = false, viewportContext = false) {
        return instructions
            .map(instruction => this.stringifyViewportInstruction(instruction, excludeViewport, viewportContext))
            .filter(instruction => instruction && instruction.length)
            .join(this.separators.sibling);
    }
    stringifyViewportInstruction(instruction, excludeViewport = false, viewportContext = false) {
        if (typeof instruction === 'string') {
            return this.stringifyAViewportInstruction(instruction, excludeViewport);
        }
        else {
            let excludeCurrentViewport = excludeViewport;
            let excludeCurrentComponent = false;
            if (viewportContext) {
                if (instruction.viewport && instruction.viewport.options.noLink) {
                    return '';
                }
                if (!instruction.needsViewportDescribed && instruction.viewport && !instruction.viewport.options.forceDescription) {
                    excludeCurrentViewport = true;
                }
                if (instruction.viewport && instruction.viewport.options.fallback === instruction.componentName) {
                    excludeCurrentComponent = true;
                }
                if (!instruction.needsViewportDescribed && instruction.viewportScope) {
                    excludeCurrentViewport = true;
                }
            }
            const route = instruction.route;
            const nextInstructions = instruction.nextScopeInstructions;
            let stringified = instruction.context;
            // It's a configured route
            if (route !== null) {
                // Already added as part of a configuration, skip to next scope
                if (route === '') {
                    return Array.isArray(nextInstructions)
                        ? this.stringifyViewportInstructions(nextInstructions, excludeViewport, viewportContext)
                        : '';
                }
                stringified += route.endsWith(this.separators.scope) ? route.slice(0, -this.separators.scope.length) : route;
            }
            else {
                stringified += this.stringifyAViewportInstruction(instruction, excludeCurrentViewport, excludeCurrentComponent);
            }
            if (Array.isArray(nextInstructions) && nextInstructions.length) {
                const nextStringified = this.stringifyViewportInstructions(nextInstructions, excludeViewport, viewportContext);
                if (nextStringified.length > 0) {
                    stringified += nextInstructions.length === 1 // TODO: This should really also check that the instructions have value
                        ? `${this.separators.scope}${nextStringified}`
                        : `${this.separators.scope}${this.separators.scopeStart}${nextStringified}${this.separators.scopeEnd}`;
                }
            }
            return stringified;
        }
    }
    stringifyScopedViewportInstructions(instructions) {
        if (!Array.isArray(instructions)) {
            return this.stringifyScopedViewportInstructions([instructions]);
        }
        return instructions.map((instruction) => this.stringifyViewportInstruction(instruction)).join(this.separators.scope);
    }
    encodeViewportInstructions(instructions) {
        return encodeURIComponent(this.stringifyViewportInstructions(instructions)).replace(/\(/g, '%28').replace(/\)/g, '%29');
    }
    decodeViewportInstructions(instructions) {
        return this.parseViewportInstructions(decodeURIComponent(instructions));
    }
    buildScopedLink(scopeContext, href) {
        if (scopeContext) {
            href = `/${scopeContext}${this.separators.scope}${href}`;
        }
        return href;
    }
    shouldClearViewports(path) {
        const clearViewports = (path === this.separators.clear || path.startsWith(this.separators.clear + this.separators.add));
        const newPath = path.startsWith(this.separators.clear) ? path.slice(2) : path;
        return { clearViewports, newPath };
    }
    mergeViewportInstructions(instructions) {
        const merged = [];
        for (let instruction of instructions) {
            if (typeof instruction === 'string') {
                instruction = this.parseViewportInstruction(instruction);
            }
            const index = merged.findIndex(merge => merge.sameViewport(instruction));
            if (index >= 0) {
                merged.splice(index, 1, instruction);
            }
            else {
                merged.push(instruction);
            }
        }
        return merged;
    }
    flattenViewportInstructions(instructions) {
        const flat = [];
        for (const instruction of instructions) {
            flat.push(instruction);
            if (instruction.nextScopeInstructions) {
                flat.push(...this.flattenViewportInstructions(instruction.nextScopeInstructions));
            }
        }
        return flat;
    }
    cloneViewportInstructions(instructions, keepInstances = false, context = false) {
        const clones = [];
        for (const instruction of instructions) {
            const clone = this.createViewportInstruction((keepInstances ? instruction.componentInstance : null) || instruction.componentType || instruction.componentName, keepInstances ? instruction.viewport || instruction.viewportName : instruction.viewportName, instruction.typedParameters !== null ? instruction.typedParameters : void 0);
            clone.needsViewportDescribed = instruction.needsViewportDescribed;
            clone.route = instruction.route;
            if (context) {
                clone.context = instruction.context;
            }
            clone.viewportScope = keepInstances ? instruction.viewportScope : null;
            clone.scope = keepInstances ? instruction.scope : null;
            if (instruction.nextScopeInstructions) {
                clone.nextScopeInstructions = this.cloneViewportInstructions(instruction.nextScopeInstructions, keepInstances, context);
            }
            clones.push(clone);
        }
        return clones;
    }
    // TODO: Deal with separators in data and complex types
    parseComponentParameters(parameters, uriComponent = false) {
        if (parameters === undefined || parameters === null || parameters.length === 0) {
            return [];
        }
        if (typeof parameters === 'string') {
            const list = [];
            const params = parameters.split(this.separators.parameterSeparator);
            for (const param of params) {
                let key;
                let value;
                [key, value] = param.split(this.separators.parameterKeySeparator);
                if (value === void 0) {
                    value = uriComponent ? decodeURIComponent(key) : key;
                    key = void 0;
                }
                else if (uriComponent) {
                    key = decodeURIComponent(key);
                    value = decodeURIComponent(value);
                }
                list.push({ key, value });
            }
            return list;
        }
        if (Array.isArray(parameters)) {
            return parameters.map(param => ({ key: void 0, value: param }));
        }
        const keys = Object.keys(parameters);
        keys.sort();
        return keys.map(key => ({ key, value: parameters[key] }));
    }
    // TODO: Deal with separators in data and complex types
    stringifyComponentParameters(parameters, uriComponent = false) {
        if (!Array.isArray(parameters) || parameters.length === 0) {
            return '';
        }
        const seps = this.separators;
        return parameters
            .map(param => {
            const key = param.key !== void 0 && uriComponent ? encodeURIComponent(param.key) : param.key;
            const value = uriComponent ? encodeURIComponent(param.value) : param.value;
            return key !== void 0 && key !== value ? key + seps.parameterKeySeparator + value : value;
        })
            .join(seps.parameterSeparator);
    }
    matchScope(instructions, scope) {
        const matching = [];
        matching.push(...instructions.filter(instruction => instruction.scope === scope));
        matching.push(...instructions
            .filter(instr => instr.scope !== scope)
            .map(instr => Array.isArray(instr.nextScopeInstructions) ? this.matchScope(instr.nextScopeInstructions, scope) : [])
            .flat());
        return matching;
    }
    matchChildren(instructions, active) {
        for (const instruction of instructions) {
            const matching = active.filter(instr => instr.sameComponent(instruction));
            if (matching.length === 0) {
                return false;
            }
            if (Array.isArray(instruction.nextScopeInstructions)
                && instruction.nextScopeInstructions.length > 0
                && this.matchChildren(instruction.nextScopeInstructions, matching.map(instr => Array.isArray(instr.nextScopeInstructions) ? instr.nextScopeInstructions : []).flat()) === false) {
                return false;
            }
        }
        return true;
    }
    parseViewportInstructionsWorker(instructions, grouped = false) {
        if (!instructions) {
            return { instructions: [], remaining: '' };
        }
        if (instructions.startsWith(this.separators.scopeStart)) {
            instructions = `${this.separators.scope}${instructions}`;
        }
        const viewportInstructions = [];
        let guard = 1000;
        while (instructions.length && guard) {
            guard--;
            if (instructions.startsWith(this.separators.scope)) {
                instructions = instructions.slice(this.separators.scope.length);
                const scopeStart = instructions.startsWith(this.separators.scopeStart);
                if (scopeStart) {
                    instructions = instructions.slice(this.separators.scopeStart.length);
                }
                const { instructions: found, remaining } = this.parseViewportInstructionsWorker(instructions, scopeStart);
                if (viewportInstructions.length) {
                    viewportInstructions[viewportInstructions.length - 1].nextScopeInstructions = found;
                }
                else {
                    viewportInstructions.push(...found);
                }
                instructions = remaining;
            }
            else if (instructions.startsWith(this.separators.scopeEnd)) {
                if (grouped) {
                    instructions = instructions.slice(this.separators.scopeEnd.length);
                }
                return { instructions: viewportInstructions, remaining: instructions };
            }
            else if (instructions.startsWith(this.separators.sibling) && !this.isAddViewportInstruction(instructions)) {
                if (!grouped) {
                    return { instructions: viewportInstructions, remaining: instructions };
                }
                instructions = instructions.slice(this.separators.sibling.length);
            }
            else {
                const { instruction: viewportInstruction, remaining } = this.parseAViewportInstruction(instructions);
                viewportInstructions.push(viewportInstruction);
                instructions = remaining;
            }
        }
        return { instructions: viewportInstructions, remaining: instructions };
    }
    findNextToken(instruction, tokens) {
        const matches = {};
        // Tokens can have length > 1
        for (const token of tokens) {
            const tokenPos = instruction.indexOf(token);
            if (tokenPos > -1) {
                matches[token] = instruction.indexOf(token);
            }
        }
        const pos = Math.min(...Object.values(matches));
        for (const token in matches) {
            if (matches[token] === pos) {
                return { token, pos };
            }
        }
        return { token: '', pos: -1 };
    }
    parseAViewportInstruction(instruction) {
        const seps = this.separators;
        const tokens = [seps.parameters, seps.viewport, seps.noScope, seps.scopeEnd, seps.scope, seps.sibling];
        let component = void 0;
        let parametersString = void 0;
        let viewport = void 0;
        let scope = true;
        let token;
        let pos;
        const specials = [seps.add, seps.clear];
        for (const special of specials) {
            if (instruction === special) {
                component = instruction;
                instruction = '';
                tokens.shift(); // parameters
                tokens.shift(); // viewport
                token = seps.viewport;
                break;
            }
        }
        if (component === void 0) {
            for (const special of specials) {
                if (instruction.startsWith(`${special}${seps.viewport}`)) {
                    component = special;
                    instruction = instruction.slice(`${special}${seps.viewport}`.length);
                    tokens.shift(); // parameters
                    tokens.shift(); // viewport
                    token = seps.viewport;
                    break;
                }
            }
        }
        if (component === void 0) {
            ({ token, pos } = this.findNextToken(instruction, tokens));
            component = pos !== -1 ? instruction.slice(0, pos) : instruction;
            instruction = pos !== -1 ? instruction.slice(pos + token.length) : '';
            tokens.shift(); // parameters
            if (token === seps.parameters) {
                ({ token, pos } = this.findNextToken(instruction, [seps.parametersEnd]));
                parametersString = instruction.slice(0, pos);
                instruction = instruction.slice(pos + token.length);
                ({ token } = this.findNextToken(instruction, tokens));
                instruction = instruction.slice(token.length);
            }
            tokens.shift(); // viewport
        }
        if (token === seps.viewport) {
            ({ token, pos } = this.findNextToken(instruction, tokens));
            viewport = pos !== -1 ? instruction.slice(0, pos) : instruction;
            instruction = pos !== -1 ? instruction.slice(pos + token.length) : '';
        }
        tokens.shift(); // noScope
        if (token === seps.noScope) {
            scope = false;
        }
        // Restore token that belongs to next instruction
        if (token === seps.scopeEnd || token === seps.scope || token === seps.sibling) {
            instruction = `${token}${instruction}`;
        }
        const viewportInstruction = this.createViewportInstruction(component, viewport, parametersString, scope);
        return { instruction: viewportInstruction, remaining: instruction };
    }
    stringifyAViewportInstruction(instruction, excludeViewport = false, excludeComponent = false) {
        if (typeof instruction === 'string') {
            return this.stringifyViewportInstruction(this.parseViewportInstruction(instruction), excludeViewport, excludeComponent);
        }
        else {
            let instructionString = !excludeComponent ? instruction.componentName : '';
            const specification = instruction.componentType ? instruction.componentType.parameters : null;
            const parameters = this.stringifyComponentParameters(instruction.toSortedParameters(specification));
            if (parameters.length > 0) {
                instructionString += !excludeComponent
                    ? `${this.separators.parameters}${parameters}${this.separators.parametersEnd}`
                    : parameters;
            }
            if (instruction.viewportName !== null && !excludeViewport) {
                instructionString += this.separators.viewport + instruction.viewportName;
            }
            if (!instruction.ownsScope) {
                instructionString += this.separators.noScope;
            }
            return instructionString || '';
        }
    }
}

var ReentryBehavior;
(function (ReentryBehavior) {
    ReentryBehavior["default"] = "default";
    ReentryBehavior["disallow"] = "disallow";
    ReentryBehavior["enter"] = "enter";
    ReentryBehavior["refresh"] = "refresh";
})(ReentryBehavior || (ReentryBehavior = {}));

class Hook {
    constructor(hook, options, id) {
        this.hook = hook;
        this.id = id;
        this.type = "beforeNavigation" /* BeforeNavigation */;
        this.includeTargets = [];
        this.excludeTargets = [];
        if (options.type !== void 0) {
            this.type = options.type;
        }
        for (const target of options.include || []) {
            this.includeTargets.push(new Target(target));
        }
        for (const target of options.exclude || []) {
            this.excludeTargets.push(new Target(target));
        }
    }
    get wantsMatch() {
        return this.includeTargets.length > 0 || this.excludeTargets.length > 0;
    }
    matches(viewportInstructions) {
        if (this.includeTargets.length && !this.includeTargets.some(target => target.matches(viewportInstructions))) {
            return false;
        }
        if (this.excludeTargets.length && this.excludeTargets.some(target => target.matches(viewportInstructions))) {
            return false;
        }
        return true;
    }
    invoke(navigationInstruction, arg) {
        // TODO: Fix the type here
        return this.hook(arg, navigationInstruction);
    }
}
class Target {
    constructor(target) {
        this.componentType = null;
        this.componentName = null;
        this.viewport = null;
        this.viewportName = null;
        if (typeof target === 'string') {
            this.componentName = target;
        }
        else if (ComponentAppellationResolver.isType(target)) {
            this.componentType = target;
            this.componentName = ComponentAppellationResolver.getName(target);
        }
        else {
            const cvTarget = target;
            if (cvTarget.component) {
                this.componentType = ComponentAppellationResolver.isType(cvTarget.component)
                    ? ComponentAppellationResolver.getType(cvTarget.component)
                    : null;
                this.componentName = ComponentAppellationResolver.getName(cvTarget.component);
            }
            if (cvTarget.viewport) {
                this.viewport = ViewportHandleResolver.isInstance(cvTarget.viewport) ? cvTarget.viewport : null;
                this.viewportName = ViewportHandleResolver.getName(cvTarget.viewport);
            }
        }
    }
    matches(viewportInstructions) {
        const instructions = viewportInstructions.slice();
        if (!instructions.length) {
            instructions.push(new ViewportInstruction(''));
        }
        for (const instruction of instructions) {
            if ((this.componentName !== null && this.componentName === instruction.componentName) ||
                (this.componentType !== null && this.componentType === instruction.componentType) ||
                (this.viewportName !== null && this.viewportName === instruction.viewportName) ||
                (this.viewport !== null && this.viewport === instruction.viewport)) {
                return true;
            }
        }
        return false;
    }
}

var HookTypes;
(function (HookTypes) {
    HookTypes["BeforeNavigation"] = "beforeNavigation";
    HookTypes["TransformFromUrl"] = "transformFromUrl";
    HookTypes["TransformToUrl"] = "transformToUrl";
})(HookTypes || (HookTypes = {}));
class HookManager {
    constructor() {
        this.hooks = {
            beforeNavigation: [],
            transformFromUrl: [],
            transformToUrl: [],
        };
        this.lastIdentity = 0;
    }
    addHook(hookFunction, options) {
        const hook = new Hook(hookFunction, options || {}, ++this.lastIdentity);
        this.hooks[hook.type].push(hook);
        return this.lastIdentity;
    }
    removeHook(id) {
        for (const type in this.hooks) {
            if (Object.prototype.hasOwnProperty.call(this.hooks, type)) {
                const index = this.hooks[type].findIndex(hook => hook.id === id);
                if (index >= 0) {
                    this.hooks[type].splice(index, 1);
                }
            }
        }
    }
    invokeBeforeNavigation(viewportInstructions, navigationInstruction) {
        return this.invoke("beforeNavigation" /* BeforeNavigation */, navigationInstruction, viewportInstructions);
    }
    invokeTransformFromUrl(url, navigationInstruction) {
        return this.invoke("transformFromUrl" /* TransformFromUrl */, navigationInstruction, url);
    }
    invokeTransformToUrl(state, navigationInstruction) {
        return this.invoke("transformToUrl" /* TransformToUrl */, navigationInstruction, state);
    }
    async invoke(type, navigationInstruction, arg) {
        for (const hook of this.hooks[type]) {
            if (!hook.wantsMatch || hook.matches(arg)) {
                const outcome = await hook.invoke(navigationInstruction, arg);
                if (typeof outcome === 'boolean') {
                    if (!outcome) {
                        return false;
                    }
                }
                else {
                    arg = outcome;
                }
            }
        }
        return arg;
    }
}

class NavRoute {
    constructor(nav, route) {
        this.nav = nav;
        this.instructions = [];
        this.link = null;
        this.linkVisible = null;
        this.linkActive = null;
        this.compareParameters = false;
        this.children = null;
        this.visible = true;
        this.active = '';
        this.title = route.title;
        this.meta = route.meta;
        if (route.route) {
            this.instructions = this.parseRoute(route.route);
            this.link = this.computeLink(this.instructions);
        }
        this.linkActive = route.consideredActive !== null && route.consideredActive !== void 0 ? route.consideredActive : this.link;
        if (this.linkActive !== null && (!(this.linkActive instanceof Function) || ComponentAppellationResolver.isType(this.linkActive))) {
            this.linkActive = NavigationInstructionResolver.toViewportInstructions(this.nav.router, this.linkActive);
        }
        this.execute = route.execute;
        this.compareParameters = !!route.compareParameters;
        this.linkVisible = route.condition === undefined ? true : route.condition;
        this.update();
    }
    get hasChildren() {
        return (this.children && this.children.length ? 'nav-has-children' : '');
    }
    update() {
        this.visible = this.computeVisible();
        if ((this.link && this.link.length) || this.execute) {
            this.active = this.computeActive();
        }
        else {
            this.active = (this.active === 'nav-active' ? 'nav-active' : (this.activeChild() ? 'nav-active-child' : ''));
        }
    }
    executeAction(event) {
        if (this.execute) {
            this.execute(this);
        }
        event.stopPropagation();
    }
    toggleActive() {
        this.active = (this.active.startsWith('nav-active') ? '' : 'nav-active');
    }
    parseRoute(routes) {
        return NavigationInstructionResolver.toViewportInstructions(this.nav.router, routes);
    }
    computeVisible() {
        if (this.linkVisible instanceof Function) {
            return this.linkVisible(this);
        }
        return !!this.linkVisible;
    }
    computeActive() {
        if (!Array.isArray(this.linkActive)) {
            return this.linkActive(this) ? 'nav-active' : '';
        }
        const components = this.linkActive;
        const activeComponents = this.nav.router.instructionResolver.flattenViewportInstructions(this.nav.router.activeComponents);
        for (const component of components) {
            if (activeComponents.every((active) => !active.sameComponent(component, this.compareParameters && component.typedParameters !== null))) {
                return '';
            }
        }
        return 'nav-active';
    }
    computeLink(instructions) {
        return this.nav.router.instructionResolver.stringifyViewportInstructions(instructions);
    }
    activeChild() {
        if (this.children) {
            for (const child of this.children) {
                if (child.active.startsWith('nav-active') || child.activeChild()) {
                    return true;
                }
            }
        }
        return false;
    }
}

class Nav {
    constructor(router, name, routes = [], classes = {}) {
        this.router = router;
        this.name = name;
        this.routes = routes;
        this.classes = classes;
        this.update();
    }
    addRoutes(routes) {
        for (const route of routes) {
            this.addRoute(this.routes, route);
        }
        this.update();
    }
    update() {
        this.updateRoutes(this.routes);
        this.routes = this.routes.slice();
    }
    addRoute(routes, route) {
        const newRoute = new NavRoute(this, route);
        routes.push(newRoute);
        if (route.children) {
            newRoute.children = [];
            for (const child of route.children) {
                this.addRoute(newRoute.children, child);
            }
        }
    }
    updateRoutes(routes) {
        for (const route of routes) {
            route.update();
            if (route.children && route.children.length) {
                this.updateRoutes(route.children);
            }
        }
    }
}

class Navigator {
    constructor() {
        this.entries = [];
        this.options = {
            statefulHistoryLength: 0,
        };
        this.isActive = false;
        this.processNavigations = (qEntry) => {
            const entry = qEntry;
            const navigationFlags = {};
            if (this.currentEntry === this.uninitializedEntry) { // Refresh or first entry
                this.loadState();
                if (this.currentEntry !== this.uninitializedEntry) {
                    navigationFlags.refresh = true;
                }
                else {
                    navigationFlags.first = true;
                    navigationFlags.new = true;
                    // TODO: Should this really be created here? Shouldn't it be in the viewer?
                    this.currentEntry = {
                        index: 0,
                        instruction: '',
                        fullStateInstruction: '',
                    };
                    this.entries = [];
                }
            }
            if (entry.index !== void 0 && !entry.replacing && !entry.refreshing) { // History navigation
                entry.historyMovement = entry.index - (this.currentEntry.index !== void 0 ? this.currentEntry.index : 0);
                entry.instruction = this.entries[entry.index] !== void 0 && this.entries[entry.index] !== null ? this.entries[entry.index].fullStateInstruction : entry.fullStateInstruction;
                entry.replacing = true;
                if (entry.historyMovement > 0) {
                    navigationFlags.forward = true;
                }
                else if (entry.historyMovement < 0) {
                    navigationFlags.back = true;
                }
            }
            else if (entry.refreshing || navigationFlags.refresh) { // Refreshing
                entry.index = this.currentEntry.index;
            }
            else if (entry.replacing) { // Replacing
                navigationFlags.replace = true;
                navigationFlags.new = true;
                entry.index = this.currentEntry.index;
            }
            else { // New entry
                navigationFlags.new = true;
                entry.index = this.currentEntry.index !== void 0 ? this.currentEntry.index + 1 : this.entries.length;
            }
            this.invokeCallback(entry, navigationFlags, this.currentEntry);
        };
        this.uninitializedEntry = {
            instruction: 'NAVIGATOR UNINITIALIZED',
            fullStateInstruction: '',
        };
        this.currentEntry = this.uninitializedEntry;
        this.pendingNavigations = new Queue(this.processNavigations);
    }
    get queued() {
        return this.pendingNavigations.length;
    }
    activate(router, options) {
        if (this.isActive) {
            throw new Error('Navigator has already been activated');
        }
        this.isActive = true;
        this.router = router;
        this.options = { ...options };
    }
    deactivate() {
        if (!this.isActive) {
            throw new Error('Navigator has not been activated');
        }
        this.pendingNavigations.clear();
        this.isActive = false;
    }
    navigate(entry) {
        return this.pendingNavigations.enqueue(entry);
    }
    refresh() {
        const entry = this.currentEntry;
        if (entry === this.uninitializedEntry) {
            return Promise.reject();
        }
        entry.replacing = true;
        entry.refreshing = true;
        return this.navigate(entry);
    }
    go(movement) {
        const newIndex = (this.currentEntry.index !== undefined ? this.currentEntry.index : 0) + movement;
        if (newIndex >= this.entries.length) {
            return Promise.reject();
        }
        const entry = this.entries[newIndex];
        return this.navigate(entry);
    }
    setEntryTitle(title) {
        this.currentEntry.title = title;
        return this.saveState();
    }
    get titles() {
        if (this.currentEntry == this.uninitializedEntry) {
            return [];
        }
        const index = this.currentEntry.index !== void 0 ? this.currentEntry.index : 0;
        return this.entries.slice(0, index + 1).filter((value) => !!value.title).map((value) => value.title ? value.title : '');
    }
    getState() {
        const state = this.options.store ? { ...this.options.store.state } : {};
        const entries = (state.entries || []);
        const currentEntry = (state.currentEntry || this.uninitializedEntry);
        return { state, entries, currentEntry };
    }
    loadState() {
        const state = this.getState();
        this.entries = state.entries;
        this.currentEntry = state.currentEntry;
    }
    async saveState(push = false) {
        if (this.currentEntry === this.uninitializedEntry) {
            return Promise.resolve();
        }
        const storedEntry = this.toStoredEntry(this.currentEntry);
        this.entries[storedEntry.index !== undefined ? storedEntry.index : 0] = storedEntry;
        if (this.options.serializeCallback !== void 0 && this.options.statefulHistoryLength > 0) {
            const index = this.entries.length - this.options.statefulHistoryLength;
            for (let i = 0; i < index; i++) {
                const entry = this.entries[i];
                if (typeof entry.instruction !== 'string' || typeof entry.fullStateInstruction !== 'string') {
                    this.entries[i] = await this.options.serializeCallback(entry, this.entries.slice(index));
                }
            }
        }
        if (!this.options.store) {
            return Promise.resolve();
        }
        const state = {
            entries: [],
            currentEntry: { ...this.toStoreableEntry(storedEntry) },
        };
        for (const entry of this.entries) {
            state.entries.push(this.toStoreableEntry(entry));
        }
        if (push) {
            return this.options.store.pushNavigatorState(state);
        }
        else {
            return this.options.store.replaceNavigatorState(state);
        }
    }
    toStoredEntry(entry) {
        const { previous, fromBrowser, replacing, refreshing, untracked, historyMovement, navigation, scope, resolve, reject, ...storableEntry } = entry;
        return storableEntry;
    }
    async finalize(instruction) {
        this.currentEntry = instruction;
        let index = this.currentEntry.index !== undefined ? this.currentEntry.index : 0;
        if (this.currentEntry.untracked) {
            if (instruction.fromBrowser && this.options.store) {
                await this.options.store.popNavigatorState();
            }
            index--;
            this.currentEntry.index = index;
            this.entries[index] = this.toStoredEntry(this.currentEntry);
            await this.saveState();
        }
        else if (this.currentEntry.replacing) {
            this.entries[index] = this.toStoredEntry(this.currentEntry);
            await this.saveState();
        }
        else { // New entry (add and discard later entries)
            if (this.options.serializeCallback !== void 0 && this.options.statefulHistoryLength > 0) {
                // Need to clear the instructions we discard!
                const indexPreserve = this.entries.length - this.options.statefulHistoryLength;
                for (const entry of this.entries.slice(index)) {
                    if (typeof entry.instruction !== 'string' || typeof entry.fullStateInstruction !== 'string') {
                        await this.options.serializeCallback(entry, this.entries.slice(indexPreserve, index));
                    }
                }
            }
            this.entries = this.entries.slice(0, index);
            this.entries.push(this.toStoredEntry(this.currentEntry));
            await this.saveState(true);
        }
        if (this.currentEntry.resolve) {
            this.currentEntry.resolve();
        }
    }
    async cancel(instruction) {
        if (instruction.fromBrowser && this.options.store) {
            if (instruction.navigation && instruction.navigation.new) {
                await this.options.store.popNavigatorState();
            }
            else {
                await this.options.store.go(-(instruction.historyMovement || 0), true);
            }
        }
        if (this.currentEntry.resolve) {
            this.currentEntry.resolve();
        }
    }
    invokeCallback(entry, navigationFlags, previousEntry) {
        const instruction = { ...entry };
        instruction.navigation = navigationFlags;
        instruction.previous = this.toStoredEntry(previousEntry);
        Reporter.write(10000, 'callback', instruction, instruction.previous, this.entries);
        if (this.options.callback) {
            this.options.callback(instruction);
        }
    }
    toStoreableEntry(entry) {
        const storeable = { ...entry };
        if (storeable.instruction && typeof storeable.instruction !== 'string') {
            storeable.instruction = this.router.instructionResolver.stringifyViewportInstructions(storeable.instruction);
        }
        if (storeable.fullStateInstruction && typeof storeable.fullStateInstruction !== 'string') {
            storeable.fullStateInstruction = this.router.instructionResolver.stringifyViewportInstructions(storeable.fullStateInstruction);
        }
        return storeable;
    }
}

var __decorate$W = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$R = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
class QueueTask {
    constructor(taskQueue, item, cost = 0) {
        this.taskQueue = taskQueue;
        this.item = item;
        this.cost = cost;
        this.done = false;
        this.promise = new Promise((resolve, reject) => {
            this.resolve = () => {
                this.taskQueue.resolve(this, resolve);
            };
            this.reject = (reason) => {
                this.taskQueue.reject(this, reject, reason);
            };
        });
    }
    async execute() {
        if ('execute' in this.item) {
            await this.item.execute(this);
        }
        else {
            await this.item(this);
        }
    }
    wait() {
        return this.promise;
    }
    canCancel() {
        return false;
    }
    cancel() { return; }
}
/**
 * A first-in-first-out task queue that only processes the next queued item
 * when the current one has been resolved or rejected. If a callback function
 * is specified, it receives the queued items as tasks one at a time. If no
 * callback is specified, the tasks themselves are either executed (if a
 * function) or the execute method in them are run. The executed function
 * should resolve or reject the task when processing is done.
 * Enqueued items' tasks can be awaited. Enqueued items can specify an
 * (arbitrary) execution cost and the queue can be set up (activated) to
 * only process a specific amount of execution cost per RAF/tick.
 */
class TaskQueue$1 {
    constructor(callback) {
        this.callback = callback;
        this.pending = [];
        this.processing = null;
        this.allowedExecutionCostWithinTick = null;
        this.currentExecutionCostInCurrentTick = 0;
        this.scheduler = null;
        this.task = null;
    }
    get isActive() {
        return this.task !== null;
    }
    get length() {
        return this.pending.length;
    }
    activate(options) {
        if (this.isActive) {
            throw new Error('TaskQueue has already been activated');
        }
        this.scheduler = options.scheduler;
        this.allowedExecutionCostWithinTick = options.allowedExecutionCostWithinTick;
        this.task = this.scheduler.queueRenderTask(this.dequeue, { persistent: true });
    }
    deactivate() {
        if (!this.isActive) {
            throw new Error('TaskQueue has not been activated');
        }
        this.task.cancel();
        this.task = null;
        this.allowedExecutionCostWithinTick = null;
        this.clear();
    }
    enqueue(itemOrItems, costOrCosts) {
        const list = Array.isArray(itemOrItems);
        const items = (list ? itemOrItems : [itemOrItems]);
        const costs = items
            .map((value, index) => !Array.isArray(costOrCosts) ? costOrCosts : costOrCosts[index])
            .map((value) => value !== undefined ? value : 1);
        const tasks = [];
        for (const item of items) {
            tasks.push(item instanceof QueueTask
                ? item
                : this.createQueueTask(item, costs.shift())); // TODO: Get cancellable in as well
        }
        this.pending.push(...tasks);
        this.dequeue();
        return list ? tasks : tasks[0];
    }
    createQueueTask(item, cost) {
        return new QueueTask(this, item, cost);
    }
    dequeue(delta) {
        if (this.processing !== null) {
            return;
        }
        if (delta !== undefined) {
            this.currentExecutionCostInCurrentTick = 0;
        }
        if (!this.pending.length) {
            return;
        }
        if (this.allowedExecutionCostWithinTick !== null && delta === undefined && this.currentExecutionCostInCurrentTick + (this.pending[0].cost || 0) > this.allowedExecutionCostWithinTick) {
            return;
        }
        this.processing = this.pending.shift() || null;
        if (this.processing) {
            this.currentExecutionCostInCurrentTick += this.processing.cost || 0;
            if (this.callback !== void 0) {
                this.callback(this.processing);
            }
            else {
                // Don't need to await this since next task won't be dequeued until
                // executed function is resolved
                this.processing.execute().catch(error => { throw error; });
            }
        }
    }
    clear() {
        this.pending.splice(0, this.pending.length);
    }
    resolve(task, resolve) {
        resolve();
        this.processing = null;
        this.dequeue();
    }
    reject(task, reject, reason) {
        reject(reason);
        this.processing = null;
        this.dequeue();
    }
}
__decorate$W([
    bound,
    __metadata$R("design:type", Function),
    __metadata$R("design:paramtypes", [Number]),
    __metadata$R("design:returntype", void 0)
], TaskQueue$1.prototype, "dequeue", null);

var __decorate$X = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$S = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$t = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let BrowserViewerStore = class BrowserViewerStore {
    constructor(scheduler, dom) {
        this.scheduler = scheduler;
        this.allowedExecutionCostWithinTick = 2; // Limit no of executed actions within the same RAF (due to browser limitation)
        this.isActive = false;
        this.options = {
            useUrlFragmentHash: true,
            callback: () => { return; },
        };
        this.forwardedState = { eventTask: null, suppressPopstate: false };
        this.handlePopstate = (event) => {
            const { eventTask, suppressPopstate } = this.forwardedState;
            this.forwardedState = { eventTask: null, suppressPopstate: false };
            return this.pendingCalls.enqueue(async (task) => {
                const store = this;
                const ev = event;
                const evTask = eventTask;
                const suppressPopstateEvent = suppressPopstate;
                await store.popstate(ev, evTask, suppressPopstateEvent);
                task.resolve();
            }, 1).wait();
        };
        this.window = dom.window;
        this.history = dom.window.history;
        this.location = dom.window.location;
        this.pendingCalls = new TaskQueue$1();
    }
    activate(options) {
        if (this.isActive) {
            throw new Error('Browser navigation has already been activated');
        }
        this.isActive = true;
        this.options.callback = options.callback;
        if (options.useUrlFragmentHash != void 0) {
            this.options.useUrlFragmentHash = options.useUrlFragmentHash;
        }
        this.pendingCalls.activate({ scheduler: this.scheduler, allowedExecutionCostWithinTick: this.allowedExecutionCostWithinTick });
        this.window.addEventListener('popstate', this.handlePopstate);
    }
    deactivate() {
        if (!this.isActive) {
            throw new Error('Browser navigation has not been activated');
        }
        this.window.removeEventListener('popstate', this.handlePopstate);
        this.pendingCalls.deactivate();
        this.options = { useUrlFragmentHash: true, callback: () => { return; } };
        this.isActive = false;
    }
    get length() {
        return this.history.length;
    }
    get state() {
        return this.history.state;
    }
    get viewerState() {
        const { pathname, search, hash } = this.location;
        return {
            path: pathname,
            query: search,
            hash,
            instruction: this.options.useUrlFragmentHash ? hash.slice(1) : pathname,
        };
    }
    go(delta, suppressPopstateEvent = false) {
        const doneTask = this.pendingCalls.createQueueTask((task) => task.resolve(), 1);
        this.pendingCalls.enqueue([
            (task) => {
                const store = this;
                const eventTask = doneTask;
                const suppressPopstate = suppressPopstateEvent;
                store.forwardState({ eventTask, suppressPopstate });
                task.resolve();
            },
            (task) => {
                const history = this.history;
                const steps = delta;
                history.go(steps);
                task.resolve();
            },
        ], [0, 1]);
        return doneTask.wait();
    }
    pushNavigatorState(state) {
        const { title, path } = state.currentEntry;
        const fragment = this.options.useUrlFragmentHash ? '#/' : '';
        return this.pendingCalls.enqueue((task) => {
            const history = this.history;
            const data = state;
            const titleOrEmpty = title || '';
            const url = `${fragment}${path}`;
            history.pushState(data, titleOrEmpty, url);
            task.resolve();
        }, 1).wait();
    }
    replaceNavigatorState(state) {
        const { title, path } = state.currentEntry;
        const fragment = this.options.useUrlFragmentHash ? '#/' : '';
        return this.pendingCalls.enqueue((task) => {
            const history = this.history;
            const data = state;
            const titleOrEmpty = title || '';
            const url = `${fragment}${path}`;
            history.replaceState(data, titleOrEmpty, url);
            task.resolve();
        }, 1).wait();
    }
    popNavigatorState() {
        const doneTask = this.pendingCalls.createQueueTask((task) => task.resolve(), 1);
        this.pendingCalls.enqueue(async (task) => {
            const store = this;
            const eventTask = doneTask;
            await store.popState(eventTask);
            task.resolve();
        }, 1);
        return doneTask.wait();
    }
    async popState(doneTask) {
        await this.go(-1, true);
        const state = this.history.state;
        // TODO: Fix browser forward bug after pop on first entry
        if (state && state.navigationEntry && !state.navigationEntry.firstEntry) {
            await this.go(-1, true);
            await this.pushNavigatorState(state);
        }
        await doneTask.execute();
    }
    forwardState(state) {
        this.forwardedState = state;
    }
    async popstate(ev, eventTask, suppressPopstate = false) {
        if (!suppressPopstate) {
            this.options.callback({
                ...this.viewerState,
                ...{
                    event: ev,
                    state: this.history.state,
                },
            });
        }
        if (eventTask !== null) {
            await eventTask.execute();
        }
    }
};
BrowserViewerStore = __decorate$X([
    __param$t(0, IScheduler),
    __param$t(1, IDOM),
    __metadata$S("design:paramtypes", [Object, HTMLDOM])
], BrowserViewerStore);

/* eslint-disable max-lines-per-function */
class ClosestScope {
}
const IRouter = DI.createInterface('IRouter').withDefault(x => x.singleton(Router));
class Router {
    constructor(container, navigator, navigation, linkHandler, instructionResolver) {
        this.container = container;
        this.navigator = navigator;
        this.navigation = navigation;
        this.linkHandler = linkHandler;
        this.instructionResolver = instructionResolver;
        this.rootScope = null;
        this.navs = {};
        this.activeComponents = [];
        this.appendedInstructions = [];
        this.options = {
            useHref: true,
            statefulHistoryLength: 0,
            useDirectRoutes: true,
            useConfiguredRoutes: true,
        };
        this.isActive = false;
        this.loadedFirst = false;
        this.processingNavigation = null;
        this.lastNavigation = null;
        this.staleChecks = {};
        // TODO: use @bound and improve name (eslint-disable is temp)
        // eslint-disable-next-line @typescript-eslint/typedef
        this.linkCallback = (info) => {
            let instruction = info.instruction || '';
            if (typeof instruction === 'string' && instruction.startsWith('#')) {
                instruction = instruction.slice(1);
                // '#' === '/' === '#/'
                if (!instruction.startsWith('/')) {
                    instruction = `/${instruction}`;
                }
            }
            // Adds to Navigator's Queue, which makes sure it's serial
            this.goto(instruction, { origin: info.anchor }).catch(error => { throw error; });
        };
        // TODO: use @bound and improve name (eslint-disable is temp)
        // eslint-disable-next-line @typescript-eslint/typedef
        this.navigatorCallback = (instruction) => {
            // Instructions extracted from queue, one at a time
            this.processNavigations(instruction).catch(error => { throw error; });
        };
        // TODO: use @bound and improve name (eslint-disable is temp)
        // eslint-disable-next-line @typescript-eslint/typedef
        this.navigatorSerializeCallback = async (entry, preservedEntries) => {
            let excludeComponents = [];
            for (const preservedEntry of preservedEntries) {
                if (typeof preservedEntry.instruction !== 'string') {
                    excludeComponents.push(...this.instructionResolver.flattenViewportInstructions(preservedEntry.instruction)
                        .filter(instruction => instruction.viewport !== null)
                        .map(instruction => instruction.componentInstance));
                }
                if (typeof preservedEntry.fullStateInstruction !== 'string') {
                    excludeComponents.push(...this.instructionResolver.flattenViewportInstructions(preservedEntry.fullStateInstruction)
                        .filter(instruction => instruction.viewport !== null)
                        .map(instruction => instruction.componentInstance));
                }
            }
            excludeComponents = excludeComponents.filter((component, i, arr) => component !== null && arr.indexOf(component) === i);
            const serialized = { ...entry };
            let instructions = [];
            if (serialized.fullStateInstruction && typeof serialized.fullStateInstruction !== 'string') {
                instructions.push(...serialized.fullStateInstruction);
                serialized.fullStateInstruction = this.instructionResolver.stringifyViewportInstructions(serialized.fullStateInstruction);
            }
            if (serialized.instruction && typeof serialized.instruction !== 'string') {
                instructions.push(...serialized.instruction);
                serialized.instruction = this.instructionResolver.stringifyViewportInstructions(serialized.instruction);
            }
            instructions = instructions.filter((instruction, i, arr) => instruction !== null
                && instruction.componentInstance !== null
                && arr.indexOf(instruction) === i);
            const alreadyDone = [];
            for (const instruction of instructions) {
                await this.freeComponents(instruction, excludeComponents, alreadyDone);
            }
            return serialized;
        };
        // TODO: use @bound and improve name (eslint-disable is temp)
        // eslint-disable-next-line @typescript-eslint/typedef
        this.browserNavigatorCallback = (browserNavigationEvent) => {
            const entry = (browserNavigationEvent.state && browserNavigationEvent.state.currentEntry
                ? browserNavigationEvent.state.currentEntry
                : { instruction: '', fullStateInstruction: '' });
            entry.instruction = browserNavigationEvent.instruction;
            entry.fromBrowser = true;
            this.navigator.navigate(entry).catch(error => { throw error; });
        };
        // TODO: use @bound and improve name (eslint-disable is temp)
        // eslint-disable-next-line @typescript-eslint/typedef
        this.processNavigations = async (qInstruction) => {
            const instruction = this.processingNavigation = qInstruction;
            if (this.options.reportCallback) {
                this.options.reportCallback(instruction);
            }
            let fullStateInstruction = false;
            const instructionNavigation = instruction.navigation;
            if ((instructionNavigation.back || instructionNavigation.forward) && instruction.fullStateInstruction) {
                fullStateInstruction = true;
                // if (!confirm('Perform history navigation?')) { this.navigator.cancel(instruction); this.processingNavigation = null; return Promise.resolve(); }
            }
            let configuredRoute = await this.findInstructions(this.rootScope.scope, instruction.instruction, instruction.scope || this.rootScope.scope, !fullStateInstruction);
            let instructions = configuredRoute.instructions;
            let configuredRoutePath = null;
            if (instruction.instruction.length > 0 && !configuredRoute.foundConfiguration && !configuredRoute.foundInstructions) {
                // TODO: Do something here!
                this.unknownRoute(configuredRoute.remaining);
            }
            if (configuredRoute.foundConfiguration) {
                instruction.path = instruction.instruction.startsWith('/')
                    ? instruction.instruction.slice(1) : instruction.instruction;
                configuredRoutePath = `${configuredRoutePath || ''}${configuredRoute.matching}`;
                this.rootScope.path = configuredRoutePath;
            }
            // TODO: Used to have an early exit if no instructions. Restore it?
            const clearScopeOwners = [];
            let clearViewportScopes = [];
            for (const clearInstruction of instructions.filter(instr => this.instructionResolver.isClearAllViewportsInstruction(instr))) {
                const scope = clearInstruction.scope || this.rootScope.scope;
                clearScopeOwners.push(...scope.children.filter(scope => !scope.owner.isEmpty).map(scope => scope.owner));
                if (scope.viewportScope !== null) {
                    clearViewportScopes.push(scope.viewportScope);
                }
            }
            instructions = instructions.filter(instr => !this.instructionResolver.isClearAllViewportsInstruction(instr));
            for (const addInstruction of instructions.filter(instr => this.instructionResolver.isAddAllViewportsInstruction(instr))) {
                addInstruction.setViewport((addInstruction.scope || this.rootScope.scope).viewportScope.name);
                addInstruction.scope = addInstruction.scope.owningScope;
            }
            const updatedScopeOwners = [];
            const alreadyFoundInstructions = [];
            // TODO: Take care of cancellations down in subsets/iterations
            let { found: viewportInstructions, remaining: remainingInstructions } = this.findViewports(instructions, alreadyFoundInstructions);
            let guard = 100;
            do {
                if (!guard--) { // Guard against endless loop
                    console.log('remainingInstructions', remainingInstructions);
                    throw Reporter.error(2002);
                }
                const changedScopeOwners = [];
                const hooked = await this.hookManager.invokeBeforeNavigation(viewportInstructions, instruction);
                if (hooked === false) {
                    return this.cancelNavigation([...changedScopeOwners, ...updatedScopeOwners], instruction);
                }
                else {
                    viewportInstructions = hooked;
                }
                for (const viewportInstruction of viewportInstructions) {
                    const scopeOwner = viewportInstruction.owner;
                    if (scopeOwner !== null) {
                        scopeOwner.path = configuredRoutePath;
                        if (scopeOwner.setNextContent(viewportInstruction, instruction)) {
                            changedScopeOwners.push(scopeOwner);
                        }
                        arrayRemove(clearScopeOwners, value => value === scopeOwner);
                        if (!this.instructionResolver.isClearViewportInstruction(viewportInstruction)
                            && viewportInstruction.scope !== null
                            && viewportInstruction.scope.parent !== null
                            && viewportInstruction.scope.parent.isViewportScope) {
                            arrayRemove(clearViewportScopes, value => value === viewportInstruction.scope.parent.viewportScope);
                        }
                    }
                }
                let results = await Promise.all(changedScopeOwners.map((value) => value.canLeave()));
                if (results.some(result => result === false)) {
                    return this.cancelNavigation([...changedScopeOwners, ...updatedScopeOwners], instruction);
                }
                results = await Promise.all(changedScopeOwners.map(async (value) => {
                    const canEnter = await value.canEnter();
                    if (typeof canEnter === 'boolean') {
                        if (canEnter) {
                            return value.enter();
                        }
                        else {
                            return false;
                        }
                    }
                    await this.goto(canEnter, { append: true });
                    await value.abortContentChange();
                    // TODO: Abort content change in the viewports
                    return true;
                }));
                if (results.some(result => result === false)) {
                    return this.cancelNavigation([...changedScopeOwners, ...updatedScopeOwners], qInstruction);
                }
                for (const viewport of changedScopeOwners) {
                    if (updatedScopeOwners.every(value => value !== viewport)) {
                        updatedScopeOwners.push(viewport);
                    }
                }
                // TODO: Fix multi level recursiveness!
                alreadyFoundInstructions.push(...viewportInstructions);
                ({ found: viewportInstructions, remaining: remainingInstructions } = this.findViewports(remainingInstructions, alreadyFoundInstructions));
                // Look for configured child routes (once we've loaded everything so far?)
                if (configuredRoute.hasRemaining &&
                    viewportInstructions.length === 0 &&
                    remainingInstructions.length === 0) {
                    let configured = new FoundRoute();
                    const routeScopeOwners = alreadyFoundInstructions
                        .filter(instr => instr.owner !== null && instr.owner.path === configuredRoutePath)
                        .map(instr => instr.owner)
                        .filter((value, index, arr) => arr.indexOf(value) === index);
                    for (const owner of routeScopeOwners) {
                        configured = await this.findInstructions(owner.scope, configuredRoute.remaining, owner.scope);
                        if (configured.foundConfiguration) {
                            break;
                        }
                    }
                    if (configured.foundInstructions) {
                        configuredRoute = configured;
                        configuredRoutePath = `${configuredRoutePath || ''}/${configuredRoute.matching}`;
                    }
                    else {
                        // TODO: Do something here!
                        this.unknownRoute(configured.remaining);
                    }
                    this.appendInstructions(configured.instructions);
                }
                // Don't use defaults when it's a full state navigation
                if (fullStateInstruction) {
                    this.appendedInstructions = this.appendedInstructions.filter(instruction => !instruction.default);
                }
                // Process non-defaults first
                let appendedInstructions = this.appendedInstructions.filter(instruction => !instruction.default);
                this.appendedInstructions = this.appendedInstructions.filter(instruction => instruction.default);
                if (appendedInstructions.length === 0) {
                    const index = this.appendedInstructions.findIndex(instruction => instruction.default);
                    if (index >= 0) {
                        appendedInstructions = this.appendedInstructions.splice(index, 1);
                    }
                }
                while (appendedInstructions.length > 0) {
                    const appendedInstruction = appendedInstructions.shift();
                    const existingAlreadyFound = alreadyFoundInstructions.some(instruction => instruction.sameViewport(appendedInstruction));
                    const existingFound = viewportInstructions.find(value => value.sameViewport(appendedInstruction));
                    const existingRemaining = remainingInstructions.find(value => value.sameViewport(appendedInstruction));
                    if (appendedInstruction.default &&
                        (existingAlreadyFound ||
                            (existingFound !== void 0 && !existingFound.default) ||
                            (existingRemaining !== void 0 && !existingRemaining.default))) {
                        continue;
                    }
                    if (existingFound !== void 0) {
                        arrayRemove(viewportInstructions, value => value === existingFound);
                    }
                    if (existingRemaining !== void 0) {
                        arrayRemove(remainingInstructions, value => value === existingRemaining);
                    }
                    if (appendedInstruction.viewport !== null) {
                        viewportInstructions.push(appendedInstruction);
                    }
                    else {
                        remainingInstructions.push(appendedInstruction);
                    }
                }
                if (viewportInstructions.length === 0 && remainingInstructions.length === 0) {
                    viewportInstructions = clearScopeOwners.map(owner => {
                        const instruction = this.createViewportInstruction(this.instructionResolver.clearViewportInstruction, owner.isViewport ? owner : void 0);
                        if (owner.isViewportScope) {
                            instruction.viewportScope = owner;
                        }
                        return instruction;
                    });
                    viewportInstructions.push(...clearViewportScopes.map(viewportScope => {
                        const instr = this.createViewportInstruction(this.instructionResolver.clearViewportInstruction);
                        instr.viewportScope = viewportScope;
                        return instr;
                    }));
                    clearViewportScopes = [];
                }
            } while (viewportInstructions.length > 0 || remainingInstructions.length > 0);
            await Promise.all(updatedScopeOwners.map((value) => value.loadContent()));
            await this.replacePaths(instruction);
            // this.updateNav();
            // Remove history entry if no history viewports updated
            if (instructionNavigation.new && !instructionNavigation.first && !instruction.repeating && updatedScopeOwners.every(viewport => viewport.options.noHistory)) {
                instruction.untracked = true;
            }
            updatedScopeOwners.forEach((viewport) => {
                viewport.finalizeContentChange();
            });
            this.lastNavigation = this.processingNavigation;
            if (this.lastNavigation.repeating) {
                this.lastNavigation.repeating = false;
            }
            this.processingNavigation = null;
            await this.navigator.finalize(instruction);
        };
        this.hookManager = new HookManager();
    }
    get isNavigating() {
        return this.processingNavigation !== null;
    }
    get statefulHistory() {
        return this.options.statefulHistoryLength !== void 0 && this.options.statefulHistoryLength > 0;
    }
    activate(options) {
        if (this.isActive) {
            throw new Error('Router has already been activated');
        }
        this.isActive = true;
        this.options = {
            ...this.options,
            ...options
        };
        if (this.options.hooks !== void 0) {
            this.addHooks(this.options.hooks);
        }
        this.instructionResolver.activate({ separators: this.options.separators });
        this.navigator.activate(this, {
            callback: this.navigatorCallback,
            store: this.navigation,
            statefulHistoryLength: this.options.statefulHistoryLength,
            serializeCallback: this.statefulHistory ? this.navigatorSerializeCallback : void 0,
        });
        this.linkHandler.activate({ callback: this.linkCallback, useHref: this.options.useHref });
        this.navigation.activate({
            callback: this.browserNavigatorCallback,
            useUrlFragmentHash: this.options.useUrlFragmentHash
        });
        this.ensureRootScope();
    }
    async loadUrl() {
        const entry = {
            ...this.navigation.viewerState,
            ...{
                fullStateInstruction: '',
                replacing: true,
                fromBrowser: false,
            }
        };
        const result = this.navigator.navigate(entry);
        this.loadedFirst = true;
        return result;
    }
    deactivate() {
        if (!this.isActive) {
            throw new Error('Router has not been activated');
        }
        this.linkHandler.deactivate();
        this.navigator.deactivate();
        this.navigation.deactivate();
    }
    findScope(origin) {
        // this.ensureRootScope();
        if (origin === void 0 || origin === null) {
            return this.rootScope.scope;
        }
        if (origin instanceof Scope$1 || origin instanceof Viewport) {
            return origin.scope;
        }
        return this.getClosestScope(origin) || this.rootScope.scope;
    }
    findParentScope(container) {
        if (container === null) {
            return this.rootScope.scope;
        }
        // Already (prematurely) set on this view model so get it from container's parent instead
        if (container.has(ClosestScope, false)) {
            container = container.parent;
            if (container === null) {
                return this.rootScope.scope;
            }
        }
        if (container.has(ClosestScope, true)) {
            return container.get(ClosestScope);
        }
        return this.rootScope.scope;
    }
    // External API to get viewport by name
    getViewport(name) {
        return this.allViewports().find(viewport => viewport.name === name) || null;
    }
    // Called from the viewport scope custom element in created()
    setClosestScope(viewModelOrContainer, scope) {
        const container = this.getContainer(viewModelOrContainer);
        Registration.instance(ClosestScope, scope).register(container);
    }
    getClosestScope(viewModelOrElement) {
        const container = 'resourceResolvers' in viewModelOrElement
            ? viewModelOrElement
            : this.getClosestContainer(viewModelOrElement);
        if (container === null) {
            return null;
        }
        if (!container.has(ClosestScope, true)) {
            return null;
        }
        return container.get(ClosestScope) || null;
    }
    unsetClosestScope(viewModelOrContainer) {
        const container = this.getContainer(viewModelOrContainer);
        // TODO: Get an 'unregister' on container
        container.resolvers.delete(ClosestScope);
    }
    // Called from the viewport custom element in attached()
    connectViewport(viewport, container, name, element, options) {
        const parentScope = this.findParentScope(container);
        if (viewport === null) {
            viewport = parentScope.addViewport(name, element, container, options);
            this.setClosestScope(container, viewport.connectedScope);
        }
        return viewport;
    }
    // Called from the viewport custom element
    disconnectViewport(viewport, container, element) {
        if (!viewport.connectedScope.parent.removeViewport(viewport, element, container)) {
            throw new Error(`Failed to remove viewport: ${viewport.name}`);
        }
        this.unsetClosestScope(container);
    }
    // Called from the viewport scope custom element in attached()
    connectViewportScope(viewportScope, name, container, element, options) {
        const parentScope = this.findParentScope(container);
        if (viewportScope === null) {
            viewportScope = parentScope.addViewportScope(name, element, options);
            this.setClosestScope(container, viewportScope.connectedScope);
        }
        return viewportScope;
    }
    // Called from the viewport scope custom element
    disconnectViewportScope(viewportScope, container) {
        if (!viewportScope.connectedScope.parent.removeViewportScope(viewportScope)) {
            throw new Error(`Failed to remove viewport scope: ${viewportScope.path}`);
        }
        this.unsetClosestScope(container);
    }
    allViewports(includeDisabled = false, includeReplaced = false) {
        // this.ensureRootScope();
        return this.rootScope.scope.allViewports(includeDisabled, includeReplaced);
    }
    goto(instructions, options) {
        options = options || {};
        // TODO: Review query extraction; different pos for path and fragment!
        if (typeof instructions === 'string' && !options.query) {
            const [path, search] = instructions.split('?');
            instructions = path;
            options.query = search;
        }
        const toOptions = {};
        if (options.origin) {
            toOptions.context = options.origin;
        }
        let scope = null;
        ({ instructions, scope } = NavigationInstructionResolver.createViewportInstructions(this, instructions, toOptions));
        if (options.append && this.processingNavigation) {
            instructions = NavigationInstructionResolver.toViewportInstructions(this, instructions);
            this.appendInstructions(instructions, scope);
            // Can't return current navigation promise since it can lead to deadlock in enter
            return Promise.resolve();
        }
        const entry = {
            instruction: instructions,
            fullStateInstruction: '',
            scope: scope,
            title: options.title,
            data: options.data,
            query: options.query,
            replacing: options.replace,
            repeating: options.append,
            fromBrowser: false,
        };
        return this.navigator.navigate(entry);
    }
    refresh() {
        return this.navigator.refresh();
    }
    back() {
        return this.navigator.go(-1);
    }
    forward() {
        return this.navigator.go(1);
    }
    checkActive(instructions) {
        for (const instruction of instructions) {
            const scopeInstructions = this.instructionResolver.matchScope(this.activeComponents, instruction.scope);
            const matching = scopeInstructions.filter(instr => instr.sameComponent(instruction, true));
            if (matching.length === 0) {
                return false;
            }
            if (Array.isArray(instruction.nextScopeInstructions)
                && instruction.nextScopeInstructions.length > 0
                && this.instructionResolver.matchChildren(instruction.nextScopeInstructions, matching.map(instr => Array.isArray(instr.nextScopeInstructions) ? instr.nextScopeInstructions : []).flat()) === false) {
                return false;
            }
        }
        return true;
    }
    setNav(name, routes, classes) {
        const nav = this.findNav(name);
        if (nav !== void 0 && nav !== null) {
            nav.routes = [];
        }
        this.addNav(name, routes, classes);
    }
    addNav(name, routes, classes) {
        let nav = this.navs[name];
        if (nav === void 0 || nav === null) {
            nav = this.navs[name] = new Nav(this, name, [], classes);
        }
        nav.addRoutes(routes);
        nav.update();
    }
    updateNav(name) {
        const navs = name
            ? [name]
            : Object.keys(this.navs);
        for (const nav of navs) {
            if (this.navs[nav] !== void 0 && this.navs[nav] !== null) {
                this.navs[nav].update();
            }
        }
    }
    findNav(name) {
        return this.navs[name];
    }
    addRoutes(routes, context) {
        // TODO: This should add to the context instead
        // TODO: Add routes without context to rootScope content (which needs to be created)?
        return [];
        // const viewport = (context !== void 0 ? this.closestViewport(context) : this.rootScope) || this.rootScope as Viewport;
        // return viewport.addRoutes(routes);
    }
    removeRoutes(routes, context) {
        // TODO: This should remove from the context instead
        // const viewport = (context !== void 0 ? this.closestViewport(context) : this.rootScope) || this.rootScope as Viewport;
        // return viewport.removeRoutes(routes);
    }
    addHooks(hooks) {
        return hooks.map(hook => this.addHook(hook.hook, hook.options));
    }
    addHook(hook, options) {
        return this.hookManager.addHook(hook, options);
    }
    removeHooks(hooks) {
        return;
    }
    createViewportInstruction(component, viewport, parameters, ownsScope = true, nextScopeInstructions = null) {
        return this.instructionResolver.createViewportInstruction(component, viewport, parameters, ownsScope, nextScopeInstructions);
    }
    async findInstructions(scope, instruction, instructionScope, transformUrl = false) {
        let route = new FoundRoute();
        if (typeof instruction === 'string') {
            instruction = transformUrl
                ? await this.hookManager.invokeTransformFromUrl(instruction, this.processingNavigation)
                : instruction;
            if (Array.isArray(instruction)) {
                route.instructions = instruction;
            }
            else {
                // TODO: Review this
                if (instruction === '/') {
                    instruction = '';
                }
                const instructions = this.instructionResolver.parseViewportInstructions(instruction);
                if (this.options.useConfiguredRoutes && !this.hasSiblingInstructions(instructions)) {
                    const foundRoute = scope.findMatchingRoute(instruction);
                    if (foundRoute !== null && foundRoute.foundConfiguration) {
                        route = foundRoute;
                    }
                    else {
                        if (this.options.useDirectRoutes) {
                            route.instructions = instructions;
                            if (route.instructions.length > 0) {
                                const nextInstructions = route.instructions[0].nextScopeInstructions || [];
                                route.remaining = this.instructionResolver.stringifyViewportInstructions(nextInstructions);
                                route.instructions[0].nextScopeInstructions = null;
                            }
                        }
                    }
                }
                else if (this.options.useDirectRoutes) {
                    route.instructions = instructions;
                }
            }
        }
        else {
            route.instructions = instruction;
        }
        for (const instr of route.instructions) {
            if (instr.scope === null) {
                instr.scope = instructionScope;
            }
        }
        return route;
    }
    hasSiblingInstructions(instructions) {
        if (instructions === null) {
            return false;
        }
        if (instructions.length > 1) {
            return true;
        }
        return instructions.some(instruction => this.hasSiblingInstructions(instruction.nextScopeInstructions));
    }
    appendInstructions(instructions, scope = null) {
        if (scope === null) {
            scope = this.rootScope.scope;
        }
        for (const instruction of instructions) {
            if (instruction.scope === null) {
                instruction.scope = scope;
            }
        }
        this.appendedInstructions.push(...instructions);
    }
    checkStale(name, instructions) {
        const staleCheck = this.staleChecks[name];
        if (staleCheck === void 0) {
            this.staleChecks[name] = instructions.slice();
            return false;
        }
        if (staleCheck.length !== instructions.length) {
            this.staleChecks[name] = instructions.slice();
            return false;
        }
        for (let i = 0, ii = instructions.length; i < ii; i++) {
            if (staleCheck[i] !== instructions[i]) {
                this.staleChecks[name] = instructions.slice();
                return false;
            }
        }
        return true;
    }
    unknownRoute(route) {
        if (typeof route !== 'string' || route.length === 0) {
            return;
        }
        if (this.options.useConfiguredRoutes && this.options.useDirectRoutes) {
            // TODO: Add missing/unknown route handling
            throw new Error(`No matching configured route or component found for '${route}'`);
        }
        else if (this.options.useConfiguredRoutes) {
            // TODO: Add missing/unknown route handling
            throw new Error(`No matching configured route found for '${route}'`);
        }
        else {
            // TODO: Add missing/unknown route handling
            throw new Error(`No matching route/component found for '${route}'`);
        }
    }
    findViewports(instructions, alreadyFound, withoutViewports = false) {
        const found = [];
        const remaining = [];
        while (instructions.length) {
            if (instructions[0].scope === null) {
                instructions[0].scope = this.rootScope.scope;
            }
            const scope = instructions[0].scope;
            const { foundViewports, remainingInstructions } = scope.findViewports(instructions.filter(instruction => instruction.scope === scope), alreadyFound, withoutViewports);
            found.push(...foundViewports);
            remaining.push(...remainingInstructions);
            instructions = instructions.filter(instruction => instruction.scope !== scope);
        }
        return { found: found.slice(), remaining };
    }
    async cancelNavigation(updatedScopeOwners, qInstruction) {
        // TODO: Take care of disabling viewports when cancelling and stateful!
        updatedScopeOwners.forEach((viewport) => {
            viewport.abortContentChange().catch(error => { throw error; });
        });
        await this.navigator.cancel(qInstruction);
        this.processingNavigation = null;
        qInstruction.resolve();
    }
    ensureRootScope() {
        if (!this.rootScope) {
            const root = this.container.get(Aurelia).root;
            // root.config.component shouldn't be used in the end. Metadata will probably eliminate it
            this.rootScope = new ViewportScope('rootScope', this, root.config.host, null, true, root.config.component);
        }
        return this.rootScope;
    }
    async replacePaths(instruction) {
        this.rootScope.scope.reparentViewportInstructions();
        let instructions = this.rootScope.scope.hoistedChildren
            .filter(scope => scope.viewportInstruction !== null && !scope.viewportInstruction.isEmpty())
            .map(scope => scope.viewportInstruction);
        instructions = this.instructionResolver.cloneViewportInstructions(instructions, true);
        // The following makes sure right viewport/viewport scopes are set and update
        // whether viewport name is necessary or not
        const alreadyFound = [];
        let { found, remaining } = this.findViewports(instructions, alreadyFound, true);
        let guard = 100;
        while (remaining.length) {
            // Guard against endless loop
            if (!guard--) {
                throw new Error('Failed to find viewport when updating viewer paths.');
            }
            alreadyFound.push(...found);
            ({ found, remaining } = this.findViewports(remaining, alreadyFound, true));
        }
        this.activeComponents = instructions;
        this.activeRoute = instruction.route;
        // First invoke with viewport instructions (should it perhaps get full state?)
        let state = await this.hookManager.invokeTransformToUrl(instructions, instruction);
        if (typeof state !== 'string') {
            // Convert to string if necessary
            state = this.instructionResolver.stringifyViewportInstructions(state, false, true);
        }
        // Invoke again with string
        state = await this.hookManager.invokeTransformToUrl(state, instruction);
        const query = (instruction.query && instruction.query.length ? `?${instruction.query}` : '');
        // if (instruction.path === void 0 || instruction.path.length === 0 || instruction.path === '/') {
        instruction.path = state + query;
        // }
        const fullViewportStates = [this.createViewportInstruction(this.instructionResolver.clearViewportInstruction)];
        fullViewportStates.push(...this.instructionResolver.cloneViewportInstructions(instructions, this.statefulHistory));
        instruction.fullStateInstruction = fullViewportStates;
        // TODO: Fetch and update title
        return Promise.resolve();
    }
    async freeComponents(instruction, excludeComponents, alreadyDone) {
        const component = instruction.componentInstance;
        const viewport = instruction.viewport;
        if (component === null || viewport === null || alreadyDone.some(done => done === component)) {
            return;
        }
        if (!excludeComponents.some(exclude => exclude === component)) {
            await viewport.freeContent(component);
            alreadyDone.push(component);
            return;
        }
        if (instruction.nextScopeInstructions !== null) {
            for (const nextInstruction of instruction.nextScopeInstructions) {
                await this.freeComponents(nextInstruction, excludeComponents, alreadyDone);
            }
        }
    }
    getClosestContainer(viewModelOrElement) {
        if ('context' in viewModelOrElement) {
            return viewModelOrElement.context;
        }
        if ('$controller' in viewModelOrElement) {
            return viewModelOrElement.$controller.context;
        }
        const controller = this.CustomElementFor(viewModelOrElement);
        if (controller === void 0) {
            return null;
        }
        return controller.context;
    }
    getContainer(viewModelOrContainer) {
        if ('resourceResolvers' in viewModelOrContainer) {
            return viewModelOrContainer;
        }
        if (isRenderContext(viewModelOrContainer)) {
            return viewModelOrContainer.get(IContainer);
        }
        if ('$controller' in viewModelOrContainer) {
            return viewModelOrContainer.$controller.context.get(IContainer);
        }
        return null;
    }
    // TODO: This is probably wrong since it caused test fails when in CustomElement.for
    // Fred probably knows and will need to look at it
    // This can most likely also be changed so that the node traversal isn't necessary
    CustomElementFor(node) {
        let cur = node;
        while (cur !== null) {
            const nodeResourceName = cur.nodeName.toLowerCase();
            const controller = Metadata.getOwn(`${CustomElement.name}:${nodeResourceName}`, cur)
                || Metadata.getOwn(CustomElement.name, cur);
            if (controller !== void 0) {
                return controller;
            }
            cur = DOM.getEffectiveParentNode(cur);
        }
        return (void 0);
    }
}
Router.inject = [IContainer, Navigator, BrowserViewerStore, LinkHandler, InstructionResolver];

var __decorate$Y = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$T = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let NavCustomElement = class NavCustomElement {
    constructor(router) {
        this.router = router;
        this.name = null;
        this.routes = null;
        this.level = 0;
        this.classes = {};
    }
    get navRoutes() {
        const nav = this.router.navs[this.name];
        return (nav !== void 0 && nav !== null ? nav.routes : []);
    }
    get navClasses() {
        const nav = this.router.navs[this.name];
        const navClasses = (nav !== void 0 && nav !== null ? nav.classes : {});
        return {
            ...{
                nav: '',
                ul: '',
                li: '',
                a: '',
                ulActive: '',
                liActive: 'nav-active',
                aActive: '',
            }, ...navClasses
        };
    }
    active(route) {
        return 'Active';
    }
};
__decorate$Y([
    bindable,
    __metadata$T("design:type", Object)
], NavCustomElement.prototype, "name", void 0);
__decorate$Y([
    bindable,
    __metadata$T("design:type", Object)
], NavCustomElement.prototype, "routes", void 0);
__decorate$Y([
    bindable,
    __metadata$T("design:type", Number)
], NavCustomElement.prototype, "level", void 0);
__decorate$Y([
    bindable,
    __metadata$T("design:type", Object)
], NavCustomElement.prototype, "classes", void 0);
NavCustomElement = __decorate$Y([
    inject(IRouter, INode),
    customElement({
        name: 'au-nav', template: `<template>
  <nav if.bind="name" class="\${name} \${navClasses.nav}">
    <au-nav routes.bind="navRoutes" classes.bind="navClasses" containerless></au-nav>
  </nav>
  <ul if.bind="routes" class="nav-level-\${level} \${classes.ul}">
    <li repeat.for="route of routes" if.bind="route.visible" class="\${route.active ? classes.liActive : ''} \${route.hasChildren} \${classes.li}">
      <a if.bind="route.link && route.link.length" goto="\${route.link}" class="\${route.active ? classes.aActive : ''} \${classes.a}" innerhtml.bind="route.title"></a>
      <a if.bind="route.execute" click.trigger="route.executeAction($event)" href="" class="\${route.active ? classes.aActive : ''} \${classes.a}" innerhtml.bind="route.title"></a>
      <span if.bind="(!route.link || !route.link.length) && !route.execute && !route.children" class="\${route.active ? classes.aActive : ''} \${classes.span} nav-separator" innerhtml.bind="route.title"></span>
      <a if.bind="(!route.link || !route.link.length) && !route.execute && route.children" click.delegate="route.toggleActive()" href="" class="\${route.active ? classes.aActive : ''} \${classes.a}" innerhtml.bind="route.title"></a>
      <au-nav if.bind="route.children" routes.bind="route.children" level.bind="level + 1" classes.bind="classes" containerless></au-nav>
    </li>
  </ul>
</template>`
    }),
    __metadata$T("design:paramtypes", [Object])
], NavCustomElement);

var __decorate$Z = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$U = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$u = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const ParentViewport = CustomElement.createInjectable();
let ViewportCustomElement = class ViewportCustomElement {
    constructor(router, element, container, parentViewport) {
        this.router = router;
        this.container = container;
        this.parentViewport = parentViewport;
        this.name = 'default';
        this.usedBy = '';
        this.default = '';
        this.fallback = '';
        this.noScope = false;
        this.noLink = false;
        this.noHistory = false;
        this.stateful = false;
        this.viewport = null;
        this.isBound = false;
        this.element = element;
    }
    afterCompile(controller) {
        this.container = controller.context.get(IContainer);
        // console.log('Viewport creating', this.getAttribute('name', this.name), this.container, this.parentViewport, controller, this);
        // this.connect();
    }
    afterUnbind() {
        this.isBound = false;
    }
    connect() {
        if (this.router.rootScope === null) {
            return;
        }
        const name = this.getAttribute('name', this.name);
        let value = this.getAttribute('no-scope', this.noScope);
        const options = { scope: value === void 0 || !value ? true : false };
        value = this.getAttribute('used-by', this.usedBy);
        if (value !== void 0) {
            options.usedBy = value;
        }
        value = this.getAttribute('default', this.default);
        if (value !== void 0) {
            options.default = value;
        }
        value = this.getAttribute('fallback', this.fallback);
        if (value !== void 0) {
            options.fallback = value;
        }
        value = this.getAttribute('no-link', this.noLink, true);
        if (value !== void 0) {
            options.noLink = value;
        }
        value = this.getAttribute('no-history', this.noHistory, true);
        if (value !== void 0) {
            options.noHistory = value;
        }
        value = this.getAttribute('stateful', this.stateful, true);
        if (value !== void 0) {
            options.stateful = value;
        }
        this.viewport = this.router.connectViewport(this.viewport, this.container, name, this.element, options);
    }
    disconnect() {
        if (this.viewport) {
            this.router.disconnectViewport(this.viewport, this.container, this.element);
        }
        this.viewport = null;
    }
    beforeBind(flags) {
        this.isBound = true;
        this.connect();
        if (this.viewport) {
            this.viewport.beforeBind(flags);
        }
    }
    beforeAttach(flags) {
        if (this.viewport) {
            return this.viewport.beforeAttach(flags);
        }
        return Promise.resolve();
    }
    beforeDetach(flags) {
        if (this.viewport) {
            return this.viewport.beforeDetach(flags);
        }
        return Promise.resolve();
    }
    async beforeUnbind(flags) {
        if (this.viewport) {
            await this.viewport.beforeUnbind(flags);
            this.disconnect();
        }
    }
    getAttribute(key, value, checkExists = false) {
        if (this.isBound && !checkExists) {
            return value;
        }
        else {
            if (this.element.hasAttribute(key)) {
                if (checkExists) {
                    return true;
                }
                else {
                    value = this.element.getAttribute(key);
                    if (value.length > 0) {
                        return value;
                    }
                }
            }
        }
        return void 0;
    }
};
__decorate$Z([
    bindable,
    __metadata$U("design:type", String)
], ViewportCustomElement.prototype, "name", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", String)
], ViewportCustomElement.prototype, "usedBy", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", String)
], ViewportCustomElement.prototype, "default", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", String)
], ViewportCustomElement.prototype, "fallback", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", Boolean)
], ViewportCustomElement.prototype, "noScope", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", Boolean)
], ViewportCustomElement.prototype, "noLink", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", Boolean)
], ViewportCustomElement.prototype, "noHistory", void 0);
__decorate$Z([
    bindable,
    __metadata$U("design:type", Boolean)
], ViewportCustomElement.prototype, "stateful", void 0);
ViewportCustomElement = __decorate$Z([
    customElement({
        name: 'au-viewport',
        injectable: ParentViewport
    }),
    __param$u(0, IRouter),
    __param$u(1, INode),
    __param$u(2, IContainer),
    __param$u(3, ParentViewport),
    __metadata$U("design:paramtypes", [Object, Object, Object, ViewportCustomElement])
], ViewportCustomElement);

var __decorate$_ = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$V = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$v = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
const ParentViewportScope = CustomElement.createInjectable();
let ViewportScopeCustomElement = class ViewportScopeCustomElement {
    constructor(router, element, container, parent, parentController) {
        this.router = router;
        this.container = container;
        this.parent = parent;
        this.parentController = parentController;
        this.name = 'default';
        this.catches = '';
        this.collection = false;
        this.source = null;
        this.viewportScope = null;
        this.isBound = false;
        this.element = element;
    }
    create(controller, parentContainer, definition, parts) {
        // TODO(fkleuver): describe this somewhere in the docs instead
        // Under the condition that there is no `replace` attribute on this custom element's declaration,
        // and this custom element is containerless, its content will be placed in a part named 'default'
        // See packages/jit-html/src/template-binder.ts line 411 (`replace = 'default';`) for the logic that governs this.
        // We could tidy this up into a formal api in the future. For now, there are two ways to do this:
        // 1. inject the `@ITargetedInstruction` (IHydrateElementInstruction) and grab .parts['default'] from there, manually creating a view factory from that, etc.
        // 2. what we're doing right here: grab the 'default' part from the create hook and return it as the definition, telling the render context to use that part to compile this element instead
        // This effectively causes this element to render its declared content as if it was its own template.
        // We do need to set `containerless` to true on the part definition so that the correct projector is used since parts default to non-containerless.
        // Otherwise, the controller will try to do `appendChild` on a comment node when it has to do `insertBefore`.
        // Also, in this particular scenario (specific to viewport-scope) we need to clone the part so as to prevent the resulting compiled definition
        // from ever being cached. That's the only reason why we're spreading the part into a new object for `getOrCreate`. If we didn't clone the object, this specific element wouldn't work correctly.
        const part = parts['default'];
        return CustomElementDefinition.getOrCreate({ ...part, containerless: true });
    }
    afterCompile(controller) {
        this.container = controller.context.get(IContainer);
        // console.log('ViewportScope creating', this.getAttribute('name', this.name), this.container, this.parent, controller, this);
        // this.connect();
    }
    afterUnbound() {
        this.isBound = false;
    }
    connect() {
        if (this.router.rootScope === null) {
            return;
        }
        const name = this.getAttribute('name', this.name);
        const options = {};
        let value = this.getAttribute('catches', this.catches);
        if (value !== void 0) {
            options.catches = value;
        }
        value = this.getAttribute('collection', this.collection, true);
        if (value !== void 0) {
            options.collection = value;
        }
        // TODO: Needs to be bound? How to solve?
        options.source = this.source || null;
        this.viewportScope = this.router.connectViewportScope(this.viewportScope, name, this.container, this.element, options);
    }
    disconnect() {
        if (this.viewportScope) {
            this.router.disconnectViewportScope(this.viewportScope, this.container);
        }
        this.viewportScope = null;
    }
    beforeBind(flags) {
        this.isBound = true;
        this.$controller.scope = this.parentController.scope;
        this.connect();
        if (this.viewportScope !== null) {
            this.viewportScope.beforeBind();
        }
    }
    async beforeUnbind(flags) {
        if (this.viewportScope !== null) {
            this.viewportScope.beforeUnbind();
        }
        this.disconnect();
        return Promise.resolve();
    }
    getAttribute(key, value, checkExists = false) {
        if (this.isBound) {
            return value;
        }
        else {
            if (this.element.hasAttribute(key)) {
                if (checkExists) {
                    return true;
                }
                else {
                    value = this.element.getAttribute(key);
                    if (value.length > 0) {
                        return value;
                    }
                }
            }
        }
        return void 0;
    }
};
__decorate$_([
    bindable,
    __metadata$V("design:type", String)
], ViewportScopeCustomElement.prototype, "name", void 0);
__decorate$_([
    bindable,
    __metadata$V("design:type", String)
], ViewportScopeCustomElement.prototype, "catches", void 0);
__decorate$_([
    bindable,
    __metadata$V("design:type", Boolean)
], ViewportScopeCustomElement.prototype, "collection", void 0);
__decorate$_([
    bindable,
    __metadata$V("design:type", Object)
], ViewportScopeCustomElement.prototype, "source", void 0);
ViewportScopeCustomElement = __decorate$_([
    customElement({
        name: 'au-viewport-scope',
        template: '<template></template>',
        containerless: true,
        injectable: ParentViewportScope
    }),
    __param$v(0, IRouter),
    __param$v(1, INode),
    __param$v(2, IContainer),
    __param$v(3, ParentViewportScope),
    __param$v(4, IController),
    __metadata$V("design:paramtypes", [Object, Object, Object, ViewportScopeCustomElement, Object])
], ViewportScopeCustomElement);

var __decorate$$ = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$W = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$w = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let GotoCustomAttribute = class GotoCustomAttribute {
    constructor(dom, element, router, eventManager) {
        this.dom = dom;
        this.router = router;
        this.eventManager = eventManager;
        this.listener = null;
        this.hasHref = null;
        this.activeClass = 'goto-active';
        this.element = element;
    }
    beforeBind() {
        this.listener = this.eventManager.addEventListener(this.dom, this.element, 'click', this.router.linkHandler.handler, DelegationStrategy.none);
        this.updateValue();
        const observerLocator = this.router.container.get(IObserverLocator);
        this.observer = observerLocator.getObserver(0 /* none */, this.router, 'activeComponents');
        this.observer.subscribe(this);
    }
    beforeUnbind() {
        if (this.listener !== null) {
            this.listener.dispose();
        }
        this.observer.unsubscribe(this);
    }
    valueChanged(newValue) {
        this.updateValue();
    }
    updateValue() {
        if (this.hasHref === null) {
            this.hasHref = this.element.hasAttribute('href');
        }
        if (!this.hasHref) {
            // TODO: Figure out a better value here for non-strings (using InstructionResolver?)
            const value = typeof this.value === 'string' ? this.value : JSON.stringify(this.value);
            this.element.setAttribute('href', value);
        }
    }
    handleChange() {
        const controller = CustomAttribute.for(this.element, 'goto').parent;
        const created = NavigationInstructionResolver.createViewportInstructions(this.router, this.value, { context: controller });
        const instructions = NavigationInstructionResolver.toViewportInstructions(this.router, created.instructions);
        for (const instruction of instructions) {
            if (instruction.scope === null) {
                instruction.scope = created.scope;
            }
        }
        // TODO: Use router configuration for class name and update target
        if (this.router.checkActive(instructions)) {
            this.element.classList.add(this.activeClass);
        }
        else {
            this.element.classList.remove(this.activeClass);
        }
    }
};
__decorate$$([
    bindable({ mode: BindingMode.toView }),
    __metadata$W("design:type", Object)
], GotoCustomAttribute.prototype, "value", void 0);
GotoCustomAttribute = __decorate$$([
    customAttribute('goto'),
    __param$w(0, IDOM),
    __param$w(1, INode),
    __param$w(2, IRouter),
    __param$w(3, IEventManager),
    __metadata$W("design:paramtypes", [Object, Object, Object, Object])
], GotoCustomAttribute);

var __decorate$10 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$X = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param$x = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let HrefCustomAttribute = class HrefCustomAttribute {
    constructor(dom, element, router, eventManager) {
        this.dom = dom;
        this.router = router;
        this.eventManager = eventManager;
        this.eventListener = null;
        this.element = element;
    }
    beforeBind() {
        if (this.router.options.useHref && !this.hasGoto()) {
            this.eventListener = this.eventManager.addEventListener(this.dom, this.element, 'click', this.router.linkHandler.handler, DelegationStrategy.none);
        }
        this.updateValue();
    }
    beforeUnbind() {
        if (this.eventListener !== null) {
            this.eventListener.dispose();
        }
    }
    valueChanged() {
        this.updateValue();
    }
    updateValue() {
        this.element.setAttribute('href', this.value);
    }
    hasGoto() {
        const parent = this.$controller.parent;
        const siblings = parent.vmKind !== 1 /* customAttribute */ ? parent.controllers : void 0;
        return siblings !== void 0
            && siblings.some(c => c.vmKind === 1 /* customAttribute */ && c.viewModel instanceof GotoCustomAttribute);
    }
};
__decorate$10([
    bindable({ mode: BindingMode.toView }),
    __metadata$X("design:type", Object)
], HrefCustomAttribute.prototype, "value", void 0);
HrefCustomAttribute = __decorate$10([
    customAttribute({
        name: 'href',
        noMultiBindings: true
    }),
    __param$x(0, IDOM),
    __param$x(1, INode),
    __param$x(2, IRouter),
    __param$x(3, IEventManager),
    __metadata$X("design:paramtypes", [Object, Object, Object, Object])
], HrefCustomAttribute);

const RouterRegistration = IRouter;
/**
 * Default runtime/environment-agnostic implementations for the following interfaces:
 * - `IRouter`
 */
const DefaultComponents$5 = [
    RouterRegistration,
];
/**
 * Default router resources:
 * - Custom Elements: `au-viewport`, `au-nav`
 * - Custom Attributes: `goto`, `href`
 */
const DefaultResources$2 = [
    ViewportCustomElement,
    ViewportScopeCustomElement,
    NavCustomElement,
    GotoCustomAttribute,
    HrefCustomAttribute,
];
let configurationOptions = {};
let configurationCall = (router) => {
    router.activate(configurationOptions);
};
/**
 * A DI configuration object containing router resource registrations.
 */
const routerConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        return container.register(...DefaultComponents$5, ...DefaultResources$2, StartTask.with(IRouter).beforeBind().call(configurationCall), StartTask.with(IRouter).beforeAttach().call(router => router.loadUrl()));
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(DI.createContainer());
    }
};
const RouterConfiguration = {
    /**
     * Make it possible to specify options to Router activation.
     * Parameter is either a config object that's passed to Router's activate
     * or a config function that's called instead of Router's activate.
     */
    customize(config) {
        if (config === undefined) {
            configurationOptions = {};
            configurationCall = (router) => {
                router.activate(configurationOptions);
            };
        }
        else if (config instanceof Function) {
            configurationCall = config;
        }
        else {
            configurationOptions = config;
        }
        return { ...routerConfiguration };
    },
    ...routerConfiguration,
};

export default Aurelia$1;
export { AggregateContinuationTask, AggregateTerminalTask, Aurelia$1 as Aurelia, Bindable, BindingBehavior, BindingMode, BindingStrategy, ColorOptions, CompositionRoot, ContinuationTask, Controller, CustomAttribute, CustomElement, DI, $DOM as DOM, DebugConfiguration, EventAggregator, HTMLDOM, HttpClient, HttpClientConfiguration, IAttributePattern, IContainer, IDOM, IEventAggregator, ILifecycle, ILogger, INode, IObserverLocator, IRenderLocation, IRouter, IScheduler, IServiceLocator, ISignaler, IStartTask, IStartTaskManager, InstanceProvider, JitHtmlBrowserConfiguration, LifecycleFlags, LifecycleTask, LogLevel, LoggerConfiguration, Metadata, NavRoute, PLATFORM, Profiler, PromiseTask, ProviderTask, Registration, Reporter, Router, RouterConfiguration, RouterRegistration, ShortHandBindingSyntax, StartTask, StyleConfiguration, TaskQueuePriority, TaskSlot, TerminalTask, TraceConfiguration, Tracer, ValueConverter, ViewFactory, ViewportInstruction, alias, all, attributePattern, bindable, bindingBehavior, bindingCommand, bound, camelCase, children, collectionSubscriberCollection, computed, containerless, createElement, cssModules, customAttribute, customElement, ensureExpression, getTarget$1 as getTarget, inject, instructionRenderer, isArrayIndex, json, kebabCase, lazy, optional, pascalCase, proxySubscriberCollection, registerAliases, shadowCSS, singleton, subscriberCollection, templateController, toArray, transient, useShadowDOM, valueConverter };
